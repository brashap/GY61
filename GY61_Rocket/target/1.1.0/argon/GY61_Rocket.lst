
/home/brian/Particle/GY61_Rocket/target/1.1.0/argon/GY61_Rocket.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003418  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000000  2003f400  2003f400  000174d0  2**0
                  CONTENTS
  3 .data         00000074  2003e230  000d7430  0000e230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          0000054c  2003e2a8  2003e2a8  0001e2a8  2**3
                  ALLOC
  5 .module_info_suffix 00000028  000d74a4  000d74a4  000174a4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  000d74cc  000d74cc  000174cc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000bdab4  00000000  00000000  000174d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00010dab  00000000  00000000  000d4f84  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00002078  00000000  00000000  000e5d2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  0003417c  00000000  00000000  000e7da7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000281f9  00000000  00000000  0011bf23  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000dcd50  00000000  00000000  0014411c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00013d75  00000000  00000000  00220e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000034d0  00000000  00000000  00234be1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000b868  00000000  00000000  002380b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	08 6d 0d 00                                         .m..

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 fdf1 	bl	d6c14 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 fe11 	bl	d6c60 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e230 	.word	0x2003e230
   d4048:	000d7430 	.word	0x000d7430
   d404c:	2003e2a4 	.word	0x2003e2a4
   d4050:	2003e2a8 	.word	0x2003e2a8
   d4054:	2003e7f4 	.word	0x2003e7f4

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 fcb3 	bl	d59c4 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d7430 	.word	0x000d7430
   d4080:	000d73f0 	.word	0x000d73f0

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b846 	b.w	d4114 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f86f 	bl	d416c <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 bc65 	b.w	d5960 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 be67 	b.w	d4d68 <malloc>

000d409a <_ZdlPv>:
   d409a:	f000 be6d 	b.w	d4d78 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 be6b 	b.w	d4d78 <free>
	...

000d40a4 <__cxa_pure_virtual>:
        ;
    }
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f000 fdd0 	bl	d4c50 <panic_>
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d4ba1 	.word	0x000d4ba1

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZN19Adafruit_MQTT_SPARKD1Ev>:


// MQTT client implementation for a generic Arduino Client interface.  Can work
// with almost all Arduino network hardware like ethernet shield, wifi shield,
// and even other platforms like ESP8266.
class Adafruit_MQTT_SPARK : public Adafruit_MQTT {
   d40c8:	4770      	bx	lr
	...

000d40cc <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d40cc:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d40ce:	6984      	ldr	r4, [r0, #24]
   d40d0:	4b0a      	ldr	r3, [pc, #40]	; (d40fc <_ZN9TCPClientD1Ev+0x30>)
   d40d2:	6003      	str	r3, [r0, #0]
   d40d4:	4605      	mov	r5, r0
   d40d6:	b17c      	cbz	r4, d40f8 <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d40d8:	6863      	ldr	r3, [r4, #4]
   d40da:	3b01      	subs	r3, #1
   d40dc:	6063      	str	r3, [r4, #4]
   d40de:	b95b      	cbnz	r3, d40f8 <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
   d40e0:	6823      	ldr	r3, [r4, #0]
   d40e2:	4620      	mov	r0, r4
   d40e4:	689b      	ldr	r3, [r3, #8]
   d40e6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d40e8:	68a3      	ldr	r3, [r4, #8]
   d40ea:	3b01      	subs	r3, #1
   d40ec:	60a3      	str	r3, [r4, #8]
   d40ee:	b91b      	cbnz	r3, d40f8 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d40f0:	6823      	ldr	r3, [r4, #0]
   d40f2:	4620      	mov	r0, r4
   d40f4:	68db      	ldr	r3, [r3, #12]
   d40f6:	4798      	blx	r3
   d40f8:	4628      	mov	r0, r5
   d40fa:	bd38      	pop	{r3, r4, r5, pc}
   d40fc:	000d7114 	.word	0x000d7114

000d4100 <_ZN9TCPClientD0Ev>:
   d4100:	b510      	push	{r4, lr}
   d4102:	4604      	mov	r4, r0
   d4104:	f7ff ffe2 	bl	d40cc <_ZN9TCPClientD1Ev>
   d4108:	4620      	mov	r0, r4
   d410a:	f7ff ffc6 	bl	d409a <_ZdlPv>
   d410e:	4620      	mov	r0, r4
   d4110:	bd10      	pop	{r4, pc}
	...

000d4114 <setup>:
int yPin = A1;
int zPin = A2;


// setup() runs once, when the device is first turned on.
void setup() {
   d4114:	b508      	push	{r3, lr}
  // Put initialization like pinMode and begin functions here.
    Serial.begin(115200);
   d4116:	f001 fb4b 	bl	d57b0 <_Z16_fetch_usbserialv>
   d411a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d411e:	f001 fb35 	bl	d578c <_ZN9USBSerial5beginEl>
    while(!Serial);         // wait for serial to start running
   d4122:	f001 fb45 	bl	d57b0 <_Z16_fetch_usbserialv>
   d4126:	f001 fb38 	bl	d579a <_ZN9USBSerialcvbEv>
   d412a:	2800      	cmp	r0, #0
   d412c:	d0f9      	beq.n	d4122 <setup+0xe>
    Serial.println("Serial Monitor Up and Running");
   d412e:	f001 fb3f 	bl	d57b0 <_Z16_fetch_usbserialv>
   d4132:	490a      	ldr	r1, [pc, #40]	; (d415c <setup+0x48>)
   d4134:	f001 fcbf 	bl	d5ab6 <_ZN5Print7printlnEPKc>

    pinMode(xPin,INPUT);
   d4138:	4b09      	ldr	r3, [pc, #36]	; (d4160 <setup+0x4c>)
   d413a:	2100      	movs	r1, #0
   d413c:	8818      	ldrh	r0, [r3, #0]
   d413e:	f001 fee5 	bl	d5f0c <pinMode>
    pinMode(yPin,INPUT);
   d4142:	4b08      	ldr	r3, [pc, #32]	; (d4164 <setup+0x50>)
   d4144:	2100      	movs	r1, #0
   d4146:	8818      	ldrh	r0, [r3, #0]
   d4148:	f001 fee0 	bl	d5f0c <pinMode>
    pinMode(zPin,INPUT);
   d414c:	4b06      	ldr	r3, [pc, #24]	; (d4168 <setup+0x54>)
   d414e:	2100      	movs	r1, #0
   d4150:	8818      	ldrh	r0, [r3, #0]
}
   d4152:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    while(!Serial);         // wait for serial to start running
    Serial.println("Serial Monitor Up and Running");

    pinMode(xPin,INPUT);
    pinMode(yPin,INPUT);
    pinMode(zPin,INPUT);
   d4156:	f001 bed9 	b.w	d5f0c <pinMode>
   d415a:	bf00      	nop
   d415c:	000d6d1c 	.word	0x000d6d1c
   d4160:	2003e230 	.word	0x2003e230
   d4164:	2003e234 	.word	0x2003e234
   d4168:	2003e238 	.word	0x2003e238

000d416c <loop>:
}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d416c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // The core of your code will likely live here.
    x = (analogRead(xPin)-2000.0)/400.0;
   d416e:	4b4f      	ldr	r3, [pc, #316]	; (d42ac <loop+0x140>)
   d4170:	4e4f      	ldr	r6, [pc, #316]	; (d42b0 <loop+0x144>)
   d4172:	8818      	ldrh	r0, [r3, #0]
    y = (analogRead(yPin)-2000.0)/400.0;
   d4174:	4d4f      	ldr	r5, [pc, #316]	; (d42b4 <loop+0x148>)
    z = (analogRead(zPin)-2000.0)/400.0 ;
   d4176:	4c50      	ldr	r4, [pc, #320]	; (d42b8 <loop+0x14c>)
}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
  // The core of your code will likely live here.
    x = (analogRead(xPin)-2000.0)/400.0;
   d4178:	f001 fed9 	bl	d5f2e <analogRead>
   d417c:	f002 f98e 	bl	d649c <__aeabi_i2d>
   d4180:	2200      	movs	r2, #0
   d4182:	4b4e      	ldr	r3, [pc, #312]	; (d42bc <loop+0x150>)
   d4184:	f002 f83c 	bl	d6200 <__aeabi_dsub>
   d4188:	2200      	movs	r2, #0
   d418a:	4b4d      	ldr	r3, [pc, #308]	; (d42c0 <loop+0x154>)
   d418c:	f002 fb16 	bl	d67bc <__aeabi_ddiv>
   d4190:	f002 fce2 	bl	d6b58 <__aeabi_d2f>
    y = (analogRead(yPin)-2000.0)/400.0;
   d4194:	4b4b      	ldr	r3, [pc, #300]	; (d42c4 <loop+0x158>)
}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
  // The core of your code will likely live here.
    x = (analogRead(xPin)-2000.0)/400.0;
   d4196:	6030      	str	r0, [r6, #0]
    y = (analogRead(yPin)-2000.0)/400.0;
   d4198:	8818      	ldrh	r0, [r3, #0]
   d419a:	f001 fec8 	bl	d5f2e <analogRead>
   d419e:	f002 f97d 	bl	d649c <__aeabi_i2d>
   d41a2:	2200      	movs	r2, #0
   d41a4:	4b45      	ldr	r3, [pc, #276]	; (d42bc <loop+0x150>)
   d41a6:	f002 f82b 	bl	d6200 <__aeabi_dsub>
   d41aa:	2200      	movs	r2, #0
   d41ac:	4b44      	ldr	r3, [pc, #272]	; (d42c0 <loop+0x154>)
   d41ae:	f002 fb05 	bl	d67bc <__aeabi_ddiv>
    z = (analogRead(zPin)-2000.0)/400.0 ;
   d41b2:	4b45      	ldr	r3, [pc, #276]	; (d42c8 <loop+0x15c>)

// loop() runs over and over again, as quickly as it can execute.
void loop() {
  // The core of your code will likely live here.
    x = (analogRead(xPin)-2000.0)/400.0;
    y = (analogRead(yPin)-2000.0)/400.0;
   d41b4:	e9c5 0100 	strd	r0, r1, [r5]
    z = (analogRead(zPin)-2000.0)/400.0 ;
   d41b8:	8818      	ldrh	r0, [r3, #0]
   d41ba:	f001 feb8 	bl	d5f2e <analogRead>
   d41be:	f002 f96d 	bl	d649c <__aeabi_i2d>
   d41c2:	2200      	movs	r2, #0
   d41c4:	4b3d      	ldr	r3, [pc, #244]	; (d42bc <loop+0x150>)
   d41c6:	f002 f81b 	bl	d6200 <__aeabi_dsub>
   d41ca:	2200      	movs	r2, #0
   d41cc:	4b3c      	ldr	r3, [pc, #240]	; (d42c0 <loop+0x154>)
   d41ce:	f002 faf5 	bl	d67bc <__aeabi_ddiv>
   d41d2:	f002 fcc1 	bl	d6b58 <__aeabi_d2f>
   d41d6:	6020      	str	r0, [r4, #0]

    Serial.println("----------------Data to Publish-----------------");
   d41d8:	f001 faea 	bl	d57b0 <_Z16_fetch_usbserialv>
   d41dc:	493b      	ldr	r1, [pc, #236]	; (d42cc <loop+0x160>)
   d41de:	f001 fc6a 	bl	d5ab6 <_ZN5Print7printlnEPKc>
    Serial.print("X-Axis Acceleration ");
   d41e2:	f001 fae5 	bl	d57b0 <_Z16_fetch_usbserialv>
   d41e6:	493a      	ldr	r1, [pc, #232]	; (d42d0 <loop+0x164>)
   d41e8:	f001 fc52 	bl	d5a90 <_ZN5Print5printEPKc>
    Serial.print(x);
   d41ec:	f001 fae0 	bl	d57b0 <_Z16_fetch_usbserialv>
   d41f0:	4607      	mov	r7, r0
   d41f2:	6830      	ldr	r0, [r6, #0]
   d41f4:	f002 f964 	bl	d64c0 <__aeabi_f2d>
   d41f8:	ec41 0b10 	vmov	d0, r0, r1
   d41fc:	2102      	movs	r1, #2
   d41fe:	4638      	mov	r0, r7
   d4200:	f001 fd66 	bl	d5cd0 <_ZN5Print5printEdi>
    Serial.println(" G");
   d4204:	f001 fad4 	bl	d57b0 <_Z16_fetch_usbserialv>
   d4208:	4932      	ldr	r1, [pc, #200]	; (d42d4 <loop+0x168>)
   d420a:	f001 fc54 	bl	d5ab6 <_ZN5Print7printlnEPKc>
    Serial.print("Y-Axis Acceleration ");
   d420e:	f001 facf 	bl	d57b0 <_Z16_fetch_usbserialv>
   d4212:	4931      	ldr	r1, [pc, #196]	; (d42d8 <loop+0x16c>)
   d4214:	f001 fc3c 	bl	d5a90 <_ZN5Print5printEPKc>
    Serial.print(y);
   d4218:	f001 faca 	bl	d57b0 <_Z16_fetch_usbserialv>
   d421c:	ed95 0b00 	vldr	d0, [r5]
   d4220:	2102      	movs	r1, #2
   d4222:	f001 fd55 	bl	d5cd0 <_ZN5Print5printEdi>
    Serial.println(" G");
   d4226:	f001 fac3 	bl	d57b0 <_Z16_fetch_usbserialv>
   d422a:	492a      	ldr	r1, [pc, #168]	; (d42d4 <loop+0x168>)
   d422c:	f001 fc43 	bl	d5ab6 <_ZN5Print7printlnEPKc>
    Serial.print("Z-Axis Acceleration ");
   d4230:	f001 fabe 	bl	d57b0 <_Z16_fetch_usbserialv>
   d4234:	4929      	ldr	r1, [pc, #164]	; (d42dc <loop+0x170>)
   d4236:	f001 fc2b 	bl	d5a90 <_ZN5Print5printEPKc>
    Serial.print(z);
   d423a:	f001 fab9 	bl	d57b0 <_Z16_fetch_usbserialv>
   d423e:	4607      	mov	r7, r0
   d4240:	6820      	ldr	r0, [r4, #0]
   d4242:	f002 f93d 	bl	d64c0 <__aeabi_f2d>
   d4246:	ec41 0b10 	vmov	d0, r0, r1
   d424a:	2102      	movs	r1, #2
   d424c:	4638      	mov	r0, r7
   d424e:	f001 fd3f 	bl	d5cd0 <_ZN5Print5printEdi>
    Serial.println(" G");
   d4252:	f001 faad 	bl	d57b0 <_Z16_fetch_usbserialv>
   d4256:	491f      	ldr	r1, [pc, #124]	; (d42d4 <loop+0x168>)
   d4258:	f001 fc2d 	bl	d5ab6 <_ZN5Print7printlnEPKc>
    Serial.println("------------------End Publish-------------------");
   d425c:	f001 faa8 	bl	d57b0 <_Z16_fetch_usbserialv>
   d4260:	491f      	ldr	r1, [pc, #124]	; (d42e0 <loop+0x174>)
   d4262:	f001 fc28 	bl	d5ab6 <_ZN5Print7printlnEPKc>


if(mqtt.Update()) {
   d4266:	481f      	ldr	r0, [pc, #124]	; (d42e4 <loop+0x178>)
   d4268:	f000 fb46 	bl	d48f8 <_ZN19Adafruit_MQTT_SPARK6UpdateEv>
   d426c:	b1b8      	cbz	r0, d429e <loop+0x132>
    gy_x.publish(x);
   d426e:	6830      	ldr	r0, [r6, #0]
   d4270:	f002 f926 	bl	d64c0 <__aeabi_f2d>
   d4274:	ec41 0b10 	vmov	d0, r0, r1
   d4278:	2102      	movs	r1, #2
   d427a:	481b      	ldr	r0, [pc, #108]	; (d42e8 <loop+0x17c>)
   d427c:	f000 fa9e 	bl	d47bc <_ZN21Adafruit_MQTT_Publish7publishEdh>
    gy_y.publish(y);
   d4280:	ed95 0b00 	vldr	d0, [r5]
   d4284:	2102      	movs	r1, #2
   d4286:	4819      	ldr	r0, [pc, #100]	; (d42ec <loop+0x180>)
   d4288:	f000 fa98 	bl	d47bc <_ZN21Adafruit_MQTT_Publish7publishEdh>
    gy_z.publish(z);
   d428c:	6820      	ldr	r0, [r4, #0]
   d428e:	f002 f917 	bl	d64c0 <__aeabi_f2d>
   d4292:	ec41 0b10 	vmov	d0, r0, r1
   d4296:	2102      	movs	r1, #2
   d4298:	4815      	ldr	r0, [pc, #84]	; (d42f0 <loop+0x184>)
   d429a:	f000 fa8f 	bl	d47bc <_ZN21Adafruit_MQTT_Publish7publishEdh>
    }   

delay(10000);
   d429e:	f242 7010 	movw	r0, #10000	; 0x2710

   d42a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    gy_x.publish(x);
    gy_y.publish(y);
    gy_z.publish(z);
    }   

delay(10000);
   d42a6:	f001 bb3a 	b.w	d591e <delay>
   d42aa:	bf00      	nop
   d42ac:	2003e230 	.word	0x2003e230
   d42b0:	2003e2c8 	.word	0x2003e2c8
   d42b4:	2003e2d0 	.word	0x2003e2d0
   d42b8:	2003e2d8 	.word	0x2003e2d8
   d42bc:	409f4000 	.word	0x409f4000
   d42c0:	40790000 	.word	0x40790000
   d42c4:	2003e234 	.word	0x2003e234
   d42c8:	2003e238 	.word	0x2003e238
   d42cc:	000d6d3a 	.word	0x000d6d3a
   d42d0:	000d6d6b 	.word	0x000d6d6b
   d42d4:	000d6d80 	.word	0x000d6d80
   d42d8:	000d6d83 	.word	0x000d6d83
   d42dc:	000d6d98 	.word	0x000d6d98
   d42e0:	000d6dad 	.word	0x000d6dad
   d42e4:	2003e2dc 	.word	0x2003e2dc
   d42e8:	2003e3b0 	.word	0x2003e3b0
   d42ec:	2003e3bc 	.word	0x2003e3bc
   d42f0:	2003e3c8 	.word	0x2003e3c8

000d42f4 <_ZN19Adafruit_MQTT_SPARKD0Ev>:
   d42f4:	b510      	push	{r4, lr}
   d42f6:	4604      	mov	r4, r0
   d42f8:	f7ff fecf 	bl	d409a <_ZdlPv>
   d42fc:	4620      	mov	r0, r4
   d42fe:	bd10      	pop	{r4, pc}

000d4300 <_GLOBAL__sub_I_TheClient>:

   d4300:	b573      	push	{r0, r1, r4, r5, r6, lr}
#define AIO_SERVERPORT  1883                   // use 1883 or 8883 for SSL 
#define AIO_USERNAME  "rashap"
#define AIO_KEY       "598169fa3ba94636941a330976e42e2c"

/************ Global State (you don't need to change this!) ******************/ 
TCPClient TheClient; 
   d4302:	4d1a      	ldr	r5, [pc, #104]	; (d436c <_GLOBAL__sub_I_TheClient+0x6c>)
   d4304:	4e1a      	ldr	r6, [pc, #104]	; (d4370 <_GLOBAL__sub_I_TheClient+0x70>)
  {}

  Adafruit_MQTT_SPARK(TCPClient *client, const char *server, uint16_t port,
                       const char *user="", const char *pass=""):
    Adafruit_MQTT(server, port, user, pass),
    client(client)
   d4306:	4c1b      	ldr	r4, [pc, #108]	; (d4374 <_GLOBAL__sub_I_TheClient+0x74>)

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4308:	f000 fc72 	bl	d4bf0 <HAL_Pin_Map>
   d430c:	4628      	mov	r0, r5
   d430e:	f001 f8d7 	bl	d54c0 <_ZN9TCPClientC1Ev>
   d4312:	4632      	mov	r2, r6
   d4314:	4918      	ldr	r1, [pc, #96]	; (d4378 <_GLOBAL__sub_I_TheClient+0x78>)
   d4316:	4628      	mov	r0, r5
   d4318:	f001 fe20 	bl	d5f5c <__aeabi_atexit>
   d431c:	4b17      	ldr	r3, [pc, #92]	; (d437c <_GLOBAL__sub_I_TheClient+0x7c>)
   d431e:	9300      	str	r3, [sp, #0]
   d4320:	f240 725b 	movw	r2, #1883	; 0x75b
   d4324:	4b16      	ldr	r3, [pc, #88]	; (d4380 <_GLOBAL__sub_I_TheClient+0x80>)
   d4326:	4917      	ldr	r1, [pc, #92]	; (d4384 <_GLOBAL__sub_I_TheClient+0x84>)
   d4328:	4620      	mov	r0, r4
   d432a:	f000 f84f 	bl	d43cc <_ZN13Adafruit_MQTTC1EPKctS1_S1_>
   d432e:	4b16      	ldr	r3, [pc, #88]	; (d4388 <_GLOBAL__sub_I_TheClient+0x88>)

// Setup the MQTT client class by passing in the WiFi client and MQTT server and login details. 
Adafruit_MQTT_SPARK mqtt(&TheClient,AIO_SERVER,AIO_SERVERPORT,AIO_USERNAME,AIO_KEY); 
   d4330:	4916      	ldr	r1, [pc, #88]	; (d438c <_GLOBAL__sub_I_TheClient+0x8c>)
   d4332:	6023      	str	r3, [r4, #0]
   d4334:	4632      	mov	r2, r6
   d4336:	4620      	mov	r0, r4
   d4338:	f8c4 50d0 	str.w	r5, [r4, #208]	; 0xd0
   d433c:	f001 fe0e 	bl	d5f5c <__aeabi_atexit>

/****************************** Feeds ***************************************/
// Notice MQTT paths for AIO follow the form: <username>/feeds/<feedname> 

Adafruit_MQTT_Publish gy_x = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/GY_X");
   d4340:	4621      	mov	r1, r4
   d4342:	2300      	movs	r3, #0
   d4344:	4a12      	ldr	r2, [pc, #72]	; (d4390 <_GLOBAL__sub_I_TheClient+0x90>)
   d4346:	4813      	ldr	r0, [pc, #76]	; (d4394 <_GLOBAL__sub_I_TheClient+0x94>)
   d4348:	f000 fa32 	bl	d47b0 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish gy_y = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/GY_Y");
   d434c:	4621      	mov	r1, r4
   d434e:	2300      	movs	r3, #0
   d4350:	4a11      	ldr	r2, [pc, #68]	; (d4398 <_GLOBAL__sub_I_TheClient+0x98>)
   d4352:	4812      	ldr	r0, [pc, #72]	; (d439c <_GLOBAL__sub_I_TheClient+0x9c>)
   d4354:	f000 fa2c 	bl	d47b0 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish gy_z = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/GY_Z");
   d4358:	4a11      	ldr	r2, [pc, #68]	; (d43a0 <_GLOBAL__sub_I_TheClient+0xa0>)
   d435a:	4812      	ldr	r0, [pc, #72]	; (d43a4 <_GLOBAL__sub_I_TheClient+0xa4>)
   d435c:	2300      	movs	r3, #0
   d435e:	4621      	mov	r1, r4
    gy_z.publish(z);
    }   

delay(10000);

   d4360:	b002      	add	sp, #8
   d4362:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
/****************************** Feeds ***************************************/
// Notice MQTT paths for AIO follow the form: <username>/feeds/<feedname> 

Adafruit_MQTT_Publish gy_x = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/GY_X");
Adafruit_MQTT_Publish gy_y = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/GY_Y");
Adafruit_MQTT_Publish gy_z = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/GY_Z");
   d4366:	f000 ba23 	b.w	d47b0 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
   d436a:	bf00      	nop
   d436c:	2003e2ac 	.word	0x2003e2ac
   d4370:	2003e2a8 	.word	0x2003e2a8
   d4374:	2003e2dc 	.word	0x2003e2dc
   d4378:	000d40cd 	.word	0x000d40cd
   d437c:	000d6df5 	.word	0x000d6df5
   d4380:	000d6dde 	.word	0x000d6dde
   d4384:	000d6de5 	.word	0x000d6de5
   d4388:	000d706c 	.word	0x000d706c
   d438c:	000d40c9 	.word	0x000d40c9
   d4390:	000d6e16 	.word	0x000d6e16
   d4394:	2003e3b0 	.word	0x2003e3b0
   d4398:	000d6e28 	.word	0x000d6e28
   d439c:	2003e3bc 	.word	0x2003e3bc
   d43a0:	000d6e3a 	.word	0x000d6e3a
   d43a4:	2003e3c8 	.word	0x2003e3c8

000d43a8 <_ZL11stringprintPhPKct.constprop.2>:
  memmove(p, s, len);
  return p+len;
}
*/

static uint8_t *stringprint(uint8_t *p, const char *s, uint16_t maxlen=0) {
   d43a8:	b570      	push	{r4, r5, r6, lr}
   d43aa:	4604      	mov	r4, r0
  // If maxlen is specified (has a non-zero value) then use it as the maximum
  // length of the source string to write to the buffer.  Otherwise write
  // the entire source string.
  uint16_t len = strlen(s);
   d43ac:	4608      	mov	r0, r1
  memmove(p, s, len);
  return p+len;
}
*/

static uint8_t *stringprint(uint8_t *p, const char *s, uint16_t maxlen=0) {
   d43ae:	460e      	mov	r6, r1
  // If maxlen is specified (has a non-zero value) then use it as the maximum
  // length of the source string to write to the buffer.  Otherwise write
  // the entire source string.
  uint16_t len = strlen(s);
   d43b0:	f002 fc8e 	bl	d6cd0 <strlen>
  /*
  for (uint8_t i=0; i<len; i++) {
    Serial.write(pgm_read_byte(s+i));
  }
  */
  p[0] = len >> 8; p++;
   d43b4:	1203      	asrs	r3, r0, #8
   d43b6:	7023      	strb	r3, [r4, #0]
  p[0] = len & 0xFF; p++;
   d43b8:	7060      	strb	r0, [r4, #1]
   d43ba:	b285      	uxth	r5, r0
   d43bc:	3402      	adds	r4, #2
  strncpy((char *)p, s, len);
   d43be:	462a      	mov	r2, r5
   d43c0:	4631      	mov	r1, r6
   d43c2:	4620      	mov	r0, r4
   d43c4:	f002 fc8c 	bl	d6ce0 <strncpy>
  return p+len;
}
   d43c8:	1960      	adds	r0, r4, r5
   d43ca:	bd70      	pop	{r4, r5, r6, pc}

000d43cc <_ZN13Adafruit_MQTTC1EPKctS1_S1_>:
  packet_id_counter = 0;

}


Adafruit_MQTT::Adafruit_MQTT(const char *server,
   d43cc:	b530      	push	{r4, r5, lr}
                             const char *user,
                             const char *pass) {
  servername = server;
  portnum = port;
  clientid = "";
  username = user;
   d43ce:	6103      	str	r3, [r0, #16]
  password = pass;
   d43d0:	9b03      	ldr	r3, [sp, #12]


Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
   d43d2:	4d0d      	ldr	r5, [pc, #52]	; (d4408 <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x3c>)
  servername = server;
  portnum = port;
   d43d4:	8102      	strh	r2, [r0, #8]
  clientid = "";
  username = user;
  password = pass;
   d43d6:	6143      	str	r3, [r0, #20]
                             uint16_t port,
                             const char *user,
                             const char *pass) {
  servername = server;
  portnum = port;
  clientid = "";
   d43d8:	4a0c      	ldr	r2, [pc, #48]	; (d440c <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x40>)


Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
   d43da:	6005      	str	r5, [r0, #0]
  username = user;
  password = pass;

  // reset subscriptions
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    subscriptions[i] = 0;
   d43dc:	2300      	movs	r3, #0

Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
  servername = server;
   d43de:	6041      	str	r1, [r0, #4]
  portnum = port;
  clientid = "";
   d43e0:	60c2      	str	r2, [r0, #12]
  username = user;
  password = pass;

  // reset subscriptions
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    subscriptions[i] = 0;
   d43e2:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
   d43e6:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
   d43ea:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
   d43ee:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
   d43f2:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
  }

  will_topic = 0;
   d43f6:	6183      	str	r3, [r0, #24]
  will_payload = 0;
   d43f8:	61c3      	str	r3, [r0, #28]
  will_qos = 0;
   d43fa:	f880 3020 	strb.w	r3, [r0, #32]
  will_retain = 0;
   d43fe:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

  packet_id_counter = 0;
   d4402:	f8a0 30b8 	strh.w	r3, [r0, #184]	; 0xb8

}
   d4406:	bd30      	pop	{r4, r5, pc}
   d4408:	000d6e54 	.word	0x000d6e54
   d440c:	000d6e7d 	.word	0x000d6e7d

000d4410 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>:
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   d4410:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   d4414:	fa0f fa83 	sxth.w	sl, r3
   d4418:	6803      	ldr	r3, [r0, #0]
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   d441a:	9201      	str	r2, [sp, #4]
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   d441c:	699d      	ldr	r5, [r3, #24]
   d441e:	2201      	movs	r2, #1
   d4420:	4653      	mov	r3, sl
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   d4422:	4606      	mov	r6, r0
   d4424:	460c      	mov	r4, r1
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   d4426:	47a8      	blx	r5
  if (rlen != 1) return 0;
   d4428:	b2c0      	uxtb	r0, r0
   d442a:	2801      	cmp	r0, #1
   d442c:	d001      	beq.n	d4432 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x22>
   d442e:	2000      	movs	r0, #0
   d4430:	e034      	b.n	d449c <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x8c>

  DEBUG_PRINT(F("Packet Type:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);
  pbuff++;
   d4432:	1c65      	adds	r5, r4, #1
   d4434:	f104 0b05 	add.w	fp, r4, #5

  uint32_t value = 0;
  uint32_t multiplier = 1;
   d4438:	4680      	mov	r8, r0
  if (rlen != 1) return 0;

  DEBUG_PRINT(F("Packet Type:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);
  pbuff++;

  uint32_t value = 0;
   d443a:	f04f 0900 	mov.w	r9, #0
  uint32_t multiplier = 1;
  uint8_t encodedByte;

  do {
    rlen = readPacket(pbuff, 1, timeout);
   d443e:	6833      	ldr	r3, [r6, #0]
   d4440:	699b      	ldr	r3, [r3, #24]
   d4442:	2201      	movs	r2, #1
   d4444:	461f      	mov	r7, r3
   d4446:	4629      	mov	r1, r5
   d4448:	4653      	mov	r3, sl
   d444a:	4630      	mov	r0, r6
   d444c:	47b8      	blx	r7
    if (rlen != 1) return 0;
   d444e:	b2c0      	uxtb	r0, r0
   d4450:	2801      	cmp	r0, #1
   d4452:	d1ec      	bne.n	d442e <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x1e>
    encodedByte = pbuff[0]; // save the last read val
   d4454:	f815 3b01 	ldrb.w	r3, [r5], #1
    pbuff++; // get ready for reading the next byte
    uint32_t intermediate = encodedByte & 0x7F;
   d4458:	f003 027f 	and.w	r2, r3, #127	; 0x7f
    intermediate *= multiplier;
    value += intermediate;
    multiplier *= 128;
    if (multiplier > (128UL*128UL*128UL)) {
   d445c:	455d      	cmp	r5, fp
    if (rlen != 1) return 0;
    encodedByte = pbuff[0]; // save the last read val
    pbuff++; // get ready for reading the next byte
    uint32_t intermediate = encodedByte & 0x7F;
    intermediate *= multiplier;
    value += intermediate;
   d445e:	fb02 9908 	mla	r9, r2, r8, r9
    multiplier *= 128;
   d4462:	ea4f 18c8 	mov.w	r8, r8, lsl #7
    if (multiplier > (128UL*128UL*128UL)) {
   d4466:	d0e2      	beq.n	d442e <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x1e>

  uint32_t value = 0;
  uint32_t multiplier = 1;
  uint8_t encodedByte;

  do {
   d4468:	061b      	lsls	r3, r3, #24
   d446a:	d4e8      	bmi.n	d443e <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x2e>
    }
  } while (encodedByte & 0x80);

  DEBUG_PRINT(F("Packet Length:\t")); DEBUG_PRINTLN(value);
  
  if (value > (unsigned)(maxsize - (pbuff-buffer) - 1)) {
   d446c:	9b01      	ldr	r3, [sp, #4]
   d446e:	1b2c      	subs	r4, r5, r4
   d4470:	1b1b      	subs	r3, r3, r4
   d4472:	3b01      	subs	r3, #1
   d4474:	4599      	cmp	r9, r3
   d4476:	6833      	ldr	r3, [r6, #0]
   d4478:	d906      	bls.n	d4488 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x78>
      DEBUG_PRINTLN(F("Packet too big for buffer"));
      rlen = readPacket(pbuff, (maxsize - (pbuff-buffer) - 1), timeout);
   d447a:	9a01      	ldr	r2, [sp, #4]
   d447c:	699f      	ldr	r7, [r3, #24]
   d447e:	3a01      	subs	r2, #1
   d4480:	1b12      	subs	r2, r2, r4
   d4482:	4653      	mov	r3, sl
   d4484:	b292      	uxth	r2, r2
   d4486:	e003      	b.n	d4490 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x80>
  } else {
    rlen = readPacket(pbuff, value, timeout);
   d4488:	699f      	ldr	r7, [r3, #24]
   d448a:	fa1f f289 	uxth.w	r2, r9
   d448e:	4653      	mov	r3, sl
   d4490:	4629      	mov	r1, r5
   d4492:	4630      	mov	r0, r6
   d4494:	47b8      	blx	r7
   d4496:	b2c0      	uxtb	r0, r0
  }
  //DEBUG_PRINT(F("Remaining packet:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);

  return ((pbuff - buffer)+rlen);
   d4498:	4420      	add	r0, r4
   d449a:	b280      	uxth	r0, r0
}
   d449c:	b003      	add	sp, #12
   d449e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000d44a4 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>:
  username = user;
  password = pass;
  return connect();
}

uint16_t Adafruit_MQTT::processPacketsUntil(uint8_t *buffer, uint8_t waitforpackettype, uint16_t timeout) {
   d44a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d44a6:	4605      	mov	r5, r0
   d44a8:	460c      	mov	r4, r1
   d44aa:	4616      	mov	r6, r2
   d44ac:	461f      	mov	r7, r3
  uint16_t len;
  while ( (len = readFullPacket(buffer, MAXBUFFERSIZE, timeout)) > 0) {
   d44ae:	463b      	mov	r3, r7
   d44b0:	2296      	movs	r2, #150	; 0x96
   d44b2:	4621      	mov	r1, r4
   d44b4:	4628      	mov	r0, r5
   d44b6:	f7ff ffab 	bl	d4410 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
   d44ba:	b148      	cbz	r0, d44d0 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x2c>

    //DEBUG_PRINT("Packet read size: "); DEBUG_PRINTLN(len);
    // TODO: add subscription reading & call back processing here

    if ((buffer[0] >> 4) == waitforpackettype) {
   d44bc:	7823      	ldrb	r3, [r4, #0]
   d44be:	ebb6 1f13 	cmp.w	r6, r3, lsr #4
   d44c2:	d005      	beq.n	d44d0 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x2c>
      //DEBUG_PRINTLN(F("Found right packet")); 
      return len;
    } else {
      ERROR_PRINTLN(F("Dropped a packet"));
   d44c4:	f001 f974 	bl	d57b0 <_Z16_fetch_usbserialv>
   d44c8:	4902      	ldr	r1, [pc, #8]	; (d44d4 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x30>)
   d44ca:	f001 faf4 	bl	d5ab6 <_ZN5Print7printlnEPKc>
  return connect();
}

uint16_t Adafruit_MQTT::processPacketsUntil(uint8_t *buffer, uint8_t waitforpackettype, uint16_t timeout) {
  uint16_t len;
  while ( (len = readFullPacket(buffer, MAXBUFFERSIZE, timeout)) > 0) {
   d44ce:	e7ee      	b.n	d44ae <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0xa>
    } else {
      ERROR_PRINTLN(F("Dropped a packet"));
    }
  }
  return 0;
}
   d44d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d44d2:	bf00      	nop
   d44d4:	000d6e7e 	.word	0x000d6e7e

000d44d8 <_ZN13Adafruit_MQTT10disconnectEv>:
      case -2: return F("Failed to subscribe");
   }
    return F("Unknown error");
}

bool Adafruit_MQTT::disconnect() {
   d44d8:	b510      	push	{r4, lr}
  DEBUG_PRINTBUFFER(buffer, 4);
  return 4;
}

uint8_t Adafruit_MQTT::disconnectPacket(uint8_t *packet) {
  packet[0] = MQTT_CTRL_DISCONNECT << 4;
   d44da:	23e0      	movs	r3, #224	; 0xe0
   d44dc:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
  packet[1] = 0;
   d44e0:	2300      	movs	r3, #0
   d44e2:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23

bool Adafruit_MQTT::disconnect() {

  // Construct and send disconnect packet.
  uint8_t len = disconnectPacket(buffer);
  if (! sendPacket(buffer, len))
   d44e6:	6803      	ldr	r3, [r0, #0]
      case -2: return F("Failed to subscribe");
   }
    return F("Unknown error");
}

bool Adafruit_MQTT::disconnect() {
   d44e8:	4604      	mov	r4, r0

  // Construct and send disconnect packet.
  uint8_t len = disconnectPacket(buffer);
  if (! sendPacket(buffer, len))
   d44ea:	695b      	ldr	r3, [r3, #20]
   d44ec:	2202      	movs	r2, #2
   d44ee:	f100 0122 	add.w	r1, r0, #34	; 0x22
   d44f2:	4798      	blx	r3
    DEBUG_PRINTLN(F("Unable to send disconnect packet"));

  return disconnectServer();
   d44f4:	6823      	ldr	r3, [r4, #0]
   d44f6:	4620      	mov	r0, r4
   d44f8:	691b      	ldr	r3, [r3, #16]

}
   d44fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  // Construct and send disconnect packet.
  uint8_t len = disconnectPacket(buffer);
  if (! sendPacket(buffer, len))
    DEBUG_PRINTLN(F("Unable to send disconnect packet"));

  return disconnectServer();
   d44fe:	4718      	bx	r3

000d4500 <_ZN13Adafruit_MQTT13connectPacketEPh>:
// The current MQTT spec is 3.1.1 and available here:
//   http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718028
// However this connect packet and code follows the MQTT 3.1 spec here (some
// small differences in the protocol):
//   http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html#connect
uint8_t Adafruit_MQTT::connectPacket(uint8_t *packet) {
   d4500:	b538      	push	{r3, r4, r5, lr}
   d4502:	4604      	mov	r4, r0
  uint8_t *p = packet;
  uint16_t len;

  // fixed header, connection messsage no flags
  p[0] = (MQTT_CTRL_CONNECT << 4) | 0x0;
   d4504:	4608      	mov	r0, r1
   d4506:	2310      	movs	r3, #16
   d4508:	f800 3b02 	strb.w	r3, [r0], #2
// The current MQTT spec is 3.1.1 and available here:
//   http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718028
// However this connect packet and code follows the MQTT 3.1 spec here (some
// small differences in the protocol):
//   http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html#connect
uint8_t Adafruit_MQTT::connectPacket(uint8_t *packet) {
   d450c:	460d      	mov	r5, r1
  // fill in packet[1] last

#if MQTT_PROTOCOL_LEVEL == 3
    p = stringprint(p, "MQIsdp");
#elif MQTT_PROTOCOL_LEVEL == 4
    p = stringprint(p, "MQTT");
   d450e:	4929      	ldr	r1, [pc, #164]	; (d45b4 <_ZN13Adafruit_MQTT13connectPacketEPh+0xb4>)
   d4510:	f7ff ff4a 	bl	d43a8 <_ZL11stringprintPhPKct.constprop.2>
#else
    #error "MQTT level not supported"
#endif

  p[0] = MQTT_PROTOCOL_LEVEL;
   d4514:	2304      	movs	r3, #4
   d4516:	7003      	strb	r3, [r0, #0]
  p++;

  // always clean the session
  p[0] = MQTT_CONN_CLEANSESSION;
   d4518:	2302      	movs	r3, #2
   d451a:	7043      	strb	r3, [r0, #1]

  // set the will flags if needed
  if (will_topic && pgm_read_byte(will_topic) != 0) {
   d451c:	69a3      	ldr	r3, [r4, #24]
   d451e:	b1ab      	cbz	r3, d454c <_ZN13Adafruit_MQTT13connectPacketEPh+0x4c>
   d4520:	781b      	ldrb	r3, [r3, #0]
   d4522:	b19b      	cbz	r3, d454c <_ZN13Adafruit_MQTT13connectPacketEPh+0x4c>

    p[0] |= MQTT_CONN_WILLFLAG;
   d4524:	2306      	movs	r3, #6
   d4526:	7043      	strb	r3, [r0, #1]

    if(will_qos == 1)
   d4528:	f894 3020 	ldrb.w	r3, [r4, #32]
   d452c:	2b01      	cmp	r3, #1
   d452e:	d101      	bne.n	d4534 <_ZN13Adafruit_MQTT13connectPacketEPh+0x34>
      p[0] |= MQTT_CONN_WILLQOS_1;
   d4530:	230e      	movs	r3, #14
   d4532:	e002      	b.n	d453a <_ZN13Adafruit_MQTT13connectPacketEPh+0x3a>
    else if(will_qos == 2)
   d4534:	2b02      	cmp	r3, #2
   d4536:	d101      	bne.n	d453c <_ZN13Adafruit_MQTT13connectPacketEPh+0x3c>
      p[0] |= MQTT_CONN_WILLQOS_2;
   d4538:	231e      	movs	r3, #30
   d453a:	7043      	strb	r3, [r0, #1]

    if(will_retain == 1)
   d453c:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   d4540:	2b01      	cmp	r3, #1
      p[0] |= MQTT_CONN_WILLRETAIN;
   d4542:	bf02      	ittt	eq
   d4544:	7843      	ldrbeq	r3, [r0, #1]
   d4546:	f043 0320 	orreq.w	r3, r3, #32
   d454a:	7043      	strbeq	r3, [r0, #1]

  }

  if (pgm_read_byte(username) != 0)
   d454c:	6923      	ldr	r3, [r4, #16]
   d454e:	781b      	ldrb	r3, [r3, #0]
   d4550:	b11b      	cbz	r3, d455a <_ZN13Adafruit_MQTT13connectPacketEPh+0x5a>
    p[0] |= MQTT_CONN_USERNAMEFLAG;
   d4552:	7843      	ldrb	r3, [r0, #1]
   d4554:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d4558:	7043      	strb	r3, [r0, #1]
  if (pgm_read_byte(password) != 0)
   d455a:	6963      	ldr	r3, [r4, #20]
   d455c:	781b      	ldrb	r3, [r3, #0]
   d455e:	b11b      	cbz	r3, d4568 <_ZN13Adafruit_MQTT13connectPacketEPh+0x68>
    p[0] |= MQTT_CONN_PASSWORDFLAG;
   d4560:	7843      	ldrb	r3, [r0, #1]
   d4562:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   d4566:	7043      	strb	r3, [r0, #1]
  p++;

  p[0] = MQTT_CONN_KEEPALIVE >> 8;
   d4568:	2301      	movs	r3, #1
   d456a:	7083      	strb	r3, [r0, #2]
  p++;
  p[0] = MQTT_CONN_KEEPALIVE & 0xFF;
   d456c:	232c      	movs	r3, #44	; 0x2c
   d456e:	70c3      	strb	r3, [r0, #3]
  p++;

  if(MQTT_PROTOCOL_LEVEL == 3) {
    p = stringprint(p, clientid, 23);  // Limit client ID to first 23 characters.
  } else {
    if (pgm_read_byte(clientid) != 0) {
   d4570:	68e1      	ldr	r1, [r4, #12]
   d4572:	780b      	ldrb	r3, [r1, #0]
   d4574:	b11b      	cbz	r3, d457e <_ZN13Adafruit_MQTT13connectPacketEPh+0x7e>
      p = stringprint(p, clientid);
   d4576:	3004      	adds	r0, #4
   d4578:	f7ff ff16 	bl	d43a8 <_ZL11stringprintPhPKct.constprop.2>
   d457c:	e002      	b.n	d4584 <_ZN13Adafruit_MQTT13connectPacketEPh+0x84>
    } else {
      p[0] = 0x0;
   d457e:	7103      	strb	r3, [r0, #4]
      p++;
      p[0] = 0x0;
   d4580:	7143      	strb	r3, [r0, #5]
      p++;
   d4582:	3006      	adds	r0, #6
      DEBUG_PRINTLN(F("SERVER GENERATING CLIENT ID"));
    }
  }

  if (will_topic && pgm_read_byte(will_topic) != 0) {
   d4584:	69a1      	ldr	r1, [r4, #24]
   d4586:	b131      	cbz	r1, d4596 <_ZN13Adafruit_MQTT13connectPacketEPh+0x96>
   d4588:	780b      	ldrb	r3, [r1, #0]
   d458a:	b123      	cbz	r3, d4596 <_ZN13Adafruit_MQTT13connectPacketEPh+0x96>
    p = stringprint(p, will_topic);
   d458c:	f7ff ff0c 	bl	d43a8 <_ZL11stringprintPhPKct.constprop.2>
    p = stringprint(p, will_payload);
   d4590:	69e1      	ldr	r1, [r4, #28]
   d4592:	f7ff ff09 	bl	d43a8 <_ZL11stringprintPhPKct.constprop.2>
  }

  if (pgm_read_byte(username) != 0) {
   d4596:	6921      	ldr	r1, [r4, #16]
   d4598:	780b      	ldrb	r3, [r1, #0]
   d459a:	b10b      	cbz	r3, d45a0 <_ZN13Adafruit_MQTT13connectPacketEPh+0xa0>
    p = stringprint(p, username);
   d459c:	f7ff ff04 	bl	d43a8 <_ZL11stringprintPhPKct.constprop.2>
  }
  if (pgm_read_byte(password) != 0) {
   d45a0:	6961      	ldr	r1, [r4, #20]
   d45a2:	780b      	ldrb	r3, [r1, #0]
   d45a4:	b10b      	cbz	r3, d45aa <_ZN13Adafruit_MQTT13connectPacketEPh+0xaa>
    p = stringprint(p, password);
   d45a6:	f7ff feff 	bl	d43a8 <_ZL11stringprintPhPKct.constprop.2>
  }

  len = p - packet;

  packet[1] = len-2;  // don't include the 2 bytes of fixed header data
   d45aa:	1b40      	subs	r0, r0, r5
   d45ac:	b2c0      	uxtb	r0, r0
   d45ae:	1e83      	subs	r3, r0, #2
   d45b0:	706b      	strb	r3, [r5, #1]
  DEBUG_PRINTLN(F("MQTT connect packet:"));
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}
   d45b2:	bd38      	pop	{r3, r4, r5, pc}
   d45b4:	000d6e9d 	.word	0x000d6e9d

000d45b8 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th>:


// as per http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718040
uint16_t Adafruit_MQTT::publishPacket(uint8_t *packet, const char *topic,
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   d45b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d45bc:	4605      	mov	r5, r0
  uint8_t *p = packet;
  uint16_t len=0;

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
   d45be:	4610      	mov	r0, r2
}


// as per http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718040
uint16_t Adafruit_MQTT::publishPacket(uint8_t *packet, const char *topic,
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   d45c0:	460e      	mov	r6, r1
   d45c2:	4691      	mov	r9, r2
   d45c4:	461f      	mov	r7, r3
  uint8_t *p = packet;
  uint16_t len=0;

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
   d45c6:	f002 fb83 	bl	d6cd0 <strlen>
}


// as per http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718040
uint16_t Adafruit_MQTT::publishPacket(uint8_t *packet, const char *topic,
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   d45ca:	f89d 8024 	ldrb.w	r8, [sp, #36]	; 0x24
   d45ce:	f8bd 4020 	ldrh.w	r4, [sp, #32]
  uint8_t *p = packet;
  uint16_t len=0;

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
   d45d2:	b280      	uxth	r0, r0
  if(qos > 0) { 
   d45d4:	f1b8 0f00 	cmp.w	r8, #0
   d45d8:	d101      	bne.n	d45de <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x26>
  uint8_t *p = packet;
  uint16_t len=0;

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
   d45da:	1c83      	adds	r3, r0, #2
   d45dc:	e000      	b.n	d45e0 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x28>
  if(qos > 0) { 
    len += 2; // qos packet id
   d45de:	1d03      	adds	r3, r0, #4
  }
  len += bLen; // payload length

  // Now you can start generating the packet!
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   d45e0:	ea4f 0248 	mov.w	r2, r8, lsl #1
   d45e4:	4630      	mov	r0, r6

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
  if(qos > 0) { 
    len += 2; // qos packet id
   d45e6:	b29b      	uxth	r3, r3
  }
  len += bLen; // payload length

  // Now you can start generating the packet!
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   d45e8:	f042 0230 	orr.w	r2, r2, #48	; 0x30
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
  if(qos > 0) { 
    len += 2; // qos packet id
  }
  len += bLen; // payload length
   d45ec:	4423      	add	r3, r4

  // Now you can start generating the packet!
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   d45ee:	f800 2b01 	strb.w	r2, [r0], #1
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
  if(qos > 0) { 
    len += 2; // qos packet id
  }
  len += bLen; // payload length
   d45f2:	b29b      	uxth	r3, r3
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
  p++;

  // fill in packet[1] last
  do {
    uint8_t encodedByte = len % 128;
   d45f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
    len /= 128;
    // if there are more data to encode, set the top bit of this byte
    if ( len > 0 ) {
   d45f8:	09db      	lsrs	r3, r3, #7
      encodedByte |= 0x80;
   d45fa:	bf18      	it	ne
   d45fc:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
    }
    p[0] = encodedByte;
   d4600:	f800 2b01 	strb.w	r2, [r0], #1
    p++;
  } while ( len > 0 );
   d4604:	2b00      	cmp	r3, #0
   d4606:	d1f5      	bne.n	d45f4 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x3c>

  // topic comes before packet identifier
  p = stringprint(p, topic);
   d4608:	4649      	mov	r1, r9
   d460a:	f7ff fecd 	bl	d43a8 <_ZL11stringprintPhPKct.constprop.2>
   d460e:	4603      	mov	r3, r0

  // add packet identifier. used for checking PUBACK in QOS > 0
  if(qos > 0) {
   d4610:	f1b8 0f00 	cmp.w	r8, #0
   d4614:	d00c      	beq.n	d4630 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x78>
    p[0] = (packet_id_counter >> 8) & 0xFF;
   d4616:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   d461a:	0a12      	lsrs	r2, r2, #8
   d461c:	7002      	strb	r2, [r0, #0]
    p[1] = packet_id_counter & 0xFF;
   d461e:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   d4622:	7042      	strb	r2, [r0, #1]
    p+=2;

    // increment the packet id
    packet_id_counter++;
   d4624:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   d4628:	3201      	adds	r2, #1

  // add packet identifier. used for checking PUBACK in QOS > 0
  if(qos > 0) {
    p[0] = (packet_id_counter >> 8) & 0xFF;
    p[1] = packet_id_counter & 0xFF;
    p+=2;
   d462a:	3302      	adds	r3, #2

    // increment the packet id
    packet_id_counter++;
   d462c:	f8a5 20b8 	strh.w	r2, [r5, #184]	; 0xb8
  }

  memmove(p, data, bLen);
   d4630:	4622      	mov	r2, r4
   d4632:	4639      	mov	r1, r7
   d4634:	4618      	mov	r0, r3
   d4636:	f002 faf8 	bl	d6c2a <memmove>
  p+= bLen;
  len = p - packet;
  DEBUG_PRINTLN(F("MQTT publish packet:"));
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
   d463a:	4420      	add	r0, r4
   d463c:	1b80      	subs	r0, r0, r6
}
   d463e:	b280      	uxth	r0, r0
   d4640:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d4644 <_ZN13Adafruit_MQTT7publishEPKcPhth>:

bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
}

bool Adafruit_MQTT::publish(const char *topic, uint8_t *data, uint16_t bLen, uint8_t qos) {
   d4644:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4646:	f89d 6018 	ldrb.w	r6, [sp, #24]
  // Construct and send publish packet.
  uint16_t len = publishPacket(buffer, topic, data, bLen, qos);
   d464a:	f100 0522 	add.w	r5, r0, #34	; 0x22

bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
}

bool Adafruit_MQTT::publish(const char *topic, uint8_t *data, uint16_t bLen, uint8_t qos) {
   d464e:	4604      	mov	r4, r0
  // Construct and send publish packet.
  uint16_t len = publishPacket(buffer, topic, data, bLen, qos);
   d4650:	e88d 0048 	stmia.w	sp, {r3, r6}
   d4654:	4613      	mov	r3, r2
   d4656:	460a      	mov	r2, r1
   d4658:	4629      	mov	r1, r5
   d465a:	f7ff ffad 	bl	d45b8 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th>
  if (!sendPacket(buffer, len))
   d465e:	6823      	ldr	r3, [r4, #0]
   d4660:	4602      	mov	r2, r0
   d4662:	695b      	ldr	r3, [r3, #20]
   d4664:	4629      	mov	r1, r5
   d4666:	4620      	mov	r0, r4
   d4668:	4798      	blx	r3
   d466a:	b908      	cbnz	r0, d4670 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x2c>
    return false;
   d466c:	2000      	movs	r0, #0
   d466e:	e017      	b.n	d46a0 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x5c>

  // If QOS level is high enough verify the response packet.
  if (qos > 0) {
   d4670:	b1b6      	cbz	r6, d46a0 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x5c>
    len = readFullPacket(buffer, MAXBUFFERSIZE, PUBLISH_TIMEOUT_MS);
   d4672:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   d4676:	2296      	movs	r2, #150	; 0x96
   d4678:	4629      	mov	r1, r5
   d467a:	4620      	mov	r0, r4
   d467c:	f7ff fec8 	bl	d4410 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
    DEBUG_PRINT(F("Publish QOS1+ reply:\t"));
    DEBUG_PRINTBUFFER(buffer, len);
    if (len != 4)
   d4680:	2804      	cmp	r0, #4
   d4682:	d1f3      	bne.n	d466c <_ZN13Adafruit_MQTT7publishEPKcPhth+0x28>
      return false;
    if ((buffer[0] >> 4) != MQTT_CTRL_PUBACK)
   d4684:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d4688:	111b      	asrs	r3, r3, #4
   d468a:	2b04      	cmp	r3, #4
   d468c:	d1ee      	bne.n	d466c <_ZN13Adafruit_MQTT7publishEPKcPhth+0x28>
   d468e:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    packnum <<= 8;
    packnum |= buffer[3];

    // we increment the packet_id_counter right after publishing so inc here too to match
    packnum++;
    if (packnum != packet_id_counter)
   d4690:	f8b4 00b8 	ldrh.w	r0, [r4, #184]	; 0xb8
   d4694:	ba5b      	rev16	r3, r3
   d4696:	3301      	adds	r3, #1
   d4698:	b29b      	uxth	r3, r3
   d469a:	1ac3      	subs	r3, r0, r3
   d469c:	4258      	negs	r0, r3
   d469e:	4158      	adcs	r0, r3
      return false;
  }

  return true;
}
   d46a0:	b002      	add	sp, #8
   d46a2:	bd70      	pop	{r4, r5, r6, pc}

000d46a4 <_ZN13Adafruit_MQTT7publishEPKcS1_h>:
  return disconnectServer();

}


bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
   d46a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d46a6:	4605      	mov	r5, r0
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
   d46a8:	4610      	mov	r0, r2
  return disconnectServer();

}


bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
   d46aa:	461f      	mov	r7, r3
   d46ac:	460e      	mov	r6, r1
   d46ae:	4614      	mov	r4, r2
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
   d46b0:	f002 fb0e 	bl	d6cd0 <strlen>
   d46b4:	9700      	str	r7, [sp, #0]
   d46b6:	b283      	uxth	r3, r0
   d46b8:	4622      	mov	r2, r4
   d46ba:	4631      	mov	r1, r6
   d46bc:	4628      	mov	r0, r5
   d46be:	f7ff ffc1 	bl	d4644 <_ZN13Adafruit_MQTT7publishEPKcPhth>
}
   d46c2:	b003      	add	sp, #12
   d46c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d46c6 <_ZN13Adafruit_MQTT15subscribePacketEPhPKch>:
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}

uint8_t Adafruit_MQTT::subscribePacket(uint8_t *packet, const char *topic,
                                       uint8_t qos) {
   d46c6:	b538      	push	{r3, r4, r5, lr}
   d46c8:	461d      	mov	r5, r3
  uint8_t *p = packet;
  uint16_t len;

  p[0] = MQTT_CTRL_SUBSCRIBE << 4 | MQTT_QOS_1 << 1;
   d46ca:	2382      	movs	r3, #130	; 0x82
   d46cc:	700b      	strb	r3, [r1, #0]
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}

uint8_t Adafruit_MQTT::subscribePacket(uint8_t *packet, const char *topic,
                                       uint8_t qos) {
   d46ce:	460c      	mov	r4, r1
  p[0] = MQTT_CTRL_SUBSCRIBE << 4 | MQTT_QOS_1 << 1;
  // fill in packet[1] last
  p+=2;

  // packet identifier. used for checking SUBACK
  p[0] = (packet_id_counter >> 8) & 0xFF;
   d46d0:	f8b0 10b8 	ldrh.w	r1, [r0, #184]	; 0xb8
   d46d4:	0a09      	lsrs	r1, r1, #8
   d46d6:	70a1      	strb	r1, [r4, #2]
  p[1] = packet_id_counter & 0xFF;
   d46d8:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
   d46dc:	70e3      	strb	r3, [r4, #3]
  p+=2;

  // increment the packet id
  packet_id_counter++;
   d46de:	f8b0 10b8 	ldrh.w	r1, [r0, #184]	; 0xb8
   d46e2:	3101      	adds	r1, #1
   d46e4:	f8a0 10b8 	strh.w	r1, [r0, #184]	; 0xb8

  p = stringprint(p, topic);
   d46e8:	4611      	mov	r1, r2
   d46ea:	1d20      	adds	r0, r4, #4
   d46ec:	f7ff fe5c 	bl	d43a8 <_ZL11stringprintPhPKct.constprop.2>

  p[0] = qos;
   d46f0:	f800 5b01 	strb.w	r5, [r0], #1
  p++;

  len = p - packet;
  packet[1] = len-2; // don't include the 2 bytes of fixed header data
   d46f4:	1b00      	subs	r0, r0, r4
   d46f6:	b2c0      	uxtb	r0, r0
   d46f8:	1e83      	subs	r3, r0, #2
   d46fa:	7063      	strb	r3, [r4, #1]
  DEBUG_PRINTLN(F("MQTT subscription packet:"));
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}
   d46fc:	bd38      	pop	{r3, r4, r5, pc}

000d46fe <_ZN13Adafruit_MQTT7connectEv>:

  packet_id_counter = 0;

}

int8_t Adafruit_MQTT::connect() {
   d46fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // Connect to the server.
  if (!connectServer())
   d4702:	6803      	ldr	r3, [r0, #0]
   d4704:	68db      	ldr	r3, [r3, #12]

  packet_id_counter = 0;

}

int8_t Adafruit_MQTT::connect() {
   d4706:	4604      	mov	r4, r0
  // Connect to the server.
  if (!connectServer())
   d4708:	4798      	blx	r3
   d470a:	b918      	cbnz	r0, d4714 <_ZN13Adafruit_MQTT7connectEv+0x16>
    return -1;
   d470c:	f04f 30ff 	mov.w	r0, #4294967295
   d4710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

  // Construct and send connect packet.
  uint8_t len = connectPacket(buffer);
   d4714:	f104 0522 	add.w	r5, r4, #34	; 0x22
   d4718:	4629      	mov	r1, r5
   d471a:	4620      	mov	r0, r4
   d471c:	f7ff fef0 	bl	d4500 <_ZN13Adafruit_MQTT13connectPacketEPh>
  if (!sendPacket(buffer, len))
   d4720:	6823      	ldr	r3, [r4, #0]
   d4722:	b282      	uxth	r2, r0
   d4724:	695b      	ldr	r3, [r3, #20]
   d4726:	4629      	mov	r1, r5
   d4728:	4620      	mov	r0, r4
   d472a:	4798      	blx	r3
   d472c:	2800      	cmp	r0, #0
   d472e:	d0ed      	beq.n	d470c <_ZN13Adafruit_MQTT7connectEv+0xe>
    return -1;

  // Read connect response packet and verify it
  len = readFullPacket(buffer, MAXBUFFERSIZE, CONNECT_TIMEOUT_MS);
   d4730:	f241 7370 	movw	r3, #6000	; 0x1770
   d4734:	2296      	movs	r2, #150	; 0x96
   d4736:	4629      	mov	r1, r5
   d4738:	4620      	mov	r0, r4
   d473a:	f7ff fe69 	bl	d4410 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
  if (len != 4)
   d473e:	b2c0      	uxtb	r0, r0
   d4740:	2804      	cmp	r0, #4
   d4742:	d1e3      	bne.n	d470c <_ZN13Adafruit_MQTT7connectEv+0xe>
    return -1;
  if ((buffer[0] != (MQTT_CTRL_CONNECTACK << 4)) || (buffer[1] != 2))
   d4744:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d4746:	f5b3 7f08 	cmp.w	r3, #544	; 0x220
   d474a:	d1df      	bne.n	d470c <_ZN13Adafruit_MQTT7connectEv+0xe>
    return -1;
  if (buffer[3] != 0)
   d474c:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
   d4750:	b110      	cbz	r0, d4758 <_ZN13Adafruit_MQTT7connectEv+0x5a>
    return buffer[3];
   d4752:	b240      	sxtb	r0, r0
   d4754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4758:	f104 07b8 	add.w	r7, r4, #184	; 0xb8
   d475c:	f104 08cc 	add.w	r8, r4, #204	; 0xcc

  // Setup subscriptions once connected.
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    // Ignore subscriptions that aren't defined.
    if (subscriptions[i] == 0) continue;
   d4760:	f857 3f04 	ldr.w	r3, [r7, #4]!
   d4764:	b1fb      	cbz	r3, d47a6 <_ZN13Adafruit_MQTT7connectEv+0xa8>
   d4766:	2603      	movs	r6, #3

    boolean success = false;
    for (uint8_t retry=0; (retry<3) && !success; retry++) { // retry until we get a suback    
      // Construct and send subscription packet.
      uint8_t len = subscribePacket(buffer, subscriptions[i]->topic, subscriptions[i]->qos);
   d4768:	683a      	ldr	r2, [r7, #0]
   d476a:	4629      	mov	r1, r5
   d476c:	7913      	ldrb	r3, [r2, #4]
   d476e:	6812      	ldr	r2, [r2, #0]
   d4770:	4620      	mov	r0, r4
   d4772:	f7ff ffa8 	bl	d46c6 <_ZN13Adafruit_MQTT15subscribePacketEPhPKch>
      if (!sendPacket(buffer, len))
   d4776:	6823      	ldr	r3, [r4, #0]
   d4778:	b282      	uxth	r2, r0
   d477a:	695b      	ldr	r3, [r3, #20]
   d477c:	4629      	mov	r1, r5
   d477e:	4620      	mov	r0, r4
   d4780:	4798      	blx	r3
   d4782:	2800      	cmp	r0, #0
   d4784:	d0c2      	beq.n	d470c <_ZN13Adafruit_MQTT7connectEv+0xe>
      // Check for SUBACK if using MQTT 3.1.1 or higher
      // TODO: The Server is permitted to start sending PUBLISH packets matching the
      // Subscription before the Server sends the SUBACK Packet. (will really need to use callbacks - ada)

      //Serial.println("\t**looking for suback");
      if (processPacketsUntil(buffer, MQTT_CTRL_SUBACK, SUBACK_TIMEOUT_MS)) {
   d4786:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   d478a:	2209      	movs	r2, #9
   d478c:	4629      	mov	r1, r5
   d478e:	4620      	mov	r0, r4
   d4790:	f7ff fe88 	bl	d44a4 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>
   d4794:	b938      	cbnz	r0, d47a6 <_ZN13Adafruit_MQTT7connectEv+0xa8>
   d4796:	3e01      	subs	r6, #1
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    // Ignore subscriptions that aren't defined.
    if (subscriptions[i] == 0) continue;

    boolean success = false;
    for (uint8_t retry=0; (retry<3) && !success; retry++) { // retry until we get a suback    
   d4798:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   d479c:	d1e4      	bne.n	d4768 <_ZN13Adafruit_MQTT7connectEv+0x6a>
	success = true;
	break;
      }
      //Serial.println("\t**failed, retrying!");
    }
    if (! success) return -2; // failed to sub for some reason
   d479e:	f06f 0001 	mvn.w	r0, #1
  }

  return 0;
}
   d47a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return -1;
  if (buffer[3] != 0)
    return buffer[3];

  // Setup subscriptions once connected.
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
   d47a6:	4547      	cmp	r7, r8
   d47a8:	d1da      	bne.n	d4760 <_ZN13Adafruit_MQTT7connectEv+0x62>
      //Serial.println("\t**failed, retrying!");
    }
    if (! success) return -2; // failed to sub for some reason
  }

  return 0;
   d47aa:	2000      	movs	r0, #0
   d47ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d47b0 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>:
  return 2;
}

// Adafruit_MQTT_Publish Definition ////////////////////////////////////////////

Adafruit_MQTT_Publish::Adafruit_MQTT_Publish(Adafruit_MQTT *mqttserver,
   d47b0:	b510      	push	{r4, lr}
                                             const char *feed, uint8_t q) {
  mqtt = mqttserver;
  topic = feed;
   d47b2:	e880 0006 	stmia.w	r0, {r1, r2}
  qos = q;
   d47b6:	7203      	strb	r3, [r0, #8]
}
   d47b8:	bd10      	pop	{r4, pc}
	...

000d47bc <_ZN21Adafruit_MQTT_Publish7publishEdh>:
  char payload[11];
  ultoa(i, payload, 10);
  return mqtt->publish(topic, payload, qos);
}

bool Adafruit_MQTT_Publish::publish(double f, uint8_t precision) {
   d47bc:	b510      	push	{r4, lr}
   d47be:	b092      	sub	sp, #72	; 0x48
   d47c0:	4604      	mov	r4, r0
#include "Adafruit_MQTT.h"

#if defined(ARDUINO_SAMD_ZERO) || defined(ARDUINO_SAMD_MKR1000) || defined(SPARK)
static char *dtostrf (double val, signed char width, unsigned char prec, char *sout) {
  char fmt[20];
  sprintf(fmt, "%%%d.%df", width, prec);
   d47c2:	460b      	mov	r3, r1
   d47c4:	2200      	movs	r2, #0
   d47c6:	490b      	ldr	r1, [pc, #44]	; (d47f4 <_ZN21Adafruit_MQTT_Publish7publishEdh+0x38>)
   d47c8:	a802      	add	r0, sp, #8
  char payload[11];
  ultoa(i, payload, 10);
  return mqtt->publish(topic, payload, qos);
}

bool Adafruit_MQTT_Publish::publish(double f, uint8_t precision) {
   d47ca:	ed8d 0b00 	vstr	d0, [sp]
#include "Adafruit_MQTT.h"

#if defined(ARDUINO_SAMD_ZERO) || defined(ARDUINO_SAMD_MKR1000) || defined(SPARK)
static char *dtostrf (double val, signed char width, unsigned char prec, char *sout) {
  char fmt[20];
  sprintf(fmt, "%%%d.%df", width, prec);
   d47ce:	f000 fadb 	bl	d4d88 <sprintf>
  sprintf(sout, fmt, val);
   d47d2:	ed9d 0b00 	vldr	d0, [sp]
   d47d6:	a902      	add	r1, sp, #8
   d47d8:	ec53 2b10 	vmov	r2, r3, d0
   d47dc:	a807      	add	r0, sp, #28
   d47de:	f000 fad3 	bl	d4d88 <sprintf>
}

bool Adafruit_MQTT_Publish::publish(double f, uint8_t precision) {
  char payload[41];  // Need to technically hold float max, 39 digits and minus sign.
  dtostrf(f, 0, precision, payload);
  return mqtt->publish(topic, payload, qos);
   d47e2:	7a23      	ldrb	r3, [r4, #8]
   d47e4:	aa07      	add	r2, sp, #28
   d47e6:	e894 0003 	ldmia.w	r4, {r0, r1}
   d47ea:	f7ff ff5b 	bl	d46a4 <_ZN13Adafruit_MQTT7publishEPKcS1_h>
}
   d47ee:	b012      	add	sp, #72	; 0x48
   d47f0:	bd10      	pop	{r4, pc}
   d47f2:	bf00      	nop
   d47f4:	000d6ea2 	.word	0x000d6ea2

000d47f8 <_GLOBAL__sub_I__Z11printBufferPht>:
   d47f8:	f000 b9fa 	b.w	d4bf0 <HAL_Pin_Map>

000d47fc <_ZN19Adafruit_MQTT_SPARK9connectedEv>:
    client->stop();
  }
  return true;
}

bool Adafruit_MQTT_SPARK::connected() {
   d47fc:	b508      	push	{r3, lr}
  // Return true if connected, false if not connected.
  return client->connected();
   d47fe:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   d4802:	6803      	ldr	r3, [r0, #0]
   d4804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4806:	4798      	blx	r3
}
   d4808:	3000      	adds	r0, #0
   d480a:	bf18      	it	ne
   d480c:	2001      	movne	r0, #1
   d480e:	bd08      	pop	{r3, pc}

000d4810 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht>:
    delay(MQTT_CLIENT_READINTERVAL_MS);
  }
  return len;
}

bool Adafruit_MQTT_SPARK::sendPacket(uint8_t *buffer, uint16_t len) {
   d4810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4812:	4606      	mov	r6, r0
   d4814:	460f      	mov	r7, r1
   d4816:	4614      	mov	r4, r2
  uint16_t ret = 0;

  while (len > 0) {
   d4818:	b1c4      	cbz	r4, d484c <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x3c>
    if (client->connected()) {
   d481a:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d481e:	6803      	ldr	r3, [r0, #0]
   d4820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4822:	4798      	blx	r3
   d4824:	b908      	cbnz	r0, d482a <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x1a>
	DEBUG_PRINTLN("Failed to send packet.");
	return false;
      }
    } else {
      DEBUG_PRINTLN(F("Connection failed!"));
      return false;
   d4826:	2000      	movs	r0, #0
   d4828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (client->connected()) {
      // send 250 bytes at most at a time, can adjust this later based on Client

      uint16_t sendlen = min(len, 250);
      //Serial.print("Sending: "); Serial.println(sendlen);
      ret = client->write(buffer, sendlen);
   d482a:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
max (T a, U b) { return ((a)>(b)?(a):(b)); }

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d482e:	2cfa      	cmp	r4, #250	; 0xfa
   d4830:	6803      	ldr	r3, [r0, #0]
   d4832:	4625      	mov	r5, r4
   d4834:	bfa8      	it	ge
   d4836:	25fa      	movge	r5, #250	; 0xfa
   d4838:	68db      	ldr	r3, [r3, #12]
   d483a:	462a      	mov	r2, r5
   d483c:	4639      	mov	r1, r7
   d483e:	4798      	blx	r3
   d4840:	b280      	uxth	r0, r0
      DEBUG_PRINT(F("Client sendPacket returned: ")); DEBUG_PRINTLN(ret);
      len -= ret;
   d4842:	1a24      	subs	r4, r4, r0

      if (ret != sendlen) {
   d4844:	4285      	cmp	r5, r0

      uint16_t sendlen = min(len, 250);
      //Serial.print("Sending: "); Serial.println(sendlen);
      ret = client->write(buffer, sendlen);
      DEBUG_PRINT(F("Client sendPacket returned: ")); DEBUG_PRINTLN(ret);
      len -= ret;
   d4846:	b2a4      	uxth	r4, r4

      if (ret != sendlen) {
   d4848:	d0e6      	beq.n	d4818 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x8>
   d484a:	e7ec      	b.n	d4826 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x16>
    } else {
      DEBUG_PRINTLN(F("Connection failed!"));
      return false;
    }
  }
  return true;
   d484c:	2001      	movs	r0, #1
}
   d484e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4850 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts>:
  // Return true if connected, false if not connected.
  return client->connected();
}

uint16_t Adafruit_MQTT_SPARK::readPacket(uint8_t *buffer, uint16_t maxlen,
                                          int16_t timeout) {
   d4850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d4854:	4606      	mov	r6, r0
   d4856:	4688      	mov	r8, r1
   d4858:	4691      	mov	r9, r2
   d485a:	461f      	mov	r7, r3
   d485c:	461d      	mov	r5, r3
  /* Read data until either the connection is closed, or the idle timeout is reached. */
  uint16_t len = 0;
   d485e:	2400      	movs	r4, #0
  int16_t t = timeout;

  while (client->connected() && (timeout >= 0)) {
   d4860:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d4864:	6803      	ldr	r3, [r0, #0]
   d4866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4868:	4798      	blx	r3
   d486a:	b1d0      	cbz	r0, d48a2 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
   d486c:	2d00      	cmp	r5, #0
   d486e:	db18      	blt.n	d48a2 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
    //DEBUG_PRINT('.');
    while (client->available()) {
   d4870:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d4874:	6803      	ldr	r3, [r0, #0]
   d4876:	691b      	ldr	r3, [r3, #16]
   d4878:	4798      	blx	r3
   d487a:	b160      	cbz	r0, d4896 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x46>
      //DEBUG_PRINT('!');
      char c = client->read();
   d487c:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d4880:	6803      	ldr	r3, [r0, #0]
   d4882:	695b      	ldr	r3, [r3, #20]
   d4884:	4798      	blx	r3
      timeout = t;  // reset the timeout
      buffer[len] = c;
   d4886:	f808 0004 	strb.w	r0, [r8, r4]
      //DEBUG_PRINTLN((uint8_t)c, HEX);
      len++;
   d488a:	3401      	adds	r4, #1
   d488c:	b2a4      	uxth	r4, r4
      if (len == maxlen) {  // we read all we want, bail
   d488e:	454c      	cmp	r4, r9
   d4890:	d007      	beq.n	d48a2 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
  while (client->connected() && (timeout >= 0)) {
    //DEBUG_PRINT('.');
    while (client->available()) {
      //DEBUG_PRINT('!');
      char c = client->read();
      timeout = t;  // reset the timeout
   d4892:	463d      	mov	r5, r7
   d4894:	e7ec      	b.n	d4870 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x20>
        DEBUG_PRINT(F("Read data:\t"));
        DEBUG_PRINTBUFFER(buffer, len);
        return len;
      }
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   d4896:	3d0a      	subs	r5, #10
    delay(MQTT_CLIENT_READINTERVAL_MS);
   d4898:	200a      	movs	r0, #10
        DEBUG_PRINT(F("Read data:\t"));
        DEBUG_PRINTBUFFER(buffer, len);
        return len;
      }
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   d489a:	b22d      	sxth	r5, r5
    delay(MQTT_CLIENT_READINTERVAL_MS);
   d489c:	f001 f83f 	bl	d591e <delay>
                                          int16_t timeout) {
  /* Read data until either the connection is closed, or the idle timeout is reached. */
  uint16_t len = 0;
  int16_t t = timeout;

  while (client->connected() && (timeout >= 0)) {
   d48a0:	e7de      	b.n	d4860 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x10>
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
    delay(MQTT_CLIENT_READINTERVAL_MS);
  }
  return len;
}
   d48a2:	4620      	mov	r0, r4
   d48a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d48a8 <_ZN19Adafruit_MQTT_SPARK13connectServerEv>:
        }
    }
    return true;
}

bool Adafruit_MQTT_SPARK::connectServer(){
   d48a8:	b570      	push	{r4, r5, r6, lr}
   d48aa:	4604      	mov	r4, r0
  // Grab server name from flash and copy to buffer for name resolution.
  memset(buffer, 0, sizeof(buffer));
   d48ac:	f100 0522 	add.w	r5, r0, #34	; 0x22
   d48b0:	2296      	movs	r2, #150	; 0x96
   d48b2:	2100      	movs	r1, #0
   d48b4:	4628      	mov	r0, r5
   d48b6:	f002 f9d3 	bl	d6c60 <memset>
  strcpy((char *)buffer, servername);
   d48ba:	6861      	ldr	r1, [r4, #4]
   d48bc:	4628      	mov	r0, r5
   d48be:	f002 f9ff 	bl	d6cc0 <strcpy>
  DEBUG_PRINT(F("Connecting to: ")); DEBUG_PRINTLN((char *)buffer);
  // Connect and check for success (0 result).
  int r = client->connect((char *)buffer, portnum);
   d48c2:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   d48c6:	8922      	ldrh	r2, [r4, #8]
   d48c8:	6803      	ldr	r3, [r0, #0]
   d48ca:	4629      	mov	r1, r5
   d48cc:	6a5e      	ldr	r6, [r3, #36]	; 0x24
   d48ce:	2300      	movs	r3, #0
   d48d0:	47b0      	blx	r6
  DEBUG_PRINT(F("Connect result: ")); DEBUG_PRINTLN(r);
  return r != 0;
}
   d48d2:	3000      	adds	r0, #0
   d48d4:	bf18      	it	ne
   d48d6:	2001      	movne	r0, #1
   d48d8:	bd70      	pop	{r4, r5, r6, pc}

000d48da <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv>:

bool Adafruit_MQTT_SPARK::disconnectServer() {
   d48da:	b510      	push	{r4, lr}
   d48dc:	4604      	mov	r4, r0
  // Stop connection if connected and return success (stop has no indication of
  // failure).
  if (client->connected()) {
   d48de:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   d48e2:	6803      	ldr	r3, [r0, #0]
   d48e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d48e6:	4798      	blx	r3
   d48e8:	b120      	cbz	r0, d48f4 <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv+0x1a>
    client->stop();
   d48ea:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   d48ee:	6803      	ldr	r3, [r0, #0]
   d48f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d48f2:	4798      	blx	r3
  }
  return true;
}
   d48f4:	2001      	movs	r0, #1
   d48f6:	bd10      	pop	{r4, pc}

000d48f8 <_ZN19Adafruit_MQTT_SPARK6UpdateEv>:
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
#include "Adafruit_MQTT_SPARK.h"

bool Adafruit_MQTT_SPARK::Update()
{
   d48f8:	b570      	push	{r4, r5, r6, lr}
    // Stop if already connected.
    if (!connected())
   d48fa:	6803      	ldr	r3, [r0, #0]
   d48fc:	689b      	ldr	r3, [r3, #8]
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
#include "Adafruit_MQTT_SPARK.h"

bool Adafruit_MQTT_SPARK::Update()
{
   d48fe:	4604      	mov	r4, r0
    // Stop if already connected.
    if (!connected())
   d4900:	4798      	blx	r3
   d4902:	b9c8      	cbnz	r0, d4938 <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x40>
    {
        DEBUG_PRINT(F("Connecting to MQTT... "));
        
        uint8_t retries = 0;
        for(int8_t ret = connect() ; ret != 0 && retries < 3 ; ret = connect() , retries++)
   d4904:	4620      	mov	r0, r4
   d4906:	f7ff fefa 	bl	d46fe <_ZN13Adafruit_MQTT7connectEv>
   d490a:	2504      	movs	r5, #4
   d490c:	b170      	cbz	r0, d492c <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x34>
   d490e:	3d01      	subs	r5, #1
   d4910:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d4914:	d00a      	beq.n	d492c <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x34>
        { // connect will return 0 for connected
            DEBUG_PRINT(connectErrorString(ret));
            DEBUG_PRINT(F("Retrying MQTT connection in 5 seconds..."));
            disconnect();
   d4916:	4620      	mov	r0, r4
   d4918:	f7ff fdde 	bl	d44d8 <_ZN13Adafruit_MQTT10disconnectEv>
            delay(5000);  // wait 5 seconds
   d491c:	f241 3088 	movw	r0, #5000	; 0x1388
   d4920:	f000 fffd 	bl	d591e <delay>
    if (!connected())
    {
        DEBUG_PRINT(F("Connecting to MQTT... "));
        
        uint8_t retries = 0;
        for(int8_t ret = connect() ; ret != 0 && retries < 3 ; ret = connect() , retries++)
   d4924:	4620      	mov	r0, r4
   d4926:	f7ff feea 	bl	d46fe <_ZN13Adafruit_MQTT7connectEv>
   d492a:	e7ef      	b.n	d490c <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x14>
            DEBUG_PRINT(F("Retrying MQTT connection in 5 seconds..."));
            disconnect();
            delay(5000);  // wait 5 seconds
        }
      
        if( connected() )
   d492c:	6823      	ldr	r3, [r4, #0]
   d492e:	4620      	mov	r0, r4
   d4930:	689b      	ldr	r3, [r3, #8]
            DEBUG_PRINT(F("Failed to connect"));
            return false;
        }
    }
    return true;
}
   d4932:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            DEBUG_PRINT(F("Retrying MQTT connection in 5 seconds..."));
            disconnect();
            delay(5000);  // wait 5 seconds
        }
      
        if( connected() )
   d4936:	4718      	bx	r3
            DEBUG_PRINT(F("Failed to connect"));
            return false;
        }
    }
    return true;
}
   d4938:	bd70      	pop	{r4, r5, r6, pc}

000d493a <_GLOBAL__sub_I__ZN19Adafruit_MQTT_SPARK6UpdateEv>:
   d493a:	f000 b959 	b.w	d4bf0 <HAL_Pin_Map>
	...

000d4940 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4940:	b508      	push	{r3, lr}
   d4942:	4b02      	ldr	r3, [pc, #8]	; (d494c <HAL_USB_USART_Init+0xc>)
   d4944:	681b      	ldr	r3, [r3, #0]
   d4946:	681b      	ldr	r3, [r3, #0]
   d4948:	9301      	str	r3, [sp, #4]
   d494a:	bd08      	pop	{r3, pc}
   d494c:	0003024c 	.word	0x0003024c

000d4950 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4950:	b508      	push	{r3, lr}
   d4952:	4b02      	ldr	r3, [pc, #8]	; (d495c <HAL_USB_USART_Begin+0xc>)
   d4954:	681b      	ldr	r3, [r3, #0]
   d4956:	685b      	ldr	r3, [r3, #4]
   d4958:	9301      	str	r3, [sp, #4]
   d495a:	bd08      	pop	{r3, pc}
   d495c:	0003024c 	.word	0x0003024c

000d4960 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4960:	b508      	push	{r3, lr}
   d4962:	4b02      	ldr	r3, [pc, #8]	; (d496c <HAL_USB_USART_Available_Data+0xc>)
   d4964:	681b      	ldr	r3, [r3, #0]
   d4966:	691b      	ldr	r3, [r3, #16]
   d4968:	9301      	str	r3, [sp, #4]
   d496a:	bd08      	pop	{r3, pc}
   d496c:	0003024c 	.word	0x0003024c

000d4970 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4970:	b508      	push	{r3, lr}
   d4972:	4b02      	ldr	r3, [pc, #8]	; (d497c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4974:	681b      	ldr	r3, [r3, #0]
   d4976:	695b      	ldr	r3, [r3, #20]
   d4978:	9301      	str	r3, [sp, #4]
   d497a:	bd08      	pop	{r3, pc}
   d497c:	0003024c 	.word	0x0003024c

000d4980 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4980:	b508      	push	{r3, lr}
   d4982:	4b02      	ldr	r3, [pc, #8]	; (d498c <HAL_USB_USART_Receive_Data+0xc>)
   d4984:	681b      	ldr	r3, [r3, #0]
   d4986:	699b      	ldr	r3, [r3, #24]
   d4988:	9301      	str	r3, [sp, #4]
   d498a:	bd08      	pop	{r3, pc}
   d498c:	0003024c 	.word	0x0003024c

000d4990 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4990:	b508      	push	{r3, lr}
   d4992:	4b02      	ldr	r3, [pc, #8]	; (d499c <HAL_USB_USART_Send_Data+0xc>)
   d4994:	681b      	ldr	r3, [r3, #0]
   d4996:	69db      	ldr	r3, [r3, #28]
   d4998:	9301      	str	r3, [sp, #4]
   d499a:	bd08      	pop	{r3, pc}
   d499c:	0003024c 	.word	0x0003024c

000d49a0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d49a0:	b508      	push	{r3, lr}
   d49a2:	4b02      	ldr	r3, [pc, #8]	; (d49ac <HAL_USB_USART_Flush_Data+0xc>)
   d49a4:	681b      	ldr	r3, [r3, #0]
   d49a6:	6a1b      	ldr	r3, [r3, #32]
   d49a8:	9301      	str	r3, [sp, #4]
   d49aa:	bd08      	pop	{r3, pc}
   d49ac:	0003024c 	.word	0x0003024c

000d49b0 <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
   d49b0:	b508      	push	{r3, lr}
   d49b2:	4b02      	ldr	r3, [pc, #8]	; (d49bc <HAL_USB_USART_Is_Enabled+0xc>)
   d49b4:	681b      	ldr	r3, [r3, #0]
   d49b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d49b8:	9301      	str	r3, [sp, #4]
   d49ba:	bd08      	pop	{r3, pc}
   d49bc:	0003024c 	.word	0x0003024c

000d49c0 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d49c0:	b508      	push	{r3, lr}
   d49c2:	4b02      	ldr	r3, [pc, #8]	; (d49cc <sock_setsockopt+0xc>)
   d49c4:	681b      	ldr	r3, [r3, #0]
   d49c6:	699b      	ldr	r3, [r3, #24]
   d49c8:	9301      	str	r3, [sp, #4]
   d49ca:	bd08      	pop	{r3, pc}
   d49cc:	00030238 	.word	0x00030238

000d49d0 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d49d0:	b508      	push	{r3, lr}
   d49d2:	4b02      	ldr	r3, [pc, #8]	; (d49dc <sock_close+0xc>)
   d49d4:	681b      	ldr	r3, [r3, #0]
   d49d6:	69db      	ldr	r3, [r3, #28]
   d49d8:	9301      	str	r3, [sp, #4]
   d49da:	bd08      	pop	{r3, pc}
   d49dc:	00030238 	.word	0x00030238

000d49e0 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d49e0:	b508      	push	{r3, lr}
   d49e2:	4b02      	ldr	r3, [pc, #8]	; (d49ec <sock_connect+0xc>)
   d49e4:	681b      	ldr	r3, [r3, #0]
   d49e6:	6a1b      	ldr	r3, [r3, #32]
   d49e8:	9301      	str	r3, [sp, #4]
   d49ea:	bd08      	pop	{r3, pc}
   d49ec:	00030238 	.word	0x00030238

000d49f0 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d49f0:	b508      	push	{r3, lr}
   d49f2:	4b02      	ldr	r3, [pc, #8]	; (d49fc <sock_recv+0xc>)
   d49f4:	681b      	ldr	r3, [r3, #0]
   d49f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d49f8:	9301      	str	r3, [sp, #4]
   d49fa:	bd08      	pop	{r3, pc}
   d49fc:	00030238 	.word	0x00030238

000d4a00 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d4a00:	b508      	push	{r3, lr}
   d4a02:	4b02      	ldr	r3, [pc, #8]	; (d4a0c <sock_send+0xc>)
   d4a04:	681b      	ldr	r3, [r3, #0]
   d4a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4a08:	9301      	str	r3, [sp, #4]
   d4a0a:	bd08      	pop	{r3, pc}
   d4a0c:	00030238 	.word	0x00030238

000d4a10 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d4a10:	b508      	push	{r3, lr}
   d4a12:	4b02      	ldr	r3, [pc, #8]	; (d4a1c <sock_socket+0xc>)
   d4a14:	681b      	ldr	r3, [r3, #0]
   d4a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d4a18:	9301      	str	r3, [sp, #4]
   d4a1a:	bd08      	pop	{r3, pc}
   d4a1c:	00030238 	.word	0x00030238

000d4a20 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4a20:	b508      	push	{r3, lr}
   d4a22:	4b02      	ldr	r3, [pc, #8]	; (d4a2c <HAL_I2C_Write_Data+0xc>)
   d4a24:	681b      	ldr	r3, [r3, #0]
   d4a26:	6a1b      	ldr	r3, [r3, #32]
   d4a28:	9301      	str	r3, [sp, #4]
   d4a2a:	bd08      	pop	{r3, pc}
   d4a2c:	00030228 	.word	0x00030228

000d4a30 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4a30:	b508      	push	{r3, lr}
   d4a32:	4b02      	ldr	r3, [pc, #8]	; (d4a3c <HAL_I2C_Available_Data+0xc>)
   d4a34:	681b      	ldr	r3, [r3, #0]
   d4a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4a38:	9301      	str	r3, [sp, #4]
   d4a3a:	bd08      	pop	{r3, pc}
   d4a3c:	00030228 	.word	0x00030228

000d4a40 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4a40:	b508      	push	{r3, lr}
   d4a42:	4b02      	ldr	r3, [pc, #8]	; (d4a4c <HAL_I2C_Read_Data+0xc>)
   d4a44:	681b      	ldr	r3, [r3, #0]
   d4a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4a48:	9301      	str	r3, [sp, #4]
   d4a4a:	bd08      	pop	{r3, pc}
   d4a4c:	00030228 	.word	0x00030228

000d4a50 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4a50:	b508      	push	{r3, lr}
   d4a52:	4b02      	ldr	r3, [pc, #8]	; (d4a5c <HAL_I2C_Peek_Data+0xc>)
   d4a54:	681b      	ldr	r3, [r3, #0]
   d4a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4a58:	9301      	str	r3, [sp, #4]
   d4a5a:	bd08      	pop	{r3, pc}
   d4a5c:	00030228 	.word	0x00030228

000d4a60 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4a60:	b508      	push	{r3, lr}
   d4a62:	4b02      	ldr	r3, [pc, #8]	; (d4a6c <HAL_I2C_Flush_Data+0xc>)
   d4a64:	681b      	ldr	r3, [r3, #0]
   d4a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4a68:	9301      	str	r3, [sp, #4]
   d4a6a:	bd08      	pop	{r3, pc}
   d4a6c:	00030228 	.word	0x00030228

000d4a70 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4a70:	b508      	push	{r3, lr}
   d4a72:	4b02      	ldr	r3, [pc, #8]	; (d4a7c <HAL_I2C_Is_Enabled+0xc>)
   d4a74:	681b      	ldr	r3, [r3, #0]
   d4a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4a78:	9301      	str	r3, [sp, #4]
   d4a7a:	bd08      	pop	{r3, pc}
   d4a7c:	00030228 	.word	0x00030228

000d4a80 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d4a80:	b508      	push	{r3, lr}
   d4a82:	4b02      	ldr	r3, [pc, #8]	; (d4a8c <HAL_I2C_Init+0xc>)
   d4a84:	681b      	ldr	r3, [r3, #0]
   d4a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4a88:	9301      	str	r3, [sp, #4]
   d4a8a:	bd08      	pop	{r3, pc}
   d4a8c:	00030228 	.word	0x00030228

000d4a90 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4a90:	b508      	push	{r3, lr}
   d4a92:	4b02      	ldr	r3, [pc, #8]	; (d4a9c <HAL_USART_Init+0xc>)
   d4a94:	681b      	ldr	r3, [r3, #0]
   d4a96:	681b      	ldr	r3, [r3, #0]
   d4a98:	9301      	str	r3, [sp, #4]
   d4a9a:	bd08      	pop	{r3, pc}
   d4a9c:	0003023c 	.word	0x0003023c

000d4aa0 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4aa0:	b508      	push	{r3, lr}
   d4aa2:	4b02      	ldr	r3, [pc, #8]	; (d4aac <HAL_USART_Write_Data+0xc>)
   d4aa4:	681b      	ldr	r3, [r3, #0]
   d4aa6:	68db      	ldr	r3, [r3, #12]
   d4aa8:	9301      	str	r3, [sp, #4]
   d4aaa:	bd08      	pop	{r3, pc}
   d4aac:	0003023c 	.word	0x0003023c

000d4ab0 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4ab0:	b508      	push	{r3, lr}
   d4ab2:	4b02      	ldr	r3, [pc, #8]	; (d4abc <HAL_USART_Available_Data+0xc>)
   d4ab4:	681b      	ldr	r3, [r3, #0]
   d4ab6:	691b      	ldr	r3, [r3, #16]
   d4ab8:	9301      	str	r3, [sp, #4]
   d4aba:	bd08      	pop	{r3, pc}
   d4abc:	0003023c 	.word	0x0003023c

000d4ac0 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4ac0:	b508      	push	{r3, lr}
   d4ac2:	4b02      	ldr	r3, [pc, #8]	; (d4acc <HAL_USART_Read_Data+0xc>)
   d4ac4:	681b      	ldr	r3, [r3, #0]
   d4ac6:	695b      	ldr	r3, [r3, #20]
   d4ac8:	9301      	str	r3, [sp, #4]
   d4aca:	bd08      	pop	{r3, pc}
   d4acc:	0003023c 	.word	0x0003023c

000d4ad0 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4ad0:	b508      	push	{r3, lr}
   d4ad2:	4b02      	ldr	r3, [pc, #8]	; (d4adc <HAL_USART_Peek_Data+0xc>)
   d4ad4:	681b      	ldr	r3, [r3, #0]
   d4ad6:	699b      	ldr	r3, [r3, #24]
   d4ad8:	9301      	str	r3, [sp, #4]
   d4ada:	bd08      	pop	{r3, pc}
   d4adc:	0003023c 	.word	0x0003023c

000d4ae0 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4ae0:	b508      	push	{r3, lr}
   d4ae2:	4b02      	ldr	r3, [pc, #8]	; (d4aec <HAL_USART_Flush_Data+0xc>)
   d4ae4:	681b      	ldr	r3, [r3, #0]
   d4ae6:	69db      	ldr	r3, [r3, #28]
   d4ae8:	9301      	str	r3, [sp, #4]
   d4aea:	bd08      	pop	{r3, pc}
   d4aec:	0003023c 	.word	0x0003023c

000d4af0 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4af0:	b508      	push	{r3, lr}
   d4af2:	4b02      	ldr	r3, [pc, #8]	; (d4afc <HAL_USART_Is_Enabled+0xc>)
   d4af4:	681b      	ldr	r3, [r3, #0]
   d4af6:	6a1b      	ldr	r3, [r3, #32]
   d4af8:	9301      	str	r3, [sp, #4]
   d4afa:	bd08      	pop	{r3, pc}
   d4afc:	0003023c 	.word	0x0003023c

000d4b00 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4b00:	b508      	push	{r3, lr}
   d4b02:	4b02      	ldr	r3, [pc, #8]	; (d4b0c <HAL_USART_Available_Data_For_Write+0xc>)
   d4b04:	681b      	ldr	r3, [r3, #0]
   d4b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4b08:	9301      	str	r3, [sp, #4]
   d4b0a:	bd08      	pop	{r3, pc}
   d4b0c:	0003023c 	.word	0x0003023c

000d4b10 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4b10:	b508      	push	{r3, lr}
   d4b12:	4b02      	ldr	r3, [pc, #8]	; (d4b1c <inet_inet_ntop+0xc>)
   d4b14:	681b      	ldr	r3, [r3, #0]
   d4b16:	695b      	ldr	r3, [r3, #20]
   d4b18:	9301      	str	r3, [sp, #4]
   d4b1a:	bd08      	pop	{r3, pc}
   d4b1c:	00030264 	.word	0x00030264

000d4b20 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d4b20:	b508      	push	{r3, lr}
   d4b22:	4b02      	ldr	r3, [pc, #8]	; (d4b2c <inet_htonl+0xc>)
   d4b24:	681b      	ldr	r3, [r3, #0]
   d4b26:	6a1b      	ldr	r3, [r3, #32]
   d4b28:	9301      	str	r3, [sp, #4]
   d4b2a:	bd08      	pop	{r3, pc}
   d4b2c:	00030264 	.word	0x00030264

000d4b30 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d4b30:	b508      	push	{r3, lr}
   d4b32:	4b02      	ldr	r3, [pc, #8]	; (d4b3c <inet_htons+0xc>)
   d4b34:	681b      	ldr	r3, [r3, #0]
   d4b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4b38:	9301      	str	r3, [sp, #4]
   d4b3a:	bd08      	pop	{r3, pc}
   d4b3c:	00030264 	.word	0x00030264

000d4b40 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4b40:	b508      	push	{r3, lr}
   d4b42:	4b02      	ldr	r3, [pc, #8]	; (d4b4c <os_thread_is_current+0xc>)
   d4b44:	681b      	ldr	r3, [r3, #0]
   d4b46:	689b      	ldr	r3, [r3, #8]
   d4b48:	9301      	str	r3, [sp, #4]
   d4b4a:	bd08      	pop	{r3, pc}
   d4b4c:	00030248 	.word	0x00030248

000d4b50 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4b50:	b508      	push	{r3, lr}
   d4b52:	4b02      	ldr	r3, [pc, #8]	; (d4b5c <os_thread_join+0xc>)
   d4b54:	681b      	ldr	r3, [r3, #0]
   d4b56:	691b      	ldr	r3, [r3, #16]
   d4b58:	9301      	str	r3, [sp, #4]
   d4b5a:	bd08      	pop	{r3, pc}
   d4b5c:	00030248 	.word	0x00030248

000d4b60 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4b60:	b508      	push	{r3, lr}
   d4b62:	4b02      	ldr	r3, [pc, #8]	; (d4b6c <os_thread_cleanup+0xc>)
   d4b64:	681b      	ldr	r3, [r3, #0]
   d4b66:	695b      	ldr	r3, [r3, #20]
   d4b68:	9301      	str	r3, [sp, #4]
   d4b6a:	bd08      	pop	{r3, pc}
   d4b6c:	00030248 	.word	0x00030248

000d4b70 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d4b70:	b508      	push	{r3, lr}
   d4b72:	4b02      	ldr	r3, [pc, #8]	; (d4b7c <os_mutex_create+0xc>)
   d4b74:	681b      	ldr	r3, [r3, #0]
   d4b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4b78:	9301      	str	r3, [sp, #4]
   d4b7a:	bd08      	pop	{r3, pc}
   d4b7c:	00030248 	.word	0x00030248

000d4b80 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4b80:	b508      	push	{r3, lr}
   d4b82:	4b02      	ldr	r3, [pc, #8]	; (d4b8c <os_mutex_recursive_create+0xc>)
   d4b84:	681b      	ldr	r3, [r3, #0]
   d4b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4b88:	9301      	str	r3, [sp, #4]
   d4b8a:	bd08      	pop	{r3, pc}
   d4b8c:	00030248 	.word	0x00030248

000d4b90 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4b90:	b508      	push	{r3, lr}
   d4b92:	4b02      	ldr	r3, [pc, #8]	; (d4b9c <HAL_RNG_GetRandomNumber+0xc>)
   d4b94:	681b      	ldr	r3, [r3, #0]
   d4b96:	685b      	ldr	r3, [r3, #4]
   d4b98:	9301      	str	r3, [sp, #4]
   d4b9a:	bd08      	pop	{r3, pc}
   d4b9c:	00030218 	.word	0x00030218

000d4ba0 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d4ba0:	b508      	push	{r3, lr}
   d4ba2:	4b02      	ldr	r3, [pc, #8]	; (d4bac <HAL_Delay_Microseconds+0xc>)
   d4ba4:	681b      	ldr	r3, [r3, #0]
   d4ba6:	68db      	ldr	r3, [r3, #12]
   d4ba8:	9301      	str	r3, [sp, #4]
   d4baa:	bd08      	pop	{r3, pc}
   d4bac:	00030218 	.word	0x00030218

000d4bb0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4bb0:	b508      	push	{r3, lr}
   d4bb2:	4b02      	ldr	r3, [pc, #8]	; (d4bbc <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4bb4:	681b      	ldr	r3, [r3, #0]
   d4bb6:	695b      	ldr	r3, [r3, #20]
   d4bb8:	9301      	str	r3, [sp, #4]
   d4bba:	bd08      	pop	{r3, pc}
   d4bbc:	00030218 	.word	0x00030218

000d4bc0 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d4bc0:	b508      	push	{r3, lr}
   d4bc2:	4b02      	ldr	r3, [pc, #8]	; (d4bcc <if_index_to_name+0xc>)
   d4bc4:	681b      	ldr	r3, [r3, #0]
   d4bc6:	695b      	ldr	r3, [r3, #20]
   d4bc8:	9301      	str	r3, [sp, #4]
   d4bca:	bd08      	pop	{r3, pc}
   d4bcc:	0003026c 	.word	0x0003026c

000d4bd0 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4bd0:	b508      	push	{r3, lr}
   d4bd2:	4b02      	ldr	r3, [pc, #8]	; (d4bdc <HAL_SPI_Init+0xc>)
   d4bd4:	681b      	ldr	r3, [r3, #0]
   d4bd6:	69db      	ldr	r3, [r3, #28]
   d4bd8:	9301      	str	r3, [sp, #4]
   d4bda:	bd08      	pop	{r3, pc}
   d4bdc:	00030230 	.word	0x00030230

000d4be0 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4be0:	b508      	push	{r3, lr}
   d4be2:	4b02      	ldr	r3, [pc, #8]	; (d4bec <HAL_SPI_Is_Enabled+0xc>)
   d4be4:	681b      	ldr	r3, [r3, #0]
   d4be6:	6a1b      	ldr	r3, [r3, #32]
   d4be8:	9301      	str	r3, [sp, #4]
   d4bea:	bd08      	pop	{r3, pc}
   d4bec:	00030230 	.word	0x00030230

000d4bf0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d4bf0:	b508      	push	{r3, lr}
   d4bf2:	4b02      	ldr	r3, [pc, #8]	; (d4bfc <HAL_Pin_Map+0xc>)
   d4bf4:	681b      	ldr	r3, [r3, #0]
   d4bf6:	681b      	ldr	r3, [r3, #0]
   d4bf8:	9301      	str	r3, [sp, #4]
   d4bfa:	bd08      	pop	{r3, pc}
   d4bfc:	0003022c 	.word	0x0003022c

000d4c00 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d4c00:	b508      	push	{r3, lr}
   d4c02:	4b02      	ldr	r3, [pc, #8]	; (d4c0c <HAL_Validate_Pin_Function+0xc>)
   d4c04:	681b      	ldr	r3, [r3, #0]
   d4c06:	685b      	ldr	r3, [r3, #4]
   d4c08:	9301      	str	r3, [sp, #4]
   d4c0a:	bd08      	pop	{r3, pc}
   d4c0c:	0003022c 	.word	0x0003022c

000d4c10 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4c10:	b508      	push	{r3, lr}
   d4c12:	4b02      	ldr	r3, [pc, #8]	; (d4c1c <HAL_Pin_Mode+0xc>)
   d4c14:	681b      	ldr	r3, [r3, #0]
   d4c16:	689b      	ldr	r3, [r3, #8]
   d4c18:	9301      	str	r3, [sp, #4]
   d4c1a:	bd08      	pop	{r3, pc}
   d4c1c:	0003022c 	.word	0x0003022c

000d4c20 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d4c20:	b508      	push	{r3, lr}
   d4c22:	4b02      	ldr	r3, [pc, #8]	; (d4c2c <HAL_ADC_Read+0xc>)
   d4c24:	681b      	ldr	r3, [r3, #0]
   d4c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4c28:	9301      	str	r3, [sp, #4]
   d4c2a:	bd08      	pop	{r3, pc}
   d4c2c:	0003022c 	.word	0x0003022c

000d4c30 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4c30:	b508      	push	{r3, lr}
   d4c32:	4b02      	ldr	r3, [pc, #8]	; (d4c3c <netdb_freeaddrinfo+0xc>)
   d4c34:	681b      	ldr	r3, [r3, #0]
   d4c36:	689b      	ldr	r3, [r3, #8]
   d4c38:	9301      	str	r3, [sp, #4]
   d4c3a:	bd08      	pop	{r3, pc}
   d4c3c:	00030268 	.word	0x00030268

000d4c40 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4c40:	b508      	push	{r3, lr}
   d4c42:	4b02      	ldr	r3, [pc, #8]	; (d4c4c <netdb_getaddrinfo+0xc>)
   d4c44:	681b      	ldr	r3, [r3, #0]
   d4c46:	68db      	ldr	r3, [r3, #12]
   d4c48:	9301      	str	r3, [sp, #4]
   d4c4a:	bd08      	pop	{r3, pc}
   d4c4c:	00030268 	.word	0x00030268

000d4c50 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d4c50:	b508      	push	{r3, lr}
   d4c52:	4b02      	ldr	r3, [pc, #8]	; (d4c5c <panic_+0xc>)
   d4c54:	681b      	ldr	r3, [r3, #0]
   d4c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4c58:	9301      	str	r3, [sp, #4]
   d4c5a:	bd08      	pop	{r3, pc}
   d4c5c:	00030260 	.word	0x00030260

000d4c60 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d4c60:	b508      	push	{r3, lr}
   d4c62:	4b02      	ldr	r3, [pc, #8]	; (d4c6c <log_message+0xc>)
   d4c64:	681b      	ldr	r3, [r3, #0]
   d4c66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4c68:	9301      	str	r3, [sp, #4]
   d4c6a:	bd08      	pop	{r3, pc}
   d4c6c:	00030260 	.word	0x00030260

000d4c70 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4c70:	b508      	push	{r3, lr}
   d4c72:	4b02      	ldr	r3, [pc, #8]	; (d4c7c <spark_set_random_seed_from_cloud_handler+0xc>)
   d4c74:	681b      	ldr	r3, [r3, #0]
   d4c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4c78:	9301      	str	r3, [sp, #4]
   d4c7a:	bd08      	pop	{r3, pc}
   d4c7c:	00030244 	.word	0x00030244

000d4c80 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4c80:	b508      	push	{r3, lr}
   d4c82:	4b02      	ldr	r3, [pc, #8]	; (d4c8c <network_connect+0xc>)
   d4c84:	681b      	ldr	r3, [r3, #0]
   d4c86:	685b      	ldr	r3, [r3, #4]
   d4c88:	9301      	str	r3, [sp, #4]
   d4c8a:	bd08      	pop	{r3, pc}
   d4c8c:	00030240 	.word	0x00030240

000d4c90 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4c90:	b508      	push	{r3, lr}
   d4c92:	4b02      	ldr	r3, [pc, #8]	; (d4c9c <network_connecting+0xc>)
   d4c94:	681b      	ldr	r3, [r3, #0]
   d4c96:	689b      	ldr	r3, [r3, #8]
   d4c98:	9301      	str	r3, [sp, #4]
   d4c9a:	bd08      	pop	{r3, pc}
   d4c9c:	00030240 	.word	0x00030240

000d4ca0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4ca0:	b508      	push	{r3, lr}
   d4ca2:	4b02      	ldr	r3, [pc, #8]	; (d4cac <network_disconnect+0xc>)
   d4ca4:	681b      	ldr	r3, [r3, #0]
   d4ca6:	68db      	ldr	r3, [r3, #12]
   d4ca8:	9301      	str	r3, [sp, #4]
   d4caa:	bd08      	pop	{r3, pc}
   d4cac:	00030240 	.word	0x00030240

000d4cb0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4cb0:	b508      	push	{r3, lr}
   d4cb2:	4b02      	ldr	r3, [pc, #8]	; (d4cbc <network_ready+0xc>)
   d4cb4:	681b      	ldr	r3, [r3, #0]
   d4cb6:	691b      	ldr	r3, [r3, #16]
   d4cb8:	9301      	str	r3, [sp, #4]
   d4cba:	bd08      	pop	{r3, pc}
   d4cbc:	00030240 	.word	0x00030240

000d4cc0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4cc0:	b508      	push	{r3, lr}
   d4cc2:	4b02      	ldr	r3, [pc, #8]	; (d4ccc <network_on+0xc>)
   d4cc4:	681b      	ldr	r3, [r3, #0]
   d4cc6:	695b      	ldr	r3, [r3, #20]
   d4cc8:	9301      	str	r3, [sp, #4]
   d4cca:	bd08      	pop	{r3, pc}
   d4ccc:	00030240 	.word	0x00030240

000d4cd0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4cd0:	b508      	push	{r3, lr}
   d4cd2:	4b02      	ldr	r3, [pc, #8]	; (d4cdc <network_off+0xc>)
   d4cd4:	681b      	ldr	r3, [r3, #0]
   d4cd6:	699b      	ldr	r3, [r3, #24]
   d4cd8:	9301      	str	r3, [sp, #4]
   d4cda:	bd08      	pop	{r3, pc}
   d4cdc:	00030240 	.word	0x00030240

000d4ce0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4ce0:	b508      	push	{r3, lr}
   d4ce2:	4b02      	ldr	r3, [pc, #8]	; (d4cec <network_listen+0xc>)
   d4ce4:	681b      	ldr	r3, [r3, #0]
   d4ce6:	69db      	ldr	r3, [r3, #28]
   d4ce8:	9301      	str	r3, [sp, #4]
   d4cea:	bd08      	pop	{r3, pc}
   d4cec:	00030240 	.word	0x00030240

000d4cf0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4cf0:	b508      	push	{r3, lr}
   d4cf2:	4b02      	ldr	r3, [pc, #8]	; (d4cfc <network_listening+0xc>)
   d4cf4:	681b      	ldr	r3, [r3, #0]
   d4cf6:	6a1b      	ldr	r3, [r3, #32]
   d4cf8:	9301      	str	r3, [sp, #4]
   d4cfa:	bd08      	pop	{r3, pc}
   d4cfc:	00030240 	.word	0x00030240

000d4d00 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4d00:	b508      	push	{r3, lr}
   d4d02:	4b02      	ldr	r3, [pc, #8]	; (d4d0c <network_set_listen_timeout+0xc>)
   d4d04:	681b      	ldr	r3, [r3, #0]
   d4d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4d08:	9301      	str	r3, [sp, #4]
   d4d0a:	bd08      	pop	{r3, pc}
   d4d0c:	00030240 	.word	0x00030240

000d4d10 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4d10:	b508      	push	{r3, lr}
   d4d12:	4b02      	ldr	r3, [pc, #8]	; (d4d1c <network_get_listen_timeout+0xc>)
   d4d14:	681b      	ldr	r3, [r3, #0]
   d4d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4d18:	9301      	str	r3, [sp, #4]
   d4d1a:	bd08      	pop	{r3, pc}
   d4d1c:	00030240 	.word	0x00030240

000d4d20 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4d20:	b508      	push	{r3, lr}
   d4d22:	4b02      	ldr	r3, [pc, #8]	; (d4d2c <set_system_mode+0xc>)
   d4d24:	681b      	ldr	r3, [r3, #0]
   d4d26:	685b      	ldr	r3, [r3, #4]
   d4d28:	9301      	str	r3, [sp, #4]
   d4d2a:	bd08      	pop	{r3, pc}
   d4d2c:	00030220 	.word	0x00030220

000d4d30 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4d30:	b508      	push	{r3, lr}
   d4d32:	4b02      	ldr	r3, [pc, #8]	; (d4d3c <system_delay_ms+0xc>)
   d4d34:	681b      	ldr	r3, [r3, #0]
   d4d36:	695b      	ldr	r3, [r3, #20]
   d4d38:	9301      	str	r3, [sp, #4]
   d4d3a:	bd08      	pop	{r3, pc}
   d4d3c:	00030220 	.word	0x00030220

000d4d40 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4d40:	b508      	push	{r3, lr}
   d4d42:	4b03      	ldr	r3, [pc, #12]	; (d4d50 <system_ctrl_set_app_request_handler+0x10>)
   d4d44:	681b      	ldr	r3, [r3, #0]
   d4d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4d4a:	9301      	str	r3, [sp, #4]
   d4d4c:	bd08      	pop	{r3, pc}
   d4d4e:	0000      	.short	0x0000
   d4d50:	00030220 	.word	0x00030220

000d4d54 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4d54:	b508      	push	{r3, lr}
   d4d56:	4b03      	ldr	r3, [pc, #12]	; (d4d64 <system_ctrl_set_result+0x10>)
   d4d58:	681b      	ldr	r3, [r3, #0]
   d4d5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4d5e:	9301      	str	r3, [sp, #4]
   d4d60:	bd08      	pop	{r3, pc}
   d4d62:	0000      	.short	0x0000
   d4d64:	00030220 	.word	0x00030220

000d4d68 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4d68:	b508      	push	{r3, lr}
   d4d6a:	4b02      	ldr	r3, [pc, #8]	; (d4d74 <malloc+0xc>)
   d4d6c:	681b      	ldr	r3, [r3, #0]
   d4d6e:	681b      	ldr	r3, [r3, #0]
   d4d70:	9301      	str	r3, [sp, #4]
   d4d72:	bd08      	pop	{r3, pc}
   d4d74:	0003021c 	.word	0x0003021c

000d4d78 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4d78:	b508      	push	{r3, lr}
   d4d7a:	4b02      	ldr	r3, [pc, #8]	; (d4d84 <free+0xc>)
   d4d7c:	681b      	ldr	r3, [r3, #0]
   d4d7e:	685b      	ldr	r3, [r3, #4]
   d4d80:	9301      	str	r3, [sp, #4]
   d4d82:	bd08      	pop	{r3, pc}
   d4d84:	0003021c 	.word	0x0003021c

000d4d88 <sprintf>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d4d88:	b508      	push	{r3, lr}
   d4d8a:	4b02      	ldr	r3, [pc, #8]	; (d4d94 <sprintf+0xc>)
   d4d8c:	681b      	ldr	r3, [r3, #0]
   d4d8e:	68db      	ldr	r3, [r3, #12]
   d4d90:	9301      	str	r3, [sp, #4]
   d4d92:	bd08      	pop	{r3, pc}
   d4d94:	0003021c 	.word	0x0003021c

000d4d98 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d4d98:	b508      	push	{r3, lr}
   d4d9a:	4b02      	ldr	r3, [pc, #8]	; (d4da4 <__errno+0xc>)
   d4d9c:	681b      	ldr	r3, [r3, #0]
   d4d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4da0:	9301      	str	r3, [sp, #4]
   d4da2:	bd08      	pop	{r3, pc}
   d4da4:	0003021c 	.word	0x0003021c

000d4da8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d4da8:	2300      	movs	r3, #0
   d4daa:	461a      	mov	r2, r3
   d4dac:	6840      	ldr	r0, [r0, #4]
   d4dae:	f7ff bf67 	b.w	d4c80 <network_connect>

000d4db2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d4db2:	2200      	movs	r2, #0
   d4db4:	2102      	movs	r1, #2
   d4db6:	6840      	ldr	r0, [r0, #4]
   d4db8:	f7ff bf72 	b.w	d4ca0 <network_disconnect>

000d4dbc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d4dbc:	2200      	movs	r2, #0
   d4dbe:	4611      	mov	r1, r2
   d4dc0:	6840      	ldr	r0, [r0, #4]
   d4dc2:	f7ff bf65 	b.w	d4c90 <network_connecting>

000d4dc6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d4dc6:	2200      	movs	r2, #0
   d4dc8:	4611      	mov	r1, r2
   d4dca:	6840      	ldr	r0, [r0, #4]
   d4dcc:	f7ff bf70 	b.w	d4cb0 <network_ready>

000d4dd0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d4dd0:	2300      	movs	r3, #0
   d4dd2:	461a      	mov	r2, r3
   d4dd4:	4619      	mov	r1, r3
   d4dd6:	6840      	ldr	r0, [r0, #4]
   d4dd8:	f7ff bf72 	b.w	d4cc0 <network_on>

000d4ddc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d4ddc:	2300      	movs	r3, #0
   d4dde:	461a      	mov	r2, r3
   d4de0:	4619      	mov	r1, r3
   d4de2:	6840      	ldr	r0, [r0, #4]
   d4de4:	f7ff bf74 	b.w	d4cd0 <network_off>

000d4de8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d4de8:	2200      	movs	r2, #0
   d4dea:	f081 0101 	eor.w	r1, r1, #1
   d4dee:	6840      	ldr	r0, [r0, #4]
   d4df0:	f7ff bf76 	b.w	d4ce0 <network_listen>

000d4df4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d4df4:	2200      	movs	r2, #0
   d4df6:	6840      	ldr	r0, [r0, #4]
   d4df8:	f7ff bf82 	b.w	d4d00 <network_set_listen_timeout>

000d4dfc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d4dfc:	2200      	movs	r2, #0
   d4dfe:	4611      	mov	r1, r2
   d4e00:	6840      	ldr	r0, [r0, #4]
   d4e02:	f7ff bf85 	b.w	d4d10 <network_get_listen_timeout>

000d4e06 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d4e06:	2200      	movs	r2, #0
   d4e08:	4611      	mov	r1, r2
   d4e0a:	6840      	ldr	r0, [r0, #4]
   d4e0c:	f7ff bf70 	b.w	d4cf0 <network_listening>

000d4e10 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d4e10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4e14:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d4e16:	b095      	sub	sp, #84	; 0x54
   d4e18:	4616      	mov	r6, r2
   d4e1a:	460d      	mov	r5, r1
   d4e1c:	4607      	mov	r7, r0
    IPAddress addr;
   d4e1e:	f000 fd27 	bl	d5870 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d4e22:	4621      	mov	r1, r4
   d4e24:	2220      	movs	r2, #32
   d4e26:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4e28:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d4e2a:	f001 ff19 	bl	d6c60 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d4e2e:	2340      	movs	r3, #64	; 0x40
   d4e30:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d4e32:	4621      	mov	r1, r4
   d4e34:	466b      	mov	r3, sp
   d4e36:	aa0c      	add	r2, sp, #48	; 0x30
   d4e38:	4630      	mov	r0, r6
   d4e3a:	f7ff ff01 	bl	d4c40 <netdb_getaddrinfo>
    if (!r) {
   d4e3e:	4604      	mov	r4, r0
   d4e40:	2800      	cmp	r0, #0
   d4e42:	d144      	bne.n	d4ece <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4e44:	4602      	mov	r2, r0
   d4e46:	2101      	movs	r1, #1
   d4e48:	6868      	ldr	r0, [r5, #4]
   d4e4a:	f7ff ff31 	bl	d4cb0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4e4e:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4e50:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4e52:	4622      	mov	r2, r4
   d4e54:	6868      	ldr	r0, [r5, #4]
   d4e56:	f7ff ff2b 	bl	d4cb0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4e5a:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4e5c:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d4e5e:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4e60:	2e00      	cmp	r6, #0
   d4e62:	d034      	beq.n	d4ece <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d4e64:	2900      	cmp	r1, #0
   d4e66:	d132      	bne.n	d4ece <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d4e68:	6873      	ldr	r3, [r6, #4]
   d4e6a:	2b02      	cmp	r3, #2
   d4e6c:	d002      	beq.n	d4e74 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d4e6e:	2b0a      	cmp	r3, #10
   d4e70:	d009      	beq.n	d4e86 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d4e72:	e02a      	b.n	d4eca <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d4e74:	f1b8 0f00 	cmp.w	r8, #0
   d4e78:	d027      	beq.n	d4eca <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d4e7a:	6971      	ldr	r1, [r6, #20]
   d4e7c:	4638      	mov	r0, r7
   d4e7e:	3104      	adds	r1, #4
   d4e80:	f000 fd39 	bl	d58f6 <_ZN9IPAddressaSEPKh>
   d4e84:	e020      	b.n	d4ec8 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d4e86:	f1b9 0f00 	cmp.w	r9, #0
   d4e8a:	d01e      	beq.n	d4eca <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d4e8c:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d4e8e:	2211      	movs	r2, #17
   d4e90:	a801      	add	r0, sp, #4
   d4e92:	f001 fee5 	bl	d6c60 <memset>
                    a.v = 6;
   d4e96:	2306      	movs	r3, #6
   d4e98:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d4e9c:	ad01      	add	r5, sp, #4
   d4e9e:	f104 0308 	add.w	r3, r4, #8
   d4ea2:	3418      	adds	r4, #24
   d4ea4:	6818      	ldr	r0, [r3, #0]
   d4ea6:	6859      	ldr	r1, [r3, #4]
   d4ea8:	462a      	mov	r2, r5
   d4eaa:	c203      	stmia	r2!, {r0, r1}
   d4eac:	3308      	adds	r3, #8
   d4eae:	42a3      	cmp	r3, r4
   d4eb0:	4615      	mov	r5, r2
   d4eb2:	d1f7      	bne.n	d4ea4 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d4eb4:	a901      	add	r1, sp, #4
   d4eb6:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d4eb8:	ad07      	add	r5, sp, #28
   d4eba:	f000 fce7 	bl	d588c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d4ebe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4ec0:	1d3c      	adds	r4, r7, #4
   d4ec2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4ec4:	682b      	ldr	r3, [r5, #0]
   d4ec6:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d4ec8:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4eca:	69f6      	ldr	r6, [r6, #28]
   d4ecc:	e7c8      	b.n	d4e60 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d4ece:	9800      	ldr	r0, [sp, #0]
   d4ed0:	f7ff feae 	bl	d4c30 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d4ed4:	4638      	mov	r0, r7
   d4ed6:	b015      	add	sp, #84	; 0x54
   d4ed8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d4edc <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4edc:	4b02      	ldr	r3, [pc, #8]	; (d4ee8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d4ede:	4a03      	ldr	r2, [pc, #12]	; (d4eec <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d4ee0:	601a      	str	r2, [r3, #0]
   d4ee2:	2200      	movs	r2, #0
   d4ee4:	605a      	str	r2, [r3, #4]
   d4ee6:	4770      	bx	lr
   d4ee8:	2003e3d4 	.word	0x2003e3d4
   d4eec:	000d7090 	.word	0x000d7090

000d4ef0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d4ef0:	2200      	movs	r2, #0
   d4ef2:	4611      	mov	r1, r2
   d4ef4:	6840      	ldr	r0, [r0, #4]
   d4ef6:	f7ff bedb 	b.w	d4cb0 <network_ready>

000d4efa <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4efa:	2200      	movs	r2, #0
   d4efc:	4611      	mov	r1, r2
   d4efe:	6840      	ldr	r0, [r0, #4]
   d4f00:	f7ff bef6 	b.w	d4cf0 <network_listening>

000d4f04 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4f04:	2200      	movs	r2, #0
   d4f06:	4611      	mov	r1, r2
   d4f08:	6840      	ldr	r0, [r0, #4]
   d4f0a:	f7ff bf01 	b.w	d4d10 <network_get_listen_timeout>

000d4f0e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4f0e:	2200      	movs	r2, #0
   d4f10:	6840      	ldr	r0, [r0, #4]
   d4f12:	f7ff bef5 	b.w	d4d00 <network_set_listen_timeout>

000d4f16 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4f16:	2200      	movs	r2, #0
   d4f18:	f081 0101 	eor.w	r1, r1, #1
   d4f1c:	6840      	ldr	r0, [r0, #4]
   d4f1e:	f7ff bedf 	b.w	d4ce0 <network_listen>

000d4f22 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d4f22:	2300      	movs	r3, #0
   d4f24:	461a      	mov	r2, r3
   d4f26:	4619      	mov	r1, r3
   d4f28:	6840      	ldr	r0, [r0, #4]
   d4f2a:	f7ff bed1 	b.w	d4cd0 <network_off>

000d4f2e <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d4f2e:	2300      	movs	r3, #0
   d4f30:	461a      	mov	r2, r3
   d4f32:	4619      	mov	r1, r3
   d4f34:	6840      	ldr	r0, [r0, #4]
   d4f36:	f7ff bec3 	b.w	d4cc0 <network_on>

000d4f3a <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4f3a:	2200      	movs	r2, #0
   d4f3c:	4611      	mov	r1, r2
   d4f3e:	6840      	ldr	r0, [r0, #4]
   d4f40:	f7ff bea6 	b.w	d4c90 <network_connecting>

000d4f44 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4f44:	2200      	movs	r2, #0
   d4f46:	2102      	movs	r1, #2
   d4f48:	6840      	ldr	r0, [r0, #4]
   d4f4a:	f7ff bea9 	b.w	d4ca0 <network_disconnect>

000d4f4e <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4f4e:	2300      	movs	r3, #0
   d4f50:	461a      	mov	r2, r3
   d4f52:	6840      	ldr	r0, [r0, #4]
   d4f54:	f7ff be94 	b.w	d4c80 <network_connect>

000d4f58 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d4f58:	4b02      	ldr	r3, [pc, #8]	; (d4f64 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d4f5a:	2204      	movs	r2, #4
   d4f5c:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d4f5e:	4a02      	ldr	r2, [pc, #8]	; (d4f68 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d4f60:	601a      	str	r2, [r3, #0]
   d4f62:	4770      	bx	lr
   d4f64:	2003e3dc 	.word	0x2003e3dc
   d4f68:	000d70c4 	.word	0x000d70c4

000d4f6c <_ZN9TCPClient5writeEh>:
    done.dismiss();
    // Why not 0?
    return 1;
}

size_t TCPClient::write(uint8_t b) {
   d4f6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4f6e:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d4f70:	6803      	ldr	r3, [r0, #0]
    done.dismiss();
    // Why not 0?
    return 1;
}

size_t TCPClient::write(uint8_t b) {
   d4f72:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d4f76:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d4f78:	2201      	movs	r2, #1
   d4f7a:	f04f 33ff 	mov.w	r3, #4294967295
   d4f7e:	4621      	mov	r1, r4
   d4f80:	47a8      	blx	r5
}
   d4f82:	b003      	add	sp, #12
   d4f84:	bd30      	pop	{r4, r5, pc}

000d4f86 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d4f86:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d4f88:	6803      	ldr	r3, [r0, #0]
   d4f8a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d4f8c:	f04f 33ff 	mov.w	r3, #4294967295
   d4f90:	46a4      	mov	ip, r4
}
   d4f92:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d4f96:	4760      	bx	ip

000d4f98 <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d4f98:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4f9a:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   d4f9c:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d4f9e:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   d4fa2:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d4fa4:	4621      	mov	r1, r4
   d4fa6:	4613      	mov	r3, r2
   d4fa8:	2201      	movs	r2, #1
   d4faa:	47a8      	blx	r5
}
   d4fac:	b003      	add	sp, #12
   d4fae:	bd30      	pop	{r4, r5, pc}

000d4fb0 <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   d4fb0:	4770      	bx	lr

000d4fb2 <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d4fb2:	b538      	push	{r3, r4, r5, lr}
   d4fb4:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d4fb6:	681a      	ldr	r2, [r3, #0]
   d4fb8:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d4fba:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   d4fbc:	da05      	bge.n	d4fca <_ZN9TCPClient9connectedEv+0x18>
   d4fbe:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d4fc2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d4fc6:	429a      	cmp	r2, r3
   d4fc8:	d001      	beq.n	d4fce <_ZN9TCPClient9connectedEv+0x1c>
   d4fca:	2501      	movs	r5, #1
   d4fcc:	e00b      	b.n	d4fe6 <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   d4fce:	6803      	ldr	r3, [r0, #0]
   d4fd0:	691b      	ldr	r3, [r3, #16]
   d4fd2:	4798      	blx	r3
   d4fd4:	2800      	cmp	r0, #0
   d4fd6:	bf14      	ite	ne
   d4fd8:	2501      	movne	r5, #1
   d4fda:	2500      	moveq	r5, #0
        if (!rv) {
   d4fdc:	d103      	bne.n	d4fe6 <_ZN9TCPClient9connectedEv+0x34>
            stop();
   d4fde:	6823      	ldr	r3, [r4, #0]
   d4fe0:	4620      	mov	r0, r4
   d4fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4fe4:	4798      	blx	r3
        }
    }
    return rv;
}
   d4fe6:	4628      	mov	r0, r5
   d4fe8:	bd38      	pop	{r3, r4, r5, pc}

000d4fea <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d4fea:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   d4fec:	6818      	ldr	r0, [r3, #0]
}
   d4fee:	43c0      	mvns	r0, r0
   d4ff0:	0fc0      	lsrs	r0, r0, #31
   d4ff2:	4770      	bx	lr

000d4ff4 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d4ff4:	4770      	bx	lr

000d4ff6 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d4ff6:	2000      	movs	r0, #0
   d4ff8:	4770      	bx	lr

000d4ffa <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d4ffa:	b510      	push	{r4, lr}
   d4ffc:	4604      	mov	r4, r0
   d4ffe:	f7ff f84c 	bl	d409a <_ZdlPv>
   d5002:	4620      	mov	r0, r4
   d5004:	bd10      	pop	{r4, pc}

000d5006 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d5006:	f7ff b848 	b.w	d409a <_ZdlPv>
	...

000d500c <_ZN9TCPClient7connectEPKctm>:
TCPClient::TCPClient(sock_handle_t sock)
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d500c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5010:	4698      	mov	r8, r3
    stop();
   d5012:	6803      	ldr	r3, [r0, #0]
TCPClient::TCPClient(sock_handle_t sock)
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d5014:	b093      	sub	sp, #76	; 0x4c
    stop();
   d5016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
TCPClient::TCPClient(sock_handle_t sock)
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d5018:	460c      	mov	r4, r1
   d501a:	4606      	mov	r6, r0
   d501c:	4617      	mov	r7, r2
    stop();
   d501e:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   d5020:	ab12      	add	r3, sp, #72	; 0x48
   d5022:	2500      	movs	r5, #0
   d5024:	f843 5d48 	str.w	r5, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d5028:	462a      	mov	r2, r5
   d502a:	4629      	mov	r1, r5
   d502c:	4620      	mov	r0, r4
   d502e:	f7ff fe07 	bl	d4c40 <netdb_getaddrinfo>
   d5032:	2800      	cmp	r0, #0
   d5034:	db3a      	blt.n	d50ac <_ZN9TCPClient7connectEPKctm+0xa0>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d5036:	9b00      	ldr	r3, [sp, #0]
   d5038:	2b00      	cmp	r3, #0
   d503a:	d039      	beq.n	d50b0 <_ZN9TCPClient7connectEPKctm+0xa4>
   d503c:	695b      	ldr	r3, [r3, #20]
   d503e:	2b00      	cmp	r3, #0
   d5040:	d036      	beq.n	d50b0 <_ZN9TCPClient7connectEPKctm+0xa4>
        IPAddress addr;
   d5042:	a806      	add	r0, sp, #24
   d5044:	f000 fc14 	bl	d5870 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d5048:	9b00      	ldr	r3, [sp, #0]
   d504a:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d504c:	7863      	ldrb	r3, [r4, #1]
   d504e:	2b02      	cmp	r3, #2
   d5050:	d101      	bne.n	d5056 <_ZN9TCPClient7connectEPKctm+0x4a>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d5052:	1d21      	adds	r1, r4, #4
   d5054:	e013      	b.n	d507e <_ZN9TCPClient7connectEPKctm+0x72>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d5056:	2b0a      	cmp	r3, #10
   d5058:	d114      	bne.n	d5084 <_ZN9TCPClient7connectEPKctm+0x78>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d505a:	2211      	movs	r2, #17
   d505c:	4629      	mov	r1, r5
   d505e:	a801      	add	r0, sp, #4
   d5060:	f001 fdfe 	bl	d6c60 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d5064:	68a3      	ldr	r3, [r4, #8]
   d5066:	bb33      	cbnz	r3, d50b6 <_ZN9TCPClient7connectEPKctm+0xaa>
   d5068:	68e3      	ldr	r3, [r4, #12]
   d506a:	bb23      	cbnz	r3, d50b6 <_ZN9TCPClient7connectEPKctm+0xaa>
   d506c:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d5070:	6925      	ldr	r5, [r4, #16]
   d5072:	f7ff fd55 	bl	d4b20 <inet_htonl>
   d5076:	4285      	cmp	r5, r0
   d5078:	d11d      	bne.n	d50b6 <_ZN9TCPClient7connectEPKctm+0xaa>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d507a:	f104 0114 	add.w	r1, r4, #20
   d507e:	a806      	add	r0, sp, #24
   d5080:	f000 fc39 	bl	d58f6 <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d5084:	a806      	add	r0, sp, #24
   d5086:	f000 fc13 	bl	d58b0 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d508a:	b188      	cbz	r0, d50b0 <_ZN9TCPClient7connectEPKctm+0xa4>
            return connect(addr, port, nif);
   d508c:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d508e:	ad07      	add	r5, sp, #28
   d5090:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d5094:	4b18      	ldr	r3, [pc, #96]	; (d50f8 <_ZN9TCPClient7connectEPKctm+0xec>)
   d5096:	930c      	str	r3, [sp, #48]	; 0x30
   d5098:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d509a:	ac0d      	add	r4, sp, #52	; 0x34
   d509c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d509e:	682b      	ldr	r3, [r5, #0]
   d50a0:	7023      	strb	r3, [r4, #0]
   d50a2:	463a      	mov	r2, r7
   d50a4:	4643      	mov	r3, r8
   d50a6:	a90c      	add	r1, sp, #48	; 0x30
   d50a8:	4630      	mov	r0, r6
   d50aa:	47c8      	blx	r9
   d50ac:	4604      	mov	r4, r0
   d50ae:	e01c      	b.n	d50ea <_ZN9TCPClient7connectEPKctm+0xde>
        }
    }

    return -1;
   d50b0:	f04f 34ff 	mov.w	r4, #4294967295
   d50b4:	e019      	b.n	d50ea <_ZN9TCPClient7connectEPKctm+0xde>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d50b6:	f104 0308 	add.w	r3, r4, #8
   d50ba:	ad01      	add	r5, sp, #4
   d50bc:	3418      	adds	r4, #24
   d50be:	6818      	ldr	r0, [r3, #0]
   d50c0:	6859      	ldr	r1, [r3, #4]
   d50c2:	462a      	mov	r2, r5
   d50c4:	c203      	stmia	r2!, {r0, r1}
   d50c6:	3308      	adds	r3, #8
   d50c8:	42a3      	cmp	r3, r4
   d50ca:	4615      	mov	r5, r2
   d50cc:	d1f7      	bne.n	d50be <_ZN9TCPClient7connectEPKctm+0xb2>
            a.v = 6;
   d50ce:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d50d0:	a901      	add	r1, sp, #4
   d50d2:	a80c      	add	r0, sp, #48	; 0x30
   d50d4:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d50d6:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d50da:	f000 fbd7 	bl	d588c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d50de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d50e0:	ac07      	add	r4, sp, #28
   d50e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d50e4:	682b      	ldr	r3, [r5, #0]
   d50e6:	7023      	strb	r3, [r4, #0]
   d50e8:	e7cc      	b.n	d5084 <_ZN9TCPClient7connectEPKctm+0x78>

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d50ea:	9800      	ldr	r0, [sp, #0]
   d50ec:	f7ff fda0 	bl	d4c30 <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return -1;
}
   d50f0:	4620      	mov	r0, r4
   d50f2:	b013      	add	sp, #76	; 0x4c
   d50f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d50f8:	000d7214 	.word	0x000d7214

000d50fc <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d50fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d50fe:	4616      	mov	r6, r2
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   d5100:	2200      	movs	r2, #0
   d5102:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   d5104:	9202      	str	r2, [sp, #8]
   d5106:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   d5108:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d510a:	4604      	mov	r4, r0
   d510c:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   d510e:	d008      	beq.n	d5122 <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   d5110:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5114:	fbb3 f1f2 	udiv	r1, r3, r2
   d5118:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d511a:	fb02 3111 	mls	r1, r2, r1, r3
   d511e:	434a      	muls	r2, r1
   d5120:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d5122:	6960      	ldr	r0, [r4, #20]
   d5124:	2308      	movs	r3, #8
   d5126:	9300      	str	r3, [sp, #0]
   d5128:	f241 0205 	movw	r2, #4101	; 0x1005
   d512c:	446b      	add	r3, sp
   d512e:	f640 71ff 	movw	r1, #4095	; 0xfff
   d5132:	6800      	ldr	r0, [r0, #0]
   d5134:	f7ff fc44 	bl	d49c0 <sock_setsockopt>
    if (ret < 0) {
   d5138:	2800      	cmp	r0, #0
   d513a:	db08      	blt.n	d514e <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   d513c:	6960      	ldr	r0, [r4, #20]
   d513e:	2300      	movs	r3, #0
   d5140:	4632      	mov	r2, r6
   d5142:	4629      	mov	r1, r5
   d5144:	6800      	ldr	r0, [r0, #0]
   d5146:	f7ff fc5b 	bl	d4a00 <sock_send>
    if (ret < 0) {
   d514a:	2800      	cmp	r0, #0
   d514c:	da04      	bge.n	d5158 <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   d514e:	f7ff fe23 	bl	d4d98 <__errno>
   d5152:	6803      	ldr	r3, [r0, #0]
   d5154:	6063      	str	r3, [r4, #4]
   d5156:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   d5158:	b004      	add	sp, #16
   d515a:	bd70      	pop	{r4, r5, r6, pc}

000d515c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d515c:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d515e:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5160:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d5162:	689b      	ldr	r3, [r3, #8]
   d5164:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5166:	68a3      	ldr	r3, [r4, #8]
   d5168:	3b01      	subs	r3, #1
   d516a:	60a3      	str	r3, [r4, #8]
   d516c:	b92b      	cbnz	r3, d517a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   d516e:	6823      	ldr	r3, [r4, #0]
   d5170:	4620      	mov	r0, r4
   d5172:	68db      	ldr	r3, [r3, #12]
        }
    }
   d5174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d5178:	4718      	bx	r3
   d517a:	bd10      	pop	{r4, pc}

000d517c <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   d517c:	b570      	push	{r4, r5, r6, lr}
   d517e:	4604      	mov	r4, r0
   d5180:	694d      	ldr	r5, [r1, #20]
   d5182:	4b05      	ldr	r3, [pc, #20]	; (d5198 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d5184:	f844 3b04 	str.w	r3, [r4], #4
   d5188:	358c      	adds	r5, #140	; 0x8c
   d518a:	4606      	mov	r6, r0
   d518c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d518e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5190:	682b      	ldr	r3, [r5, #0]
   d5192:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d5194:	4630      	mov	r0, r6
   d5196:	bd70      	pop	{r4, r5, r6, pc}
   d5198:	000d7214 	.word	0x000d7214

000d519c <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d519c:	b510      	push	{r4, lr}
   d519e:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d51a0:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d51a4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d51a8:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d51aa:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d51ac:	d005      	beq.n	d51ba <_ZN9TCPClient4peekEv+0x1e>
   d51ae:	6962      	ldr	r2, [r4, #20]
   d51b0:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d51b4:	4413      	add	r3, r2
   d51b6:	7918      	ldrb	r0, [r3, #4]
   d51b8:	bd10      	pop	{r4, pc}
   d51ba:	6803      	ldr	r3, [r0, #0]
   d51bc:	691b      	ldr	r3, [r3, #16]
   d51be:	4798      	blx	r3
   d51c0:	2800      	cmp	r0, #0
   d51c2:	d1f4      	bne.n	d51ae <_ZN9TCPClient4peekEv+0x12>
   d51c4:	f04f 30ff 	mov.w	r0, #4294967295
}
   d51c8:	bd10      	pop	{r4, pc}

000d51ca <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d51ca:	b510      	push	{r4, lr}
   d51cc:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d51ce:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d51d2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d51d6:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d51d8:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d51da:	d008      	beq.n	d51ee <_ZN9TCPClient4readEv+0x24>
   d51dc:	6962      	ldr	r2, [r4, #20]
   d51de:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d51e2:	1c59      	adds	r1, r3, #1
   d51e4:	4413      	add	r3, r2
   d51e6:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   d51ea:	7918      	ldrb	r0, [r3, #4]
   d51ec:	bd10      	pop	{r4, pc}
   d51ee:	6803      	ldr	r3, [r0, #0]
   d51f0:	691b      	ldr	r3, [r3, #16]
   d51f2:	4798      	blx	r3
   d51f4:	2800      	cmp	r0, #0
   d51f6:	d1f1      	bne.n	d51dc <_ZN9TCPClient4readEv+0x12>
   d51f8:	f04f 30ff 	mov.w	r0, #4294967295
}
   d51fc:	bd10      	pop	{r4, pc}

000d51fe <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   d51fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5200:	6943      	ldr	r3, [r0, #20]
   d5202:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   d5204:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d5208:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d520c:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   d520e:	4605      	mov	r5, r0
   d5210:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   d5212:	d106      	bne.n	d5222 <_ZN9TCPClient4readEPhj+0x24>
   d5214:	6803      	ldr	r3, [r0, #0]
   d5216:	691b      	ldr	r3, [r3, #16]
   d5218:	4798      	blx	r3
   d521a:	b910      	cbnz	r0, d5222 <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   d521c:	f04f 34ff 	mov.w	r4, #4294967295
   d5220:	e014      	b.n	d524c <_ZN9TCPClient4readEPhj+0x4e>
   d5222:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   d5224:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d5228:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d522c:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d522e:	42bc      	cmp	r4, r7
   d5230:	bf28      	it	cs
   d5232:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d5234:	4419      	add	r1, r3
   d5236:	4622      	mov	r2, r4
   d5238:	3104      	adds	r1, #4
   d523a:	4630      	mov	r0, r6
   d523c:	f001 fcea 	bl	d6c14 <memcpy>
   d5240:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d5242:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d5246:	4423      	add	r3, r4
   d5248:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   d524c:	4620      	mov	r0, r4
   d524e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5250 <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   d5250:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d5252:	2300      	movs	r3, #0
   d5254:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d5258:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d525a:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   d525e:	4770      	bx	lr

000d5260 <_ZN9TCPClient7connectE9IPAddresstm>:
    }

    return -1;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d5260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5264:	4698      	mov	r8, r3
    stop();
   d5266:	6803      	ldr	r3, [r0, #0]
    }

    return -1;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d5268:	460d      	mov	r5, r1
   d526a:	b08a      	sub	sp, #40	; 0x28
    stop();
   d526c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    }

    return -1;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d526e:	4606      	mov	r6, r0
   d5270:	4617      	mov	r7, r2
    stop();
   d5272:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d5274:	7d2b      	ldrb	r3, [r5, #20]
   d5276:	6974      	ldr	r4, [r6, #20]
   d5278:	2b04      	cmp	r3, #4
   d527a:	bf0c      	ite	eq
   d527c:	2002      	moveq	r0, #2
   d527e:	200a      	movne	r0, #10
   d5280:	2206      	movs	r2, #6
   d5282:	2101      	movs	r1, #1
   d5284:	f7ff fbc4 	bl	d4a10 <sock_socket>
   d5288:	6020      	str	r0, [r4, #0]
    CHECK(d_->sock);
   d528a:	6973      	ldr	r3, [r6, #20]
   d528c:	681c      	ldr	r4, [r3, #0]
   d528e:	2c00      	cmp	r4, #0
   d5290:	db5b      	blt.n	d534a <_ZN9TCPClient7connectE9IPAddresstm+0xea>

    flush_buffer();
   d5292:	4630      	mov	r0, r6
   d5294:	f7ff ffdc 	bl	d5250 <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d5298:	f1b8 0f00 	cmp.w	r8, #0
   d529c:	d017      	beq.n	d52ce <_ZN9TCPClient7connectE9IPAddresstm+0x6e>
        struct ifreq ifr = {};
   d529e:	2300      	movs	r3, #0
        CHECK(if_index_to_name(nif, ifr.ifr_name));
   d52a0:	a903      	add	r1, sp, #12
   d52a2:	fa5f f088 	uxtb.w	r0, r8
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   d52a6:	9303      	str	r3, [sp, #12]
   d52a8:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK(if_index_to_name(nif, ifr.ifr_name));
   d52ac:	f7ff fc88 	bl	d4bc0 <if_index_to_name>
   d52b0:	2800      	cmp	r0, #0
   d52b2:	db49      	blt.n	d5348 <_ZN9TCPClient7connectE9IPAddresstm+0xe8>
        CHECK(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)));
   d52b4:	6970      	ldr	r0, [r6, #20]
   d52b6:	2306      	movs	r3, #6
   d52b8:	9300      	str	r3, [sp, #0]
   d52ba:	f241 020b 	movw	r2, #4107	; 0x100b
   d52be:	ab03      	add	r3, sp, #12
   d52c0:	f640 71ff 	movw	r1, #4095	; 0xfff
   d52c4:	6800      	ldr	r0, [r0, #0]
   d52c6:	f7ff fb7b 	bl	d49c0 <sock_setsockopt>
   d52ca:	2800      	cmp	r0, #0
   d52cc:	db3c      	blt.n	d5348 <_ZN9TCPClient7connectE9IPAddresstm+0xe8>
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   d52ce:	241c      	movs	r4, #28
   d52d0:	4622      	mov	r2, r4
   d52d2:	2100      	movs	r1, #0
   d52d4:	a803      	add	r0, sp, #12
   d52d6:	f001 fcc3 	bl	d6c60 <memset>
    if (ip.version() == 4) {
   d52da:	7d2b      	ldrb	r3, [r5, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   d52dc:	f88d 400c 	strb.w	r4, [sp, #12]
        CHECK(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)));
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   d52e0:	2b04      	cmp	r3, #4
   d52e2:	d10c      	bne.n	d52fe <_ZN9TCPClient7connectE9IPAddresstm+0x9e>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d52e4:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   d52e6:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d52e8:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   d52ec:	f7ff fc20 	bl	d4b30 <inet_htons>
   d52f0:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d52f4:	6868      	ldr	r0, [r5, #4]
   d52f6:	f7ff fc13 	bl	d4b20 <inet_htonl>
   d52fa:	9004      	str	r0, [sp, #16]
   d52fc:	e013      	b.n	d5326 <_ZN9TCPClient7connectE9IPAddresstm+0xc6>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d52fe:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   d5300:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d5302:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   d5306:	f7ff fc13 	bl	d4b30 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d530a:	ac05      	add	r4, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   d530c:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d5310:	1d2b      	adds	r3, r5, #4
   d5312:	f105 0714 	add.w	r7, r5, #20
   d5316:	6818      	ldr	r0, [r3, #0]
   d5318:	6859      	ldr	r1, [r3, #4]
   d531a:	4622      	mov	r2, r4
   d531c:	c203      	stmia	r2!, {r0, r1}
   d531e:	3308      	adds	r3, #8
   d5320:	42bb      	cmp	r3, r7
   d5322:	4614      	mov	r4, r2
   d5324:	d1f7      	bne.n	d5316 <_ZN9TCPClient7connectE9IPAddresstm+0xb6>
    }

    // FIXME: timeout?
    CHECK(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)));
   d5326:	6973      	ldr	r3, [r6, #20]
   d5328:	221c      	movs	r2, #28
   d532a:	a903      	add	r1, sp, #12
   d532c:	6818      	ldr	r0, [r3, #0]
   d532e:	f7ff fb57 	bl	d49e0 <sock_connect>
   d5332:	2800      	cmp	r0, #0
   d5334:	db08      	blt.n	d5348 <_ZN9TCPClient7connectE9IPAddresstm+0xe8>
   d5336:	1d2c      	adds	r4, r5, #4
   d5338:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d533a:	6976      	ldr	r6, [r6, #20]
   d533c:	368c      	adds	r6, #140	; 0x8c
   d533e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d5340:	6823      	ldr	r3, [r4, #0]
   d5342:	7033      	strb	r3, [r6, #0]

    d_->remoteIP = ip;

    done.dismiss();
    // Why not 0?
    return 1;
   d5344:	2401      	movs	r4, #1
   d5346:	e004      	b.n	d5352 <_ZN9TCPClient7connectE9IPAddresstm+0xf2>
   d5348:	4604      	mov	r4, r0
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d534a:	6833      	ldr	r3, [r6, #0]
   d534c:	4630      	mov	r0, r6
   d534e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5350:	4798      	blx	r3
    d_->remoteIP = ip;

    done.dismiss();
    // Why not 0?
    return 1;
}
   d5352:	4620      	mov	r0, r4
   d5354:	b00a      	add	sp, #40	; 0x28
   d5356:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d535a <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d535a:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d535c:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d535e:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d5360:	6818      	ldr	r0, [r3, #0]
   d5362:	2800      	cmp	r0, #0
   d5364:	db01      	blt.n	d536a <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d5366:	f7ff fb33 	bl	d49d0 <sock_close>
   d536a:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   d536c:	f04f 32ff 	mov.w	r2, #4294967295
   d5370:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5372:	6960      	ldr	r0, [r4, #20]
   d5374:	2211      	movs	r2, #17
   d5376:	2100      	movs	r1, #0
   d5378:	308c      	adds	r0, #140	; 0x8c
   d537a:	f001 fc71 	bl	d6c60 <memset>
    d_->remoteIP.clear();
    flush_buffer();
   d537e:	4620      	mov	r0, r4
}
   d5380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   d5384:	f7ff bf64 	b.w	d5250 <_ZN9TCPClient12flush_bufferEv>

000d5388 <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d5388:	b530      	push	{r4, r5, lr}
   d538a:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d538c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d5390:	b08b      	sub	sp, #44	; 0x2c
   d5392:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d5394:	b11b      	cbz	r3, d539e <_ZN9TCPClient9availableEv+0x16>
   d5396:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d539a:	429a      	cmp	r2, r3
   d539c:	d040      	beq.n	d5420 <_ZN9TCPClient9availableEv+0x98>
   d539e:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   d53a0:	6818      	ldr	r0, [r3, #0]
   d53a2:	2800      	cmp	r0, #0
   d53a4:	db3f      	blt.n	d5426 <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   d53a6:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   d53aa:	2d7f      	cmp	r5, #127	; 0x7f
   d53ac:	d83b      	bhi.n	d5426 <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d53ae:	1d19      	adds	r1, r3, #4
   d53b0:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d53b4:	2308      	movs	r3, #8
   d53b6:	4429      	add	r1, r5
   d53b8:	f7ff fb1a 	bl	d49f0 <sock_recv>
            if (ret > 0) {
   d53bc:	2800      	cmp	r0, #0
   d53be:	dd0c      	ble.n	d53da <_ZN9TCPClient9availableEv+0x52>
   d53c0:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d53c2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d53c6:	b90a      	cbnz	r2, d53cc <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   d53c8:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d53cc:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   d53ce:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d53d2:	4418      	add	r0, r3
   d53d4:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   d53d8:	e025      	b.n	d5426 <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d53da:	f7ff fcdd 	bl	d4d98 <__errno>
   d53de:	6803      	ldr	r3, [r0, #0]
   d53e0:	2b0b      	cmp	r3, #11
   d53e2:	d020      	beq.n	d5426 <_ZN9TCPClient9availableEv+0x9e>
   d53e4:	f7ff fcd8 	bl	d4d98 <__errno>
   d53e8:	6803      	ldr	r3, [r0, #0]
   d53ea:	2b0b      	cmp	r3, #11
   d53ec:	d01b      	beq.n	d5426 <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   d53ee:	2320      	movs	r3, #32
   d53f0:	2500      	movs	r5, #0
   d53f2:	9302      	str	r3, [sp, #8]
   d53f4:	9503      	str	r5, [sp, #12]
   d53f6:	f7ff fccf 	bl	d4d98 <__errno>
   d53fa:	6803      	ldr	r3, [r0, #0]
   d53fc:	9301      	str	r3, [sp, #4]
   d53fe:	4b0e      	ldr	r3, [pc, #56]	; (d5438 <_ZN9TCPClient9availableEv+0xb0>)
   d5400:	9300      	str	r3, [sp, #0]
   d5402:	aa02      	add	r2, sp, #8
   d5404:	462b      	mov	r3, r5
   d5406:	490d      	ldr	r1, [pc, #52]	; (d543c <_ZN9TCPClient9availableEv+0xb4>)
   d5408:	2032      	movs	r0, #50	; 0x32
   d540a:	f7ff fc29 	bl	d4c60 <log_message>
                    sock_close(d_->sock);
   d540e:	6963      	ldr	r3, [r4, #20]
   d5410:	6818      	ldr	r0, [r3, #0]
   d5412:	f7ff fadd 	bl	d49d0 <sock_close>
   d5416:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d5418:	f04f 32ff 	mov.w	r2, #4294967295
   d541c:	601a      	str	r2, [r3, #0]
   d541e:	e002      	b.n	d5426 <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   d5420:	f7ff ff16 	bl	d5250 <_ZN9TCPClient12flush_bufferEv>
   d5424:	e7bb      	b.n	d539e <_ZN9TCPClient9availableEv+0x16>
   d5426:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   d5428:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d542c:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   d5430:	1a18      	subs	r0, r3, r0
}
   d5432:	b00b      	add	sp, #44	; 0x2c
   d5434:	bd30      	pop	{r4, r5, pc}
   d5436:	bf00      	nop
   d5438:	000d715f 	.word	0x000d715f
   d543c:	000d7158 	.word	0x000d7158

000d5440 <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d5440:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d5442:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d5444:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   d5446:	6001      	str	r1, [r0, #0]
   d5448:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   d544c:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   d5450:	3088      	adds	r0, #136	; 0x88
   d5452:	f000 fa0d 	bl	d5870 <_ZN9IPAddressC1Ev>
}
   d5456:	4620      	mov	r0, r4
   d5458:	bd10      	pop	{r4, pc}
	...

000d545c <_ZN9TCPClientC1Ei>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d545c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d5460:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5462:	2300      	movs	r3, #0
   d5464:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   d5466:	4a14      	ldr	r2, [pc, #80]	; (d54b8 <_ZN9TCPClientC1Ei+0x5c>)
   d5468:	6043      	str	r3, [r0, #4]
   d546a:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d546c:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d546e:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d5470:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5472:	20a0      	movs	r0, #160	; 0xa0
   d5474:	460e      	mov	r6, r1
   d5476:	f7fe fe0e 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d547a:	4605      	mov	r5, r0
   d547c:	b110      	cbz	r0, d5484 <_ZN9TCPClientC1Ei+0x28>
   d547e:	4631      	mov	r1, r6
   d5480:	f7ff ffde 	bl	d5440 <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5484:	2014      	movs	r0, #20
   d5486:	f7fe fe06 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d548a:	4603      	mov	r3, r0
   d548c:	b128      	cbz	r0, d549a <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d548e:	2201      	movs	r2, #1
   d5490:	6042      	str	r2, [r0, #4]
   d5492:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d5494:	4a09      	ldr	r2, [pc, #36]	; (d54bc <_ZN9TCPClientC1Ei+0x60>)
   d5496:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d5498:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d549a:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d549c:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d549e:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d54a0:	b128      	cbz	r0, d54ae <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d54a2:	6843      	ldr	r3, [r0, #4]
   d54a4:	3b01      	subs	r3, #1
   d54a6:	6043      	str	r3, [r0, #4]
   d54a8:	b90b      	cbnz	r3, d54ae <_ZN9TCPClientC1Ei+0x52>
   d54aa:	f7ff fe57 	bl	d515c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   d54ae:	4620      	mov	r0, r4
   d54b0:	f7ff fece 	bl	d5250 <_ZN9TCPClient12flush_bufferEv>
}
   d54b4:	4620      	mov	r0, r4
   d54b6:	bd70      	pop	{r4, r5, r6, pc}
   d54b8:	000d7114 	.word	0x000d7114
   d54bc:	000d70f8 	.word	0x000d70f8

000d54c0 <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d54c0:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d54c2:	f04f 31ff 	mov.w	r1, #4294967295

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d54c6:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d54c8:	f7ff ffc8 	bl	d545c <_ZN9TCPClientC1Ei>
}
   d54cc:	4620      	mov	r0, r4
   d54ce:	bd10      	pop	{r4, pc}

000d54d0 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   d54d0:	b510      	push	{r4, lr}
   d54d2:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d54d4:	6800      	ldr	r0, [r0, #0]
   d54d6:	2800      	cmp	r0, #0
   d54d8:	db01      	blt.n	d54de <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d54da:	f7ff fa79 	bl	d49d0 <sock_close>
    }
}
   d54de:	4620      	mov	r0, r4
   d54e0:	bd10      	pop	{r4, pc}

000d54e2 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d54e2:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d54e4:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   d54e6:	4620      	mov	r0, r4
   d54e8:	f7ff fff2 	bl	d54d0 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   d54ec:	b124      	cbz	r4, d54f8 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d54ee:	4620      	mov	r0, r4
   d54f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d54f4:	f7fe bdd1 	b.w	d409a <_ZdlPv>
   d54f8:	bd10      	pop	{r4, pc}

000d54fa <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d54fa:	2200      	movs	r2, #0
   d54fc:	4611      	mov	r1, r2
   d54fe:	6840      	ldr	r0, [r0, #4]
   d5500:	f7ff bbf6 	b.w	d4cf0 <network_listening>

000d5504 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5504:	2200      	movs	r2, #0
   d5506:	4611      	mov	r1, r2
   d5508:	6840      	ldr	r0, [r0, #4]
   d550a:	f7ff bc01 	b.w	d4d10 <network_get_listen_timeout>

000d550e <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d550e:	2200      	movs	r2, #0
   d5510:	6840      	ldr	r0, [r0, #4]
   d5512:	f7ff bbf5 	b.w	d4d00 <network_set_listen_timeout>

000d5516 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5516:	2200      	movs	r2, #0
   d5518:	f081 0101 	eor.w	r1, r1, #1
   d551c:	6840      	ldr	r0, [r0, #4]
   d551e:	f7ff bbdf 	b.w	d4ce0 <network_listen>

000d5522 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5522:	2300      	movs	r3, #0
   d5524:	461a      	mov	r2, r3
   d5526:	4619      	mov	r1, r3
   d5528:	6840      	ldr	r0, [r0, #4]
   d552a:	f7ff bbd1 	b.w	d4cd0 <network_off>

000d552e <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d552e:	2300      	movs	r3, #0
   d5530:	461a      	mov	r2, r3
   d5532:	4619      	mov	r1, r3
   d5534:	6840      	ldr	r0, [r0, #4]
   d5536:	f7ff bbc3 	b.w	d4cc0 <network_on>

000d553a <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d553a:	2200      	movs	r2, #0
   d553c:	4611      	mov	r1, r2
   d553e:	6840      	ldr	r0, [r0, #4]
   d5540:	f7ff bbb6 	b.w	d4cb0 <network_ready>

000d5544 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5544:	2200      	movs	r2, #0
   d5546:	4611      	mov	r1, r2
   d5548:	6840      	ldr	r0, [r0, #4]
   d554a:	f7ff bba1 	b.w	d4c90 <network_connecting>

000d554e <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d554e:	2200      	movs	r2, #0
   d5550:	2102      	movs	r1, #2
   d5552:	6840      	ldr	r0, [r0, #4]
   d5554:	f7ff bba4 	b.w	d4ca0 <network_disconnect>

000d5558 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5558:	2300      	movs	r3, #0
   d555a:	461a      	mov	r2, r3
   d555c:	6840      	ldr	r0, [r0, #4]
   d555e:	f7ff bb8f 	b.w	d4c80 <network_connect>

000d5562 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d5562:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5564:	4605      	mov	r5, r0
   d5566:	b178      	cbz	r0, d5588 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x26>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5568:	6804      	ldr	r4, [r0, #0]
   d556a:	b144      	cbz	r4, d557e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x1c>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d556c:	68a3      	ldr	r3, [r4, #8]
   d556e:	b11b      	cbz	r3, d5578 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5570:	2203      	movs	r2, #3
   d5572:	4621      	mov	r1, r4
   d5574:	4620      	mov	r0, r4
   d5576:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5578:	4620      	mov	r0, r4
   d557a:	f7fe fd8e 	bl	d409a <_ZdlPv>
   d557e:	4628      	mov	r0, r5
      }
   d5580:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5584:	f7fe bd89 	b.w	d409a <_ZdlPv>
   d5588:	bd38      	pop	{r3, r4, r5, pc}

000d558a <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
   d558a:	b110      	cbz	r0, d5592 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d558c:	6803      	ldr	r3, [r0, #0]
   d558e:	685b      	ldr	r3, [r3, #4]
   d5590:	4718      	bx	r3
   d5592:	4770      	bx	lr

000d5594 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d5594:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5596:	6803      	ldr	r3, [r0, #0]
   d5598:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d559a:	b1bb      	cbz	r3, d55cc <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d559c:	6858      	ldr	r0, [r3, #4]
   d559e:	f7ff facf 	bl	d4b40 <os_thread_is_current>
   d55a2:	b978      	cbnz	r0, d55c4 <_ZN6ThreadD1Ev+0x30>
   d55a4:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d55a6:	7c5a      	ldrb	r2, [r3, #17]
   d55a8:	b912      	cbnz	r2, d55b0 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d55aa:	6858      	ldr	r0, [r3, #4]
   d55ac:	f7ff fad0 	bl	d4b50 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d55b0:	6823      	ldr	r3, [r4, #0]
   d55b2:	6858      	ldr	r0, [r3, #4]
   d55b4:	f7ff fad4 	bl	d4b60 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d55b8:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d55ba:	2300      	movs	r3, #0
   d55bc:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d55be:	b128      	cbz	r0, d55cc <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d55c0:	f7ff ffcf 	bl	d5562 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d55c4:	6820      	ldr	r0, [r4, #0]
   d55c6:	b108      	cbz	r0, d55cc <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d55c8:	f7ff ffcb 	bl	d5562 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>
    }

    ~Thread()
    {
        dispose();
    }
   d55cc:	4620      	mov	r0, r4
   d55ce:	bd10      	pop	{r4, pc}

000d55d0 <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d55d0:	b538      	push	{r3, r4, r5, lr}
   d55d2:	4b0b      	ldr	r3, [pc, #44]	; (d5600 <_ZN5spark9MeshClassD1Ev+0x30>)
   d55d4:	6003      	str	r3, [r0, #0]
   d55d6:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d55d8:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d55dc:	b108      	cbz	r0, d55e2 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d55de:	f7fe fd5e 	bl	d409e <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d55e2:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d55e6:	b12d      	cbz	r5, d55f4 <_ZN5spark9MeshClassD1Ev+0x24>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d55e8:	4628      	mov	r0, r5
   d55ea:	f7ff ffd3 	bl	d5594 <_ZN6ThreadD1Ev>
   d55ee:	4628      	mov	r0, r5
   d55f0:	f7fe fd53 	bl	d409a <_ZdlPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d55f4:	68a0      	ldr	r0, [r4, #8]
   d55f6:	b108      	cbz	r0, d55fc <_ZN5spark9MeshClassD1Ev+0x2c>
	  get_deleter()(__ptr);
   d55f8:	f7ff ffc7 	bl	d558a <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d55fc:	4620      	mov	r0, r4
   d55fe:	bd38      	pop	{r3, r4, r5, pc}
   d5600:	000d7178 	.word	0x000d7178

000d5604 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5604:	b538      	push	{r3, r4, r5, lr}
   d5606:	4c0d      	ldr	r4, [pc, #52]	; (d563c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d5608:	4b0d      	ldr	r3, [pc, #52]	; (d5640 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d560a:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d560c:	2500      	movs	r5, #0
   d560e:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5610:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5614:	6063      	str	r3, [r4, #4]
   d5616:	60a5      	str	r5, [r4, #8]
   d5618:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d561c:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5620:	f7ff faae 	bl	d4b80 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5624:	4b07      	ldr	r3, [pc, #28]	; (d5644 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d5626:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d562a:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d562c:	4620      	mov	r0, r4
   d562e:	4a06      	ldr	r2, [pc, #24]	; (d5648 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d5630:	4906      	ldr	r1, [pc, #24]	; (d564c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d5632:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d5636:	f000 bc91 	b.w	d5f5c <__aeabi_atexit>
   d563a:	bf00      	nop
   d563c:	2003e3e4 	.word	0x2003e3e4
   d5640:	000d7090 	.word	0x000d7090
   d5644:	000d7178 	.word	0x000d7178
   d5648:	2003e2a8 	.word	0x2003e2a8
   d564c:	000d55d1 	.word	0x000d55d1

000d5650 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d5650:	4770      	bx	lr

000d5652 <_ZN8SPIClassD0Ev>:
   d5652:	b510      	push	{r4, lr}
   d5654:	4604      	mov	r4, r0
   d5656:	f7fe fd20 	bl	d409a <_ZdlPv>
   d565a:	4620      	mov	r0, r4
   d565c:	bd10      	pop	{r4, pc}
	...

000d5660 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5660:	b570      	push	{r4, r5, r6, lr}
   d5662:	4b08      	ldr	r3, [pc, #32]	; (d5684 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d5664:	6003      	str	r3, [r0, #0]
   d5666:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d5668:	2500      	movs	r5, #0
   d566a:	460e      	mov	r6, r1
   d566c:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d5670:	f7ff fa7e 	bl	d4b70 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d5674:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d5676:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d5678:	f7ff faaa 	bl	d4bd0 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d567c:	60a5      	str	r5, [r4, #8]
}
   d567e:	4620      	mov	r0, r4
   d5680:	bd70      	pop	{r4, r5, r6, pc}
   d5682:	bf00      	nop
   d5684:	000d71ac 	.word	0x000d71ac

000d5688 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d5688:	7900      	ldrb	r0, [r0, #4]
   d568a:	f7ff baa9 	b.w	d4be0 <HAL_SPI_Is_Enabled>

000d568e <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d568e:	4770      	bx	lr

000d5690 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5692:	4606      	mov	r6, r0
   d5694:	4615      	mov	r5, r2
   d5696:	460c      	mov	r4, r1
   d5698:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d569a:	42bc      	cmp	r4, r7
   d569c:	d006      	beq.n	d56ac <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d569e:	6833      	ldr	r3, [r6, #0]
   d56a0:	f814 1b01 	ldrb.w	r1, [r4], #1
   d56a4:	689b      	ldr	r3, [r3, #8]
   d56a6:	4630      	mov	r0, r6
   d56a8:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d56aa:	e7f6      	b.n	d569a <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d56ac:	4628      	mov	r0, r5
   d56ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d56b0 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d56b0:	2200      	movs	r2, #0
   d56b2:	7c00      	ldrb	r0, [r0, #16]
   d56b4:	f7ff b9b4 	b.w	d4a20 <HAL_I2C_Write_Data>

000d56b8 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d56b8:	2100      	movs	r1, #0
   d56ba:	7c00      	ldrb	r0, [r0, #16]
   d56bc:	f7ff b9b8 	b.w	d4a30 <HAL_I2C_Available_Data>

000d56c0 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d56c0:	2100      	movs	r1, #0
   d56c2:	7c00      	ldrb	r0, [r0, #16]
   d56c4:	f7ff b9bc 	b.w	d4a40 <HAL_I2C_Read_Data>

000d56c8 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d56c8:	2100      	movs	r1, #0
   d56ca:	7c00      	ldrb	r0, [r0, #16]
   d56cc:	f7ff b9c0 	b.w	d4a50 <HAL_I2C_Peek_Data>

000d56d0 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d56d0:	2100      	movs	r1, #0
   d56d2:	7c00      	ldrb	r0, [r0, #16]
   d56d4:	f7ff b9c4 	b.w	d4a60 <HAL_I2C_Flush_Data>

000d56d8 <_ZN7TwoWireD0Ev>:
   d56d8:	b510      	push	{r4, lr}
   d56da:	4604      	mov	r4, r0
   d56dc:	f7fe fcdd 	bl	d409a <_ZdlPv>
   d56e0:	4620      	mov	r0, r4
   d56e2:	bd10      	pop	{r4, pc}

000d56e4 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d56e4:	b510      	push	{r4, lr}
   d56e6:	4604      	mov	r4, r0
   d56e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d56ec:	4608      	mov	r0, r1
   d56ee:	60a3      	str	r3, [r4, #8]
   d56f0:	2100      	movs	r1, #0
   d56f2:	4b04      	ldr	r3, [pc, #16]	; (d5704 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d56f4:	7420      	strb	r0, [r4, #16]
   d56f6:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d56f8:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d56fa:	f7ff f9c1 	bl	d4a80 <HAL_I2C_Init>

}
   d56fe:	4620      	mov	r0, r4
   d5700:	bd10      	pop	{r4, pc}
   d5702:	bf00      	nop
   d5704:	000d71bc 	.word	0x000d71bc

000d5708 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d5708:	2100      	movs	r1, #0
   d570a:	7c00      	ldrb	r0, [r0, #16]
   d570c:	f7ff b9b0 	b.w	d4a70 <HAL_I2C_Is_Enabled>

000d5710 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5710:	7441      	strb	r1, [r0, #17]
   d5712:	4770      	bx	lr

000d5714 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5714:	4770      	bx	lr

000d5716 <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
   d5716:	2100      	movs	r1, #0
   d5718:	7c00      	ldrb	r0, [r0, #16]
   d571a:	f7ff b931 	b.w	d4980 <HAL_USB_USART_Receive_Data>

000d571e <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
   d571e:	2101      	movs	r1, #1
   d5720:	7c00      	ldrb	r0, [r0, #16]
   d5722:	f7ff b92d 	b.w	d4980 <HAL_USB_USART_Receive_Data>

000d5726 <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
   d5726:	7c00      	ldrb	r0, [r0, #16]
   d5728:	f7ff b922 	b.w	d4970 <HAL_USB_USART_Available_Data_For_Write>

000d572c <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
   d572c:	7c00      	ldrb	r0, [r0, #16]
   d572e:	f7ff b917 	b.w	d4960 <HAL_USB_USART_Available_Data>

000d5732 <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
   d5732:	b538      	push	{r3, r4, r5, lr}
   d5734:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5736:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
   d5738:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d573a:	f7ff f919 	bl	d4970 <HAL_USB_USART_Available_Data_For_Write>
   d573e:	2800      	cmp	r0, #0
   d5740:	dc01      	bgt.n	d5746 <_ZN9USBSerial5writeEh+0x14>
   d5742:	7c60      	ldrb	r0, [r4, #17]
   d5744:	b120      	cbz	r0, d5750 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
   d5746:	4629      	mov	r1, r5
   d5748:	7c20      	ldrb	r0, [r4, #16]
   d574a:	f7ff f921 	bl	d4990 <HAL_USB_USART_Send_Data>
    return 1;
   d574e:	2001      	movs	r0, #1
  }
  return 0;
}
   d5750:	bd38      	pop	{r3, r4, r5, pc}

000d5752 <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d5752:	7c00      	ldrb	r0, [r0, #16]
   d5754:	f7ff b924 	b.w	d49a0 <HAL_USB_USART_Flush_Data>

000d5758 <_ZN9USBSerialD0Ev>:
   d5758:	b510      	push	{r4, lr}
   d575a:	4604      	mov	r4, r0
   d575c:	f7fe fc9d 	bl	d409a <_ZdlPv>
   d5760:	4620      	mov	r0, r4
   d5762:	bd10      	pop	{r4, pc}

000d5764 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5764:	b510      	push	{r4, lr}
   d5766:	4604      	mov	r4, r0
   d5768:	2300      	movs	r3, #0
   d576a:	6063      	str	r3, [r4, #4]
   d576c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5770:	60a3      	str	r3, [r4, #8]
   d5772:	4b05      	ldr	r3, [pc, #20]	; (d5788 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5774:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5776:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5778:	4608      	mov	r0, r1
{
  _serial = serial;
   d577a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d577c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d577e:	4611      	mov	r1, r2
   d5780:	f7ff f8de 	bl	d4940 <HAL_USB_USART_Init>
}
   d5784:	4620      	mov	r0, r4
   d5786:	bd10      	pop	{r4, pc}
   d5788:	000d71e4 	.word	0x000d71e4

000d578c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d578c:	2200      	movs	r2, #0
   d578e:	7c00      	ldrb	r0, [r0, #16]
   d5790:	f7ff b8de 	b.w	d4950 <HAL_USB_USART_Begin>

000d5794 <_ZN9USBSerial9isEnabledEv>:
USBSerial::operator bool() {
  return isEnabled();
}

bool USBSerial::isEnabled() {
  return HAL_USB_USART_Is_Enabled(_serial);
   d5794:	7c00      	ldrb	r0, [r0, #16]
   d5796:	f7ff b90b 	b.w	d49b0 <HAL_USB_USART_Is_Enabled>

000d579a <_ZN9USBSerialcvbEv>:
{
	return HAL_USB_USART_Receive_Data(_serial, true);
}

USBSerial::operator bool() {
  return isEnabled();
   d579a:	f7ff bffb 	b.w	d5794 <_ZN9USBSerial9isEnabledEv>

000d579e <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d579e:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d57a0:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d57a2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d57a4:	2100      	movs	r1, #0
   d57a6:	f001 fa5b 	bl	d6c60 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d57aa:	4620      	mov	r0, r4
   d57ac:	bd10      	pop	{r4, pc}
	...

000d57b0 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d57b0:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d57b2:	4d0e      	ldr	r5, [pc, #56]	; (d57ec <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d57b4:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d57b6:	a801      	add	r0, sp, #4
   d57b8:	f7ff fff1 	bl	d579e <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d57bc:	6829      	ldr	r1, [r5, #0]
   d57be:	f011 0401 	ands.w	r4, r1, #1
   d57c2:	d110      	bne.n	d57e6 <_Z16_fetch_usbserialv+0x36>
   d57c4:	4628      	mov	r0, r5
   d57c6:	f7fe fc77 	bl	d40b8 <__cxa_guard_acquire>
   d57ca:	b160      	cbz	r0, d57e6 <_Z16_fetch_usbserialv+0x36>
   d57cc:	aa01      	add	r2, sp, #4
   d57ce:	4621      	mov	r1, r4
   d57d0:	4807      	ldr	r0, [pc, #28]	; (d57f0 <_Z16_fetch_usbserialv+0x40>)
   d57d2:	f7ff ffc7 	bl	d5764 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d57d6:	4628      	mov	r0, r5
   d57d8:	f7fe fc73 	bl	d40c2 <__cxa_guard_release>
   d57dc:	4a05      	ldr	r2, [pc, #20]	; (d57f4 <_Z16_fetch_usbserialv+0x44>)
   d57de:	4906      	ldr	r1, [pc, #24]	; (d57f8 <_Z16_fetch_usbserialv+0x48>)
   d57e0:	4803      	ldr	r0, [pc, #12]	; (d57f0 <_Z16_fetch_usbserialv+0x40>)
   d57e2:	f000 fbbb 	bl	d5f5c <__aeabi_atexit>
	return _usbserial;
}
   d57e6:	4802      	ldr	r0, [pc, #8]	; (d57f0 <_Z16_fetch_usbserialv+0x40>)
   d57e8:	b007      	add	sp, #28
   d57ea:	bd30      	pop	{r4, r5, pc}
   d57ec:	2003e5b4 	.word	0x2003e5b4
   d57f0:	2003e5b8 	.word	0x2003e5b8
   d57f4:	2003e2a8 	.word	0x2003e2a8
   d57f8:	000d5715 	.word	0x000d5715

000d57fc <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d57fc:	4770      	bx	lr

000d57fe <_ZN9IPAddressD0Ev>:
   d57fe:	b510      	push	{r4, lr}
   d5800:	4604      	mov	r4, r0
   d5802:	f7fe fc4a 	bl	d409a <_ZdlPv>
   d5806:	4620      	mov	r0, r4
   d5808:	bd10      	pop	{r4, pc}

000d580a <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d580a:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d580c:	7d03      	ldrb	r3, [r0, #20]
   d580e:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5810:	b08d      	sub	sp, #52	; 0x34
   d5812:	460e      	mov	r6, r1
   d5814:	f100 0704 	add.w	r7, r0, #4
   d5818:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d581c:	d002      	beq.n	d5824 <_ZNK9IPAddress7printToER5Print+0x1a>
   d581e:	f100 0508 	add.w	r5, r0, #8
   d5822:	e018      	b.n	d5856 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5824:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5826:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5828:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d582c:	232f      	movs	r3, #47	; 0x2f
   d582e:	462a      	mov	r2, r5
   d5830:	200a      	movs	r0, #10
   d5832:	f7ff f96d 	bl	d4b10 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5836:	4628      	mov	r0, r5
   d5838:	f001 fa4a 	bl	d6cd0 <strlen>
   d583c:	6833      	ldr	r3, [r6, #0]
   d583e:	4602      	mov	r2, r0
   d5840:	68db      	ldr	r3, [r3, #12]
   d5842:	4629      	mov	r1, r5
   d5844:	4630      	mov	r0, r6
   d5846:	4798      	blx	r3
   d5848:	e00f      	b.n	d586a <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d584a:	b124      	cbz	r4, d5856 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d584c:	212e      	movs	r1, #46	; 0x2e
   d584e:	4630      	mov	r0, r6
   d5850:	f000 f922 	bl	d5a98 <_ZN5Print5printEc>
   d5854:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d5856:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d585a:	220a      	movs	r2, #10
   d585c:	4630      	mov	r0, r6
   d585e:	f000 f961 	bl	d5b24 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5862:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5864:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5866:	d1f0      	bne.n	d584a <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5868:	4620      	mov	r0, r4
    }
    return n;
}
   d586a:	b00d      	add	sp, #52	; 0x34
   d586c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d5870 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d5870:	b510      	push	{r4, lr}
   d5872:	4b05      	ldr	r3, [pc, #20]	; (d5888 <_ZN9IPAddressC1Ev+0x18>)
   d5874:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5876:	2211      	movs	r2, #17
   d5878:	f840 3b04 	str.w	r3, [r0], #4
   d587c:	2100      	movs	r1, #0
   d587e:	f001 f9ef 	bl	d6c60 <memset>
{
    clear();
}
   d5882:	4620      	mov	r0, r4
   d5884:	bd10      	pop	{r4, pc}
   d5886:	bf00      	nop
   d5888:	000d7214 	.word	0x000d7214

000d588c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d588c:	4603      	mov	r3, r0
   d588e:	4a07      	ldr	r2, [pc, #28]	; (d58ac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5890:	b510      	push	{r4, lr}
   d5892:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d5896:	f101 0210 	add.w	r2, r1, #16
   d589a:	f851 4b04 	ldr.w	r4, [r1], #4
   d589e:	f843 4b04 	str.w	r4, [r3], #4
   d58a2:	4291      	cmp	r1, r2
   d58a4:	d1f9      	bne.n	d589a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d58a6:	780a      	ldrb	r2, [r1, #0]
   d58a8:	701a      	strb	r2, [r3, #0]
}
   d58aa:	bd10      	pop	{r4, pc}
   d58ac:	000d7214 	.word	0x000d7214

000d58b0 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d58b0:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d58b2:	2b04      	cmp	r3, #4
   d58b4:	d101      	bne.n	d58ba <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d58b6:	6840      	ldr	r0, [r0, #4]
   d58b8:	e008      	b.n	d58cc <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d58ba:	2b06      	cmp	r3, #6
   d58bc:	d10a      	bne.n	d58d4 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 && address.ipv6[1] != 0 && address.ipv6[2] != 0 && address.ipv6[3] != 0;
   d58be:	6843      	ldr	r3, [r0, #4]
   d58c0:	b153      	cbz	r3, d58d8 <_ZNK9IPAddresscvbEv+0x28>
   d58c2:	6883      	ldr	r3, [r0, #8]
   d58c4:	b143      	cbz	r3, d58d8 <_ZNK9IPAddresscvbEv+0x28>
   d58c6:	68c3      	ldr	r3, [r0, #12]
   d58c8:	b133      	cbz	r3, d58d8 <_ZNK9IPAddresscvbEv+0x28>
   d58ca:	6900      	ldr	r0, [r0, #16]
   d58cc:	3000      	adds	r0, #0
   d58ce:	bf18      	it	ne
   d58d0:	2001      	movne	r0, #1
   d58d2:	4770      	bx	lr
   d58d4:	2000      	movs	r0, #0
   d58d6:	4770      	bx	lr
   d58d8:	4618      	mov	r0, r3
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d58da:	4770      	bx	lr

000d58dc <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d58dc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d58de:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d58e2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d58e6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d58ea:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d58ee:	2304      	movs	r3, #4
   d58f0:	6041      	str	r1, [r0, #4]
   d58f2:	7503      	strb	r3, [r0, #20]
   d58f4:	bd10      	pop	{r4, pc}

000d58f6 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d58f6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d58f8:	780d      	ldrb	r5, [r1, #0]
   d58fa:	788b      	ldrb	r3, [r1, #2]
   d58fc:	784a      	ldrb	r2, [r1, #1]
   d58fe:	78c9      	ldrb	r1, [r1, #3]
   d5900:	9100      	str	r1, [sp, #0]
   d5902:	4629      	mov	r1, r5
   d5904:	f7ff ffea 	bl	d58dc <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5908:	b003      	add	sp, #12
   d590a:	bd30      	pop	{r4, r5, pc}

000d590c <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d590c:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d590e:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5910:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d5912:	b113      	cbz	r3, d591a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5914:	2203      	movs	r2, #3
   d5916:	4601      	mov	r1, r0
   d5918:	4798      	blx	r3
    }
   d591a:	4620      	mov	r0, r4
   d591c:	bd10      	pop	{r4, pc}

000d591e <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d591e:	2100      	movs	r1, #0
   d5920:	f7ff ba06 	b.w	d4d30 <system_delay_ms>

000d5924 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5924:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5926:	4b0c      	ldr	r3, [pc, #48]	; (d5958 <serialEventRun+0x34>)
   d5928:	b133      	cbz	r3, d5938 <serialEventRun+0x14>
   d592a:	f7ff ff41 	bl	d57b0 <_Z16_fetch_usbserialv>
   d592e:	6803      	ldr	r3, [r0, #0]
   d5930:	691b      	ldr	r3, [r3, #16]
   d5932:	4798      	blx	r3
   d5934:	2800      	cmp	r0, #0
   d5936:	dc09      	bgt.n	d594c <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d5938:	4b08      	ldr	r3, [pc, #32]	; (d595c <serialEventRun+0x38>)
   d593a:	b163      	cbz	r3, d5956 <serialEventRun+0x32>
   d593c:	f000 fa10 	bl	d5d60 <_Z22__fetch_global_Serial1v>
   d5940:	6803      	ldr	r3, [r0, #0]
   d5942:	691b      	ldr	r3, [r3, #16]
   d5944:	4798      	blx	r3
   d5946:	2800      	cmp	r0, #0
   d5948:	dc03      	bgt.n	d5952 <serialEventRun+0x2e>
   d594a:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d594c:	f3af 8000 	nop.w
   d5950:	e7f2      	b.n	d5938 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d5952:	f3af 8000 	nop.w
   d5956:	bd08      	pop	{r3, pc}
	...

000d5960 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d5960:	b508      	push	{r3, lr}
	serialEventRun();
   d5962:	f7ff ffdf 	bl	d5924 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5966:	f7ff f923 	bl	d4bb0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d596a:	4b01      	ldr	r3, [pc, #4]	; (d5970 <_post_loop+0x10>)
   d596c:	6018      	str	r0, [r3, #0]
   d596e:	bd08      	pop	{r3, pc}
   d5970:	2003e730 	.word	0x2003e730

000d5974 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5974:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5976:	2300      	movs	r3, #0
   d5978:	9300      	str	r3, [sp, #0]
   d597a:	461a      	mov	r2, r3
   d597c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5980:	f7ff f9e8 	bl	d4d54 <system_ctrl_set_result>
}
   d5984:	b003      	add	sp, #12
   d5986:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d598c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d598c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d598e:	8843      	ldrh	r3, [r0, #2]
   d5990:	2b0a      	cmp	r3, #10
   d5992:	d008      	beq.n	d59a6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5994:	2b50      	cmp	r3, #80	; 0x50
   d5996:	d109      	bne.n	d59ac <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d5998:	4b09      	ldr	r3, [pc, #36]	; (d59c0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d599a:	681b      	ldr	r3, [r3, #0]
   d599c:	b13b      	cbz	r3, d59ae <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d599e:	b003      	add	sp, #12
   d59a0:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d59a4:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d59a6:	f7ff ffe5 	bl	d5974 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d59aa:	e006      	b.n	d59ba <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d59ac:	2300      	movs	r3, #0
   d59ae:	9300      	str	r3, [sp, #0]
   d59b0:	461a      	mov	r2, r3
   d59b2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d59b6:	f7ff f9cd 	bl	d4d54 <system_ctrl_set_result>
        break;
    }
}
   d59ba:	b003      	add	sp, #12
   d59bc:	f85d fb04 	ldr.w	pc, [sp], #4
   d59c0:	2003e5cc 	.word	0x2003e5cc

000d59c4 <module_user_init_hook>:

void module_user_init_hook()
{
   d59c4:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d59c6:	f7ff f8e3 	bl	d4b90 <HAL_RNG_GetRandomNumber>
   d59ca:	4604      	mov	r4, r0
    srand(seed);
   d59cc:	f001 f950 	bl	d6c70 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d59d0:	4b07      	ldr	r3, [pc, #28]	; (d59f0 <module_user_init_hook+0x2c>)
   d59d2:	b113      	cbz	r3, d59da <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d59d4:	4620      	mov	r0, r4
   d59d6:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d59da:	2100      	movs	r1, #0
   d59dc:	4804      	ldr	r0, [pc, #16]	; (d59f0 <module_user_init_hook+0x2c>)
   d59de:	f7ff f947 	bl	d4c70 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d59e2:	2100      	movs	r1, #0
   d59e4:	4803      	ldr	r0, [pc, #12]	; (d59f4 <module_user_init_hook+0x30>)
}
   d59e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d59ea:	f7ff b9a9 	b.w	d4d40 <system_ctrl_set_app_request_handler>
   d59ee:	bf00      	nop
   d59f0:	00000000 	.word	0x00000000
   d59f4:	000d598d 	.word	0x000d598d

000d59f8 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d59f8:	b510      	push	{r4, lr}
   d59fa:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d59fc:	f7ff ff86 	bl	d590c <_ZNSt14_Function_baseD1Ev>
   d5a00:	4620      	mov	r0, r4
   d5a02:	bd10      	pop	{r4, pc}

000d5a04 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5a04:	4803      	ldr	r0, [pc, #12]	; (d5a14 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5a06:	4a04      	ldr	r2, [pc, #16]	; (d5a18 <_GLOBAL__sub_I_RGB+0x14>)
   d5a08:	4904      	ldr	r1, [pc, #16]	; (d5a1c <_GLOBAL__sub_I_RGB+0x18>)
   d5a0a:	2300      	movs	r3, #0
   d5a0c:	6083      	str	r3, [r0, #8]
   d5a0e:	f000 baa5 	b.w	d5f5c <__aeabi_atexit>
   d5a12:	bf00      	nop
   d5a14:	2003e5d0 	.word	0x2003e5d0
   d5a18:	2003e2a8 	.word	0x2003e2a8
   d5a1c:	000d59f9 	.word	0x000d59f9

000d5a20 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5a20:	4b02      	ldr	r3, [pc, #8]	; (d5a2c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5a22:	681a      	ldr	r2, [r3, #0]
   d5a24:	4b02      	ldr	r3, [pc, #8]	; (d5a30 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5a26:	601a      	str	r2, [r3, #0]
   d5a28:	4770      	bx	lr
   d5a2a:	bf00      	nop
   d5a2c:	2003e23c 	.word	0x2003e23c
   d5a30:	2003e5e0 	.word	0x2003e5e0

000d5a34 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5a34:	4b01      	ldr	r3, [pc, #4]	; (d5a3c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5a36:	4a02      	ldr	r2, [pc, #8]	; (d5a40 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5a38:	601a      	str	r2, [r3, #0]
   d5a3a:	4770      	bx	lr
   d5a3c:	2003e5e4 	.word	0x2003e5e4
   d5a40:	000d72f7 	.word	0x000d72f7

000d5a44 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5a46:	4606      	mov	r6, r0
   d5a48:	460d      	mov	r5, r1
   d5a4a:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d5a4c:	2400      	movs	r4, #0
  while (size--) {
   d5a4e:	42bd      	cmp	r5, r7
   d5a50:	d00c      	beq.n	d5a6c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5a52:	6833      	ldr	r3, [r6, #0]
   d5a54:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5a58:	689b      	ldr	r3, [r3, #8]
   d5a5a:	4630      	mov	r0, r6
   d5a5c:	4798      	blx	r3
     if (chunk>=0)
   d5a5e:	2800      	cmp	r0, #0
   d5a60:	db01      	blt.n	d5a66 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5a62:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d5a64:	e7f3      	b.n	d5a4e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5a66:	2c00      	cmp	r4, #0
   d5a68:	bf08      	it	eq
   d5a6a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d5a6c:	4620      	mov	r0, r4
   d5a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5a70 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5a70:	b570      	push	{r4, r5, r6, lr}
   d5a72:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5a74:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5a76:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5a78:	b149      	cbz	r1, d5a8e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5a7a:	f001 f929 	bl	d6cd0 <strlen>
   d5a7e:	682b      	ldr	r3, [r5, #0]
   d5a80:	4602      	mov	r2, r0
   d5a82:	4621      	mov	r1, r4
   d5a84:	4628      	mov	r0, r5
   d5a86:	68db      	ldr	r3, [r3, #12]
    }
   d5a88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5a8c:	4718      	bx	r3
    }
   d5a8e:	bd70      	pop	{r4, r5, r6, pc}

000d5a90 <_ZN5Print5printEPKc>:
   d5a90:	b508      	push	{r3, lr}
   d5a92:	f7ff ffed 	bl	d5a70 <_ZN5Print5writeEPKc>
   d5a96:	bd08      	pop	{r3, pc}

000d5a98 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5a98:	6803      	ldr	r3, [r0, #0]
   d5a9a:	689b      	ldr	r3, [r3, #8]
   d5a9c:	4718      	bx	r3

000d5a9e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5a9e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5aa0:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5aa2:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5aa4:	f7ff fff8 	bl	d5a98 <_ZN5Print5printEc>
  n += print('\n');
   d5aa8:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d5aaa:	4604      	mov	r4, r0
  n += print('\n');
   d5aac:	4628      	mov	r0, r5
   d5aae:	f7ff fff3 	bl	d5a98 <_ZN5Print5printEc>
  return n;
}
   d5ab2:	4420      	add	r0, r4
   d5ab4:	bd38      	pop	{r3, r4, r5, pc}

000d5ab6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d5ab6:	b538      	push	{r3, r4, r5, lr}
   d5ab8:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5aba:	f7ff ffd9 	bl	d5a70 <_ZN5Print5writeEPKc>
   d5abe:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d5ac0:	4628      	mov	r0, r5
   d5ac2:	f7ff ffec 	bl	d5a9e <_ZN5Print7printlnEv>
  return n;
}
   d5ac6:	4420      	add	r0, r4
   d5ac8:	bd38      	pop	{r3, r4, r5, pc}

000d5aca <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5aca:	b530      	push	{r4, r5, lr}
   d5acc:	b08b      	sub	sp, #44	; 0x2c
   d5ace:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5ad0:	2100      	movs	r1, #0
   d5ad2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5ad6:	2a01      	cmp	r2, #1
   d5ad8:	bf98      	it	ls
   d5ada:	220a      	movls	r2, #10
   d5adc:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d5ae0:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d5ae4:	fb05 3312 	mls	r3, r5, r2, r3
   d5ae8:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5aec:	2b09      	cmp	r3, #9
   d5aee:	bf94      	ite	ls
   d5af0:	3330      	addls	r3, #48	; 0x30
   d5af2:	3337      	addhi	r3, #55	; 0x37
   d5af4:	b2db      	uxtb	r3, r3
   d5af6:	4621      	mov	r1, r4
   d5af8:	f804 3901 	strb.w	r3, [r4], #-1
   d5afc:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d5afe:	2d00      	cmp	r5, #0
   d5b00:	d1ee      	bne.n	d5ae0 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d5b02:	f7ff ffb5 	bl	d5a70 <_ZN5Print5writeEPKc>
}
   d5b06:	b00b      	add	sp, #44	; 0x2c
   d5b08:	bd30      	pop	{r4, r5, pc}

000d5b0a <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d5b0a:	b410      	push	{r4}
  if (base == 0) return write(n);
   d5b0c:	b92a      	cbnz	r2, d5b1a <_ZN5Print5printEmi+0x10>
   d5b0e:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d5b10:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d5b14:	689b      	ldr	r3, [r3, #8]
   d5b16:	b2c9      	uxtb	r1, r1
   d5b18:	4718      	bx	r3
  else return printNumber(n, base);
   d5b1a:	b2d2      	uxtb	r2, r2
}
   d5b1c:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d5b20:	f7ff bfd3 	b.w	d5aca <_ZN5Print11printNumberEmh>

000d5b24 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d5b24:	f7ff bff1 	b.w	d5b0a <_ZN5Print5printEmi>

000d5b28 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   d5b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5b2c:	4607      	mov	r7, r0
   d5b2e:	460e      	mov	r6, r1
  if (base == 0) {
   d5b30:	4615      	mov	r5, r2
   d5b32:	b92a      	cbnz	r2, d5b40 <_ZN5Print5printEli+0x18>
    return write(n);
   d5b34:	6803      	ldr	r3, [r0, #0]
   d5b36:	b2c9      	uxtb	r1, r1
   d5b38:	689b      	ldr	r3, [r3, #8]
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d5b3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
   d5b3e:	4718      	bx	r3
  } else if (base == 10) {
   d5b40:	2a0a      	cmp	r2, #10
   d5b42:	d102      	bne.n	d5b4a <_ZN5Print5printEli+0x22>
    if (n < 0) {
   d5b44:	2900      	cmp	r1, #0
   d5b46:	da01      	bge.n	d5b4c <_ZN5Print5printEli+0x24>
   d5b48:	e004      	b.n	d5b54 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d5b4a:	b2d2      	uxtb	r2, r2
  }
}
   d5b4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d5b50:	f7ff bfbb 	b.w	d5aca <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d5b54:	212d      	movs	r1, #45	; 0x2d
   d5b56:	f7ff ff9f 	bl	d5a98 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   d5b5a:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d5b5c:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
   d5b5e:	4271      	negs	r1, r6
   d5b60:	4638      	mov	r0, r7
   d5b62:	f7ff ffb2 	bl	d5aca <_ZN5Print11printNumberEmh>
   d5b66:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d5b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5b6c <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d5b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5b70:	ec57 6b10 	vmov	r6, r7, d0
   d5b74:	4682      	mov	sl, r0
   d5b76:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d5b78:	ee10 2a10 	vmov	r2, s0
   d5b7c:	463b      	mov	r3, r7
   d5b7e:	ee10 0a10 	vmov	r0, s0
   d5b82:	4639      	mov	r1, r7
   d5b84:	f000 ff8a 	bl	d6a9c <__aeabi_dcmpun>
   d5b88:	b108      	cbz	r0, d5b8e <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5b8a:	4948      	ldr	r1, [pc, #288]	; (d5cac <_ZN5Print10printFloatEdh+0x140>)
   d5b8c:	e012      	b.n	d5bb4 <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d5b8e:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d5b92:	f04f 32ff 	mov.w	r2, #4294967295
   d5b96:	4b46      	ldr	r3, [pc, #280]	; (d5cb0 <_ZN5Print10printFloatEdh+0x144>)
   d5b98:	4630      	mov	r0, r6
   d5b9a:	4649      	mov	r1, r9
   d5b9c:	f000 ff7e 	bl	d6a9c <__aeabi_dcmpun>
   d5ba0:	b968      	cbnz	r0, d5bbe <_ZN5Print10printFloatEdh+0x52>
   d5ba2:	f04f 32ff 	mov.w	r2, #4294967295
   d5ba6:	4b42      	ldr	r3, [pc, #264]	; (d5cb0 <_ZN5Print10printFloatEdh+0x144>)
   d5ba8:	4630      	mov	r0, r6
   d5baa:	4649      	mov	r1, r9
   d5bac:	f000 ff58 	bl	d6a60 <__aeabi_dcmple>
   d5bb0:	b928      	cbnz	r0, d5bbe <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5bb2:	4940      	ldr	r1, [pc, #256]	; (d5cb4 <_ZN5Print10printFloatEdh+0x148>)
   d5bb4:	4650      	mov	r0, sl
   d5bb6:	f7ff ff5b 	bl	d5a70 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d5bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d5bbe:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d5bc2:	4b3d      	ldr	r3, [pc, #244]	; (d5cb8 <_ZN5Print10printFloatEdh+0x14c>)
   d5bc4:	4630      	mov	r0, r6
   d5bc6:	4639      	mov	r1, r7
   d5bc8:	f000 ff5e 	bl	d6a88 <__aeabi_dcmpgt>
   d5bcc:	b108      	cbz	r0, d5bd2 <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5bce:	493b      	ldr	r1, [pc, #236]	; (d5cbc <_ZN5Print10printFloatEdh+0x150>)
   d5bd0:	e7f0      	b.n	d5bb4 <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d5bd2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d5bd6:	4b3a      	ldr	r3, [pc, #232]	; (d5cc0 <_ZN5Print10printFloatEdh+0x154>)
   d5bd8:	4630      	mov	r0, r6
   d5bda:	4639      	mov	r1, r7
   d5bdc:	f000 ff36 	bl	d6a4c <__aeabi_dcmplt>
   d5be0:	2800      	cmp	r0, #0
   d5be2:	d1f4      	bne.n	d5bce <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d5be4:	2200      	movs	r2, #0
   d5be6:	2300      	movs	r3, #0
   d5be8:	4630      	mov	r0, r6
   d5bea:	4639      	mov	r1, r7
   d5bec:	f000 ff2e 	bl	d6a4c <__aeabi_dcmplt>
   d5bf0:	b140      	cbz	r0, d5c04 <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d5bf2:	212d      	movs	r1, #45	; 0x2d
   d5bf4:	4650      	mov	r0, sl
   d5bf6:	f7ff ff4f 	bl	d5a98 <_ZN5Print5printEc>
     number = -number;
   d5bfa:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d5bfe:	4604      	mov	r4, r0
     number = -number;
   d5c00:	461f      	mov	r7, r3
   d5c02:	e000      	b.n	d5c06 <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d5c04:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d5c06:	492f      	ldr	r1, [pc, #188]	; (d5cc4 <_ZN5Print10printFloatEdh+0x158>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d5c08:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d5c0c:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d5c0e:	fa5f f388 	uxtb.w	r3, r8
   d5c12:	429d      	cmp	r5, r3
   d5c14:	d906      	bls.n	d5c24 <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d5c16:	2200      	movs	r2, #0
   d5c18:	4b2b      	ldr	r3, [pc, #172]	; (d5cc8 <_ZN5Print10printFloatEdh+0x15c>)
   d5c1a:	f000 fdcf 	bl	d67bc <__aeabi_ddiv>
   d5c1e:	f108 0801 	add.w	r8, r8, #1
   d5c22:	e7f4      	b.n	d5c0e <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d5c24:	4632      	mov	r2, r6
   d5c26:	463b      	mov	r3, r7
   d5c28:	f000 faec 	bl	d6204 <__adddf3>
   d5c2c:	460f      	mov	r7, r1
   d5c2e:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d5c30:	f000 ff72 	bl	d6b18 <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d5c34:	220a      	movs	r2, #10
   d5c36:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d5c38:	4680      	mov	r8, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d5c3a:	4650      	mov	r0, sl
   d5c3c:	f7ff ff45 	bl	d5aca <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d5c40:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d5c42:	b37d      	cbz	r5, d5ca4 <_ZN5Print10printFloatEdh+0x138>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d5c44:	4640      	mov	r0, r8
   d5c46:	f000 fc19 	bl	d647c <__aeabi_ui2d>
   d5c4a:	4602      	mov	r2, r0
   d5c4c:	460b      	mov	r3, r1
   d5c4e:	4630      	mov	r0, r6
   d5c50:	4639      	mov	r1, r7
   d5c52:	f000 fad5 	bl	d6200 <__aeabi_dsub>
   d5c56:	4606      	mov	r6, r0
   d5c58:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5c5a:	4650      	mov	r0, sl
   d5c5c:	491b      	ldr	r1, [pc, #108]	; (d5ccc <_ZN5Print10printFloatEdh+0x160>)
   d5c5e:	f7ff ff07 	bl	d5a70 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d5c62:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d5c64:	4b18      	ldr	r3, [pc, #96]	; (d5cc8 <_ZN5Print10printFloatEdh+0x15c>)
   d5c66:	2200      	movs	r2, #0
   d5c68:	4630      	mov	r0, r6
   d5c6a:	4639      	mov	r1, r7
   d5c6c:	f000 fc7c 	bl	d6568 <__aeabi_dmul>
   d5c70:	460f      	mov	r7, r1
   d5c72:	4606      	mov	r6, r0
    int toPrint = int(remainder);
   d5c74:	f000 ff28 	bl	d6ac8 <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d5c78:	220a      	movs	r2, #10
   d5c7a:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
   d5c7c:	4680      	mov	r8, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d5c7e:	4650      	mov	r0, sl
   d5c80:	f7ff ff52 	bl	d5b28 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
   d5c84:	4404      	add	r4, r0
    remainder -= toPrint;
   d5c86:	4640      	mov	r0, r8
   d5c88:	f000 fc08 	bl	d649c <__aeabi_i2d>
   d5c8c:	4602      	mov	r2, r0
   d5c8e:	460b      	mov	r3, r1
   d5c90:	4630      	mov	r0, r6
   d5c92:	4639      	mov	r1, r7
   d5c94:	f000 fab4 	bl	d6200 <__aeabi_dsub>
   d5c98:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d5c9a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d5c9e:	4606      	mov	r6, r0
   d5ca0:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d5ca2:	d1df      	bne.n	d5c64 <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d5ca4:	4620      	mov	r0, r4
   d5ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5caa:	bf00      	nop
   d5cac:	000d731a 	.word	0x000d731a
   d5cb0:	7fefffff 	.word	0x7fefffff
   d5cb4:	000d7322 	.word	0x000d7322
   d5cb8:	41efffff 	.word	0x41efffff
   d5cbc:	000d731e 	.word	0x000d731e
   d5cc0:	c1efffff 	.word	0xc1efffff
   d5cc4:	3fe00000 	.word	0x3fe00000
   d5cc8:	40240000 	.word	0x40240000
   d5ccc:	000d6ffd 	.word	0x000d6ffd

000d5cd0 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d5cd0:	b2c9      	uxtb	r1, r1
   d5cd2:	f7ff bf4b 	b.w	d5b6c <_ZN5Print10printFloatEdh>

000d5cd6 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5cd6:	4770      	bx	lr

000d5cd8 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5cd8:	7441      	strb	r1, [r0, #17]
   d5cda:	4770      	bx	lr

000d5cdc <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
   d5cdc:	7c00      	ldrb	r0, [r0, #16]
   d5cde:	f7fe bf0f 	b.w	d4b00 <HAL_USART_Available_Data_For_Write>

000d5ce2 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
   d5ce2:	7c00      	ldrb	r0, [r0, #16]
   d5ce4:	f7fe bee4 	b.w	d4ab0 <HAL_USART_Available_Data>

000d5ce8 <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
   d5ce8:	7c00      	ldrb	r0, [r0, #16]
   d5cea:	f7fe bef1 	b.w	d4ad0 <HAL_USART_Peek_Data>

000d5cee <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
   d5cee:	7c00      	ldrb	r0, [r0, #16]
   d5cf0:	f7fe bee6 	b.w	d4ac0 <HAL_USART_Read_Data>

000d5cf4 <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d5cf4:	7c00      	ldrb	r0, [r0, #16]
   d5cf6:	f7fe bef3 	b.w	d4ae0 <HAL_USART_Flush_Data>

000d5cfa <_ZN11USARTSerialD0Ev>:
   d5cfa:	b510      	push	{r4, lr}
   d5cfc:	4604      	mov	r4, r0
   d5cfe:	f7fe f9cc 	bl	d409a <_ZdlPv>
   d5d02:	4620      	mov	r0, r4
   d5d04:	bd10      	pop	{r4, pc}

000d5d06 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5d06:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5d08:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d5d0a:	4604      	mov	r4, r0
   d5d0c:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5d0e:	b925      	cbnz	r5, d5d1a <_ZN11USARTSerial5writeEh+0x14>
   d5d10:	7c00      	ldrb	r0, [r0, #16]
   d5d12:	f7fe fef5 	bl	d4b00 <HAL_USART_Available_Data_For_Write>
   d5d16:	2800      	cmp	r0, #0
   d5d18:	dd05      	ble.n	d5d26 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5d1a:	4631      	mov	r1, r6
   d5d1c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5d1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5d22:	f7fe bebd 	b.w	d4aa0 <HAL_USART_Write_Data>
  }
  return 0;
}
   d5d26:	4628      	mov	r0, r5
   d5d28:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5d2c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5d2c:	b510      	push	{r4, lr}
   d5d2e:	4604      	mov	r4, r0
   d5d30:	4608      	mov	r0, r1
   d5d32:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5d34:	2200      	movs	r2, #0
   d5d36:	6062      	str	r2, [r4, #4]
   d5d38:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5d3c:	60a2      	str	r2, [r4, #8]
   d5d3e:	4a05      	ldr	r2, [pc, #20]	; (d5d54 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5d40:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d5d42:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5d44:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d5d46:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5d48:	461a      	mov	r2, r3
   d5d4a:	f7fe fea1 	bl	d4a90 <HAL_USART_Init>
}
   d5d4e:	4620      	mov	r0, r4
   d5d50:	bd10      	pop	{r4, pc}
   d5d52:	bf00      	nop
   d5d54:	000d7330 	.word	0x000d7330

000d5d58 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d5d58:	7c00      	ldrb	r0, [r0, #16]
   d5d5a:	f7fe bec9 	b.w	d4af0 <HAL_USART_Is_Enabled>
	...

000d5d60 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5d60:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5d62:	4d0c      	ldr	r5, [pc, #48]	; (d5d94 <_Z22__fetch_global_Serial1v+0x34>)
   d5d64:	6829      	ldr	r1, [r5, #0]
   d5d66:	f011 0401 	ands.w	r4, r1, #1
   d5d6a:	d111      	bne.n	d5d90 <_Z22__fetch_global_Serial1v+0x30>
   d5d6c:	4628      	mov	r0, r5
   d5d6e:	f7fe f9a3 	bl	d40b8 <__cxa_guard_acquire>
   d5d72:	b168      	cbz	r0, d5d90 <_Z22__fetch_global_Serial1v+0x30>
   d5d74:	4a08      	ldr	r2, [pc, #32]	; (d5d98 <_Z22__fetch_global_Serial1v+0x38>)
   d5d76:	4b09      	ldr	r3, [pc, #36]	; (d5d9c <_Z22__fetch_global_Serial1v+0x3c>)
   d5d78:	4809      	ldr	r0, [pc, #36]	; (d5da0 <_Z22__fetch_global_Serial1v+0x40>)
   d5d7a:	4621      	mov	r1, r4
   d5d7c:	f7ff ffd6 	bl	d5d2c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5d80:	4628      	mov	r0, r5
   d5d82:	f7fe f99e 	bl	d40c2 <__cxa_guard_release>
   d5d86:	4a07      	ldr	r2, [pc, #28]	; (d5da4 <_Z22__fetch_global_Serial1v+0x44>)
   d5d88:	4907      	ldr	r1, [pc, #28]	; (d5da8 <_Z22__fetch_global_Serial1v+0x48>)
   d5d8a:	4805      	ldr	r0, [pc, #20]	; (d5da0 <_Z22__fetch_global_Serial1v+0x40>)
   d5d8c:	f000 f8e6 	bl	d5f5c <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5d90:	4803      	ldr	r0, [pc, #12]	; (d5da0 <_Z22__fetch_global_Serial1v+0x40>)
   d5d92:	bd38      	pop	{r3, r4, r5, pc}
   d5d94:	2003e680 	.word	0x2003e680
   d5d98:	2003e684 	.word	0x2003e684
   d5d9c:	2003e5fc 	.word	0x2003e5fc
   d5da0:	2003e5e8 	.word	0x2003e5e8
   d5da4:	2003e2a8 	.word	0x2003e2a8
   d5da8:	000d5cd7 	.word	0x000d5cd7

000d5dac <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d5dac:	4b04      	ldr	r3, [pc, #16]	; (d5dc0 <_GLOBAL__sub_I_System+0x14>)
   d5dae:	2000      	movs	r0, #0
   d5db0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5db4:	7018      	strb	r0, [r3, #0]
   d5db6:	8058      	strh	r0, [r3, #2]
   d5db8:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5dba:	f7fe bfb1 	b.w	d4d20 <set_system_mode>
   d5dbe:	bf00      	nop
   d5dc0:	2003e708 	.word	0x2003e708

000d5dc4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5dc4:	2200      	movs	r2, #0
   d5dc6:	4611      	mov	r1, r2
   d5dc8:	6840      	ldr	r0, [r0, #4]
   d5dca:	f7fe bf91 	b.w	d4cf0 <network_listening>

000d5dce <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5dce:	2200      	movs	r2, #0
   d5dd0:	4611      	mov	r1, r2
   d5dd2:	6840      	ldr	r0, [r0, #4]
   d5dd4:	f7fe bf9c 	b.w	d4d10 <network_get_listen_timeout>

000d5dd8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5dd8:	2200      	movs	r2, #0
   d5dda:	6840      	ldr	r0, [r0, #4]
   d5ddc:	f7fe bf90 	b.w	d4d00 <network_set_listen_timeout>

000d5de0 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5de0:	2200      	movs	r2, #0
   d5de2:	f081 0101 	eor.w	r1, r1, #1
   d5de6:	6840      	ldr	r0, [r0, #4]
   d5de8:	f7fe bf7a 	b.w	d4ce0 <network_listen>

000d5dec <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5dec:	2300      	movs	r3, #0
   d5dee:	461a      	mov	r2, r3
   d5df0:	4619      	mov	r1, r3
   d5df2:	6840      	ldr	r0, [r0, #4]
   d5df4:	f7fe bf6c 	b.w	d4cd0 <network_off>

000d5df8 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5df8:	2300      	movs	r3, #0
   d5dfa:	461a      	mov	r2, r3
   d5dfc:	4619      	mov	r1, r3
   d5dfe:	6840      	ldr	r0, [r0, #4]
   d5e00:	f7fe bf5e 	b.w	d4cc0 <network_on>

000d5e04 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5e04:	2200      	movs	r2, #0
   d5e06:	4611      	mov	r1, r2
   d5e08:	6840      	ldr	r0, [r0, #4]
   d5e0a:	f7fe bf51 	b.w	d4cb0 <network_ready>

000d5e0e <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5e0e:	2200      	movs	r2, #0
   d5e10:	4611      	mov	r1, r2
   d5e12:	6840      	ldr	r0, [r0, #4]
   d5e14:	f7fe bf3c 	b.w	d4c90 <network_connecting>

000d5e18 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5e18:	2200      	movs	r2, #0
   d5e1a:	2102      	movs	r1, #2
   d5e1c:	6840      	ldr	r0, [r0, #4]
   d5e1e:	f7fe bf3f 	b.w	d4ca0 <network_disconnect>

000d5e22 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5e22:	2300      	movs	r3, #0
   d5e24:	461a      	mov	r2, r3
   d5e26:	6840      	ldr	r0, [r0, #4]
   d5e28:	f7fe bf2a 	b.w	d4c80 <network_connect>

000d5e2c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d5e2c:	4b02      	ldr	r3, [pc, #8]	; (d5e38 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5e2e:	2203      	movs	r2, #3
   d5e30:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5e32:	4a02      	ldr	r2, [pc, #8]	; (d5e3c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5e34:	601a      	str	r2, [r3, #0]
   d5e36:	4770      	bx	lr
   d5e38:	2003e710 	.word	0x2003e710
   d5e3c:	000d7360 	.word	0x000d7360

000d5e40 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d5e40:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d5e42:	4d0b      	ldr	r5, [pc, #44]	; (d5e70 <_Z19__fetch_global_Wirev+0x30>)
   d5e44:	6829      	ldr	r1, [r5, #0]
   d5e46:	f011 0401 	ands.w	r4, r1, #1
   d5e4a:	d10f      	bne.n	d5e6c <_Z19__fetch_global_Wirev+0x2c>
   d5e4c:	4628      	mov	r0, r5
   d5e4e:	f7fe f933 	bl	d40b8 <__cxa_guard_acquire>
   d5e52:	b158      	cbz	r0, d5e6c <_Z19__fetch_global_Wirev+0x2c>
   d5e54:	4621      	mov	r1, r4
   d5e56:	4807      	ldr	r0, [pc, #28]	; (d5e74 <_Z19__fetch_global_Wirev+0x34>)
   d5e58:	f7ff fc44 	bl	d56e4 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d5e5c:	4628      	mov	r0, r5
   d5e5e:	f7fe f930 	bl	d40c2 <__cxa_guard_release>
   d5e62:	4a05      	ldr	r2, [pc, #20]	; (d5e78 <_Z19__fetch_global_Wirev+0x38>)
   d5e64:	4905      	ldr	r1, [pc, #20]	; (d5e7c <_Z19__fetch_global_Wirev+0x3c>)
   d5e66:	4803      	ldr	r0, [pc, #12]	; (d5e74 <_Z19__fetch_global_Wirev+0x34>)
   d5e68:	f000 f878 	bl	d5f5c <__aeabi_atexit>
	return wire;
}
   d5e6c:	4801      	ldr	r0, [pc, #4]	; (d5e74 <_Z19__fetch_global_Wirev+0x34>)
   d5e6e:	bd38      	pop	{r3, r4, r5, pc}
   d5e70:	2003e718 	.word	0x2003e718
   d5e74:	2003e71c 	.word	0x2003e71c
   d5e78:	2003e2a8 	.word	0x2003e2a8
   d5e7c:	000d568f 	.word	0x000d568f

000d5e80 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5e80:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d5e82:	4c0c      	ldr	r4, [pc, #48]	; (d5eb4 <_GLOBAL__sub_I_SPI+0x34>)
   d5e84:	4e0c      	ldr	r6, [pc, #48]	; (d5eb8 <_GLOBAL__sub_I_SPI+0x38>)
   d5e86:	4d0d      	ldr	r5, [pc, #52]	; (d5ebc <_GLOBAL__sub_I_SPI+0x3c>)
   d5e88:	2100      	movs	r1, #0
   d5e8a:	4620      	mov	r0, r4
   d5e8c:	f7ff fbe8 	bl	d5660 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5e90:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5e92:	4c0b      	ldr	r4, [pc, #44]	; (d5ec0 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d5e94:	4632      	mov	r2, r6
   d5e96:	4629      	mov	r1, r5
   d5e98:	f000 f860 	bl	d5f5c <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5e9c:	2101      	movs	r1, #1
   d5e9e:	4620      	mov	r0, r4
   d5ea0:	f7ff fbde 	bl	d5660 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5ea4:	4632      	mov	r2, r6
   d5ea6:	4629      	mov	r1, r5
   d5ea8:	4620      	mov	r0, r4
   d5eaa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d5eae:	f000 b855 	b.w	d5f5c <__aeabi_atexit>
   d5eb2:	bf00      	nop
   d5eb4:	2003e734 	.word	0x2003e734
   d5eb8:	2003e2a8 	.word	0x2003e2a8
   d5ebc:	000d5651 	.word	0x000d5651
   d5ec0:	2003e744 	.word	0x2003e744

000d5ec4 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d5ec4:	b510      	push	{r4, lr}
   d5ec6:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d5ec8:	480f      	ldr	r0, [pc, #60]	; (d5f08 <pinAvailable+0x44>)
   d5eca:	f7ff fbdd 	bl	d5688 <_ZN8SPIClass9isEnabledEv>
   d5ece:	b128      	cbz	r0, d5edc <pinAvailable+0x18>
   d5ed0:	f1a4 030b 	sub.w	r3, r4, #11
   d5ed4:	2b02      	cmp	r3, #2
   d5ed6:	d801      	bhi.n	d5edc <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d5ed8:	2000      	movs	r0, #0
   d5eda:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d5edc:	f7ff ffb0 	bl	d5e40 <_Z19__fetch_global_Wirev>
   d5ee0:	f7ff fc12 	bl	d5708 <_ZN7TwoWire9isEnabledEv>
   d5ee4:	b108      	cbz	r0, d5eea <pinAvailable+0x26>
   d5ee6:	2c01      	cmp	r4, #1
   d5ee8:	d9f6      	bls.n	d5ed8 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d5eea:	f7ff ff39 	bl	d5d60 <_Z22__fetch_global_Serial1v>
   d5eee:	f7ff ff33 	bl	d5d58 <_ZN11USARTSerial9isEnabledEv>
   d5ef2:	b118      	cbz	r0, d5efc <pinAvailable+0x38>
   d5ef4:	f1a4 0309 	sub.w	r3, r4, #9
   d5ef8:	2b01      	cmp	r3, #1
   d5efa:	d9ed      	bls.n	d5ed8 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d5efc:	2c23      	cmp	r4, #35	; 0x23
   d5efe:	bf8c      	ite	hi
   d5f00:	2000      	movhi	r0, #0
   d5f02:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d5f04:	bd10      	pop	{r4, pc}
   d5f06:	bf00      	nop
   d5f08:	2003e734 	.word	0x2003e734

000d5f0c <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5f0c:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d5f0e:	b538      	push	{r3, r4, r5, lr}
   d5f10:	4604      	mov	r4, r0
   d5f12:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5f14:	d80a      	bhi.n	d5f2c <pinMode+0x20>
   d5f16:	29ff      	cmp	r1, #255	; 0xff
   d5f18:	d008      	beq.n	d5f2c <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d5f1a:	f7ff ffd3 	bl	d5ec4 <pinAvailable>
   d5f1e:	b128      	cbz	r0, d5f2c <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5f20:	4629      	mov	r1, r5
   d5f22:	4620      	mov	r0, r4
}
   d5f24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5f28:	f7fe be72 	b.w	d4c10 <HAL_Pin_Mode>
   d5f2c:	bd38      	pop	{r3, r4, r5, pc}

000d5f2e <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d5f2e:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d5f30:	b510      	push	{r4, lr}
   d5f32:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d5f34:	bf9c      	itt	ls
   d5f36:	340e      	addls	r4, #14
   d5f38:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d5f3a:	4620      	mov	r0, r4
   d5f3c:	f7ff ffc2 	bl	d5ec4 <pinAvailable>
   d5f40:	b150      	cbz	r0, d5f58 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d5f42:	2103      	movs	r1, #3
   d5f44:	4620      	mov	r0, r4
   d5f46:	f7fe fe5b 	bl	d4c00 <HAL_Validate_Pin_Function>
   d5f4a:	2803      	cmp	r0, #3
   d5f4c:	d104      	bne.n	d5f58 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d5f4e:	4620      	mov	r0, r4
}
   d5f50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d5f54:	f7fe be64 	b.w	d4c20 <HAL_ADC_Read>
}
   d5f58:	2000      	movs	r0, #0
   d5f5a:	bd10      	pop	{r4, pc}

000d5f5c <__aeabi_atexit>:
   d5f5c:	460b      	mov	r3, r1
   d5f5e:	4601      	mov	r1, r0
   d5f60:	4618      	mov	r0, r3
   d5f62:	f000 be49 	b.w	d6bf8 <__cxa_atexit>
	...

000d5f68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5f68:	4b18      	ldr	r3, [pc, #96]	; (d5fcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5f6a:	681a      	ldr	r2, [r3, #0]
   d5f6c:	07d1      	lsls	r1, r2, #31
   d5f6e:	bf5c      	itt	pl
   d5f70:	2201      	movpl	r2, #1
   d5f72:	601a      	strpl	r2, [r3, #0]
   d5f74:	4b16      	ldr	r3, [pc, #88]	; (d5fd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5f76:	681a      	ldr	r2, [r3, #0]
   d5f78:	07d2      	lsls	r2, r2, #31
   d5f7a:	bf5c      	itt	pl
   d5f7c:	2201      	movpl	r2, #1
   d5f7e:	601a      	strpl	r2, [r3, #0]
   d5f80:	4b14      	ldr	r3, [pc, #80]	; (d5fd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5f82:	681a      	ldr	r2, [r3, #0]
   d5f84:	07d0      	lsls	r0, r2, #31
   d5f86:	bf5c      	itt	pl
   d5f88:	2201      	movpl	r2, #1
   d5f8a:	601a      	strpl	r2, [r3, #0]
   d5f8c:	4b12      	ldr	r3, [pc, #72]	; (d5fd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5f8e:	681a      	ldr	r2, [r3, #0]
   d5f90:	07d1      	lsls	r1, r2, #31
   d5f92:	bf5c      	itt	pl
   d5f94:	2201      	movpl	r2, #1
   d5f96:	601a      	strpl	r2, [r3, #0]
   d5f98:	4b10      	ldr	r3, [pc, #64]	; (d5fdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5f9a:	681a      	ldr	r2, [r3, #0]
   d5f9c:	07d2      	lsls	r2, r2, #31
   d5f9e:	bf5c      	itt	pl
   d5fa0:	2201      	movpl	r2, #1
   d5fa2:	601a      	strpl	r2, [r3, #0]
   d5fa4:	4b0e      	ldr	r3, [pc, #56]	; (d5fe0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5fa6:	681a      	ldr	r2, [r3, #0]
   d5fa8:	07d0      	lsls	r0, r2, #31
   d5faa:	bf5c      	itt	pl
   d5fac:	2201      	movpl	r2, #1
   d5fae:	601a      	strpl	r2, [r3, #0]
   d5fb0:	4b0c      	ldr	r3, [pc, #48]	; (d5fe4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5fb2:	681a      	ldr	r2, [r3, #0]
   d5fb4:	07d1      	lsls	r1, r2, #31
   d5fb6:	bf5c      	itt	pl
   d5fb8:	2201      	movpl	r2, #1
   d5fba:	601a      	strpl	r2, [r3, #0]
   d5fbc:	4b0a      	ldr	r3, [pc, #40]	; (d5fe8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5fbe:	681a      	ldr	r2, [r3, #0]
   d5fc0:	07d2      	lsls	r2, r2, #31
   d5fc2:	bf5c      	itt	pl
   d5fc4:	2201      	movpl	r2, #1
   d5fc6:	601a      	strpl	r2, [r3, #0]
   d5fc8:	4770      	bx	lr
   d5fca:	bf00      	nop
   d5fcc:	2003e770 	.word	0x2003e770
   d5fd0:	2003e76c 	.word	0x2003e76c
   d5fd4:	2003e768 	.word	0x2003e768
   d5fd8:	2003e764 	.word	0x2003e764
   d5fdc:	2003e760 	.word	0x2003e760
   d5fe0:	2003e75c 	.word	0x2003e75c
   d5fe4:	2003e758 	.word	0x2003e758
   d5fe8:	2003e754 	.word	0x2003e754

000d5fec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5fec:	4b24      	ldr	r3, [pc, #144]	; (d6080 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d5fee:	681a      	ldr	r2, [r3, #0]
   d5ff0:	07d0      	lsls	r0, r2, #31
   d5ff2:	bf5c      	itt	pl
   d5ff4:	2201      	movpl	r2, #1
   d5ff6:	601a      	strpl	r2, [r3, #0]
   d5ff8:	4b22      	ldr	r3, [pc, #136]	; (d6084 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d5ffa:	681a      	ldr	r2, [r3, #0]
   d5ffc:	07d1      	lsls	r1, r2, #31
   d5ffe:	bf5c      	itt	pl
   d6000:	2201      	movpl	r2, #1
   d6002:	601a      	strpl	r2, [r3, #0]
   d6004:	4b20      	ldr	r3, [pc, #128]	; (d6088 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d6006:	681a      	ldr	r2, [r3, #0]
   d6008:	07d2      	lsls	r2, r2, #31
   d600a:	bf5c      	itt	pl
   d600c:	2201      	movpl	r2, #1
   d600e:	601a      	strpl	r2, [r3, #0]
   d6010:	4b1e      	ldr	r3, [pc, #120]	; (d608c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d6012:	681a      	ldr	r2, [r3, #0]
   d6014:	07d0      	lsls	r0, r2, #31
   d6016:	bf5c      	itt	pl
   d6018:	2201      	movpl	r2, #1
   d601a:	601a      	strpl	r2, [r3, #0]
   d601c:	4b1c      	ldr	r3, [pc, #112]	; (d6090 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d601e:	681a      	ldr	r2, [r3, #0]
   d6020:	07d1      	lsls	r1, r2, #31
   d6022:	bf5c      	itt	pl
   d6024:	2201      	movpl	r2, #1
   d6026:	601a      	strpl	r2, [r3, #0]
   d6028:	4b1a      	ldr	r3, [pc, #104]	; (d6094 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d602a:	681a      	ldr	r2, [r3, #0]
   d602c:	07d2      	lsls	r2, r2, #31
   d602e:	bf5c      	itt	pl
   d6030:	2201      	movpl	r2, #1
   d6032:	601a      	strpl	r2, [r3, #0]
   d6034:	4b18      	ldr	r3, [pc, #96]	; (d6098 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d6036:	681a      	ldr	r2, [r3, #0]
   d6038:	07d0      	lsls	r0, r2, #31
   d603a:	bf5c      	itt	pl
   d603c:	2201      	movpl	r2, #1
   d603e:	601a      	strpl	r2, [r3, #0]
   d6040:	4b16      	ldr	r3, [pc, #88]	; (d609c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d6042:	681a      	ldr	r2, [r3, #0]
   d6044:	07d1      	lsls	r1, r2, #31
   d6046:	bf5c      	itt	pl
   d6048:	2201      	movpl	r2, #1
   d604a:	601a      	strpl	r2, [r3, #0]
   d604c:	4b14      	ldr	r3, [pc, #80]	; (d60a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d604e:	681a      	ldr	r2, [r3, #0]
   d6050:	07d2      	lsls	r2, r2, #31
   d6052:	bf5c      	itt	pl
   d6054:	2201      	movpl	r2, #1
   d6056:	601a      	strpl	r2, [r3, #0]
   d6058:	4b12      	ldr	r3, [pc, #72]	; (d60a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d605a:	681a      	ldr	r2, [r3, #0]
   d605c:	07d0      	lsls	r0, r2, #31
   d605e:	bf5c      	itt	pl
   d6060:	2201      	movpl	r2, #1
   d6062:	601a      	strpl	r2, [r3, #0]
   d6064:	4b10      	ldr	r3, [pc, #64]	; (d60a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d6066:	681a      	ldr	r2, [r3, #0]
   d6068:	07d1      	lsls	r1, r2, #31
   d606a:	bf5c      	itt	pl
   d606c:	2201      	movpl	r2, #1
   d606e:	601a      	strpl	r2, [r3, #0]
   d6070:	4b0e      	ldr	r3, [pc, #56]	; (d60ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d6072:	681a      	ldr	r2, [r3, #0]
   d6074:	07d2      	lsls	r2, r2, #31
   d6076:	bf5c      	itt	pl
   d6078:	2201      	movpl	r2, #1
   d607a:	601a      	strpl	r2, [r3, #0]
   d607c:	4770      	bx	lr
   d607e:	bf00      	nop
   d6080:	2003e7a0 	.word	0x2003e7a0
   d6084:	2003e79c 	.word	0x2003e79c
   d6088:	2003e798 	.word	0x2003e798
   d608c:	2003e794 	.word	0x2003e794
   d6090:	2003e790 	.word	0x2003e790
   d6094:	2003e78c 	.word	0x2003e78c
   d6098:	2003e788 	.word	0x2003e788
   d609c:	2003e784 	.word	0x2003e784
   d60a0:	2003e780 	.word	0x2003e780
   d60a4:	2003e77c 	.word	0x2003e77c
   d60a8:	2003e778 	.word	0x2003e778
   d60ac:	2003e774 	.word	0x2003e774

000d60b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d60b0:	4b24      	ldr	r3, [pc, #144]	; (d6144 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d60b2:	681a      	ldr	r2, [r3, #0]
   d60b4:	07d0      	lsls	r0, r2, #31
   d60b6:	bf5c      	itt	pl
   d60b8:	2201      	movpl	r2, #1
   d60ba:	601a      	strpl	r2, [r3, #0]
   d60bc:	4b22      	ldr	r3, [pc, #136]	; (d6148 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d60be:	681a      	ldr	r2, [r3, #0]
   d60c0:	07d1      	lsls	r1, r2, #31
   d60c2:	bf5c      	itt	pl
   d60c4:	2201      	movpl	r2, #1
   d60c6:	601a      	strpl	r2, [r3, #0]
   d60c8:	4b20      	ldr	r3, [pc, #128]	; (d614c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d60ca:	681a      	ldr	r2, [r3, #0]
   d60cc:	07d2      	lsls	r2, r2, #31
   d60ce:	bf5c      	itt	pl
   d60d0:	2201      	movpl	r2, #1
   d60d2:	601a      	strpl	r2, [r3, #0]
   d60d4:	4b1e      	ldr	r3, [pc, #120]	; (d6150 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d60d6:	681a      	ldr	r2, [r3, #0]
   d60d8:	07d0      	lsls	r0, r2, #31
   d60da:	bf5c      	itt	pl
   d60dc:	2201      	movpl	r2, #1
   d60de:	601a      	strpl	r2, [r3, #0]
   d60e0:	4b1c      	ldr	r3, [pc, #112]	; (d6154 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d60e2:	681a      	ldr	r2, [r3, #0]
   d60e4:	07d1      	lsls	r1, r2, #31
   d60e6:	bf5c      	itt	pl
   d60e8:	2201      	movpl	r2, #1
   d60ea:	601a      	strpl	r2, [r3, #0]
   d60ec:	4b1a      	ldr	r3, [pc, #104]	; (d6158 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d60ee:	681a      	ldr	r2, [r3, #0]
   d60f0:	07d2      	lsls	r2, r2, #31
   d60f2:	bf5c      	itt	pl
   d60f4:	2201      	movpl	r2, #1
   d60f6:	601a      	strpl	r2, [r3, #0]
   d60f8:	4b18      	ldr	r3, [pc, #96]	; (d615c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d60fa:	681a      	ldr	r2, [r3, #0]
   d60fc:	07d0      	lsls	r0, r2, #31
   d60fe:	bf5c      	itt	pl
   d6100:	2201      	movpl	r2, #1
   d6102:	601a      	strpl	r2, [r3, #0]
   d6104:	4b16      	ldr	r3, [pc, #88]	; (d6160 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d6106:	681a      	ldr	r2, [r3, #0]
   d6108:	07d1      	lsls	r1, r2, #31
   d610a:	bf5c      	itt	pl
   d610c:	2201      	movpl	r2, #1
   d610e:	601a      	strpl	r2, [r3, #0]
   d6110:	4b14      	ldr	r3, [pc, #80]	; (d6164 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d6112:	681a      	ldr	r2, [r3, #0]
   d6114:	07d2      	lsls	r2, r2, #31
   d6116:	bf5c      	itt	pl
   d6118:	2201      	movpl	r2, #1
   d611a:	601a      	strpl	r2, [r3, #0]
   d611c:	4b12      	ldr	r3, [pc, #72]	; (d6168 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d611e:	681a      	ldr	r2, [r3, #0]
   d6120:	07d0      	lsls	r0, r2, #31
   d6122:	bf5c      	itt	pl
   d6124:	2201      	movpl	r2, #1
   d6126:	601a      	strpl	r2, [r3, #0]
   d6128:	4b10      	ldr	r3, [pc, #64]	; (d616c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d612a:	681a      	ldr	r2, [r3, #0]
   d612c:	07d1      	lsls	r1, r2, #31
   d612e:	bf5c      	itt	pl
   d6130:	2201      	movpl	r2, #1
   d6132:	601a      	strpl	r2, [r3, #0]
   d6134:	4b0e      	ldr	r3, [pc, #56]	; (d6170 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d6136:	681a      	ldr	r2, [r3, #0]
   d6138:	07d2      	lsls	r2, r2, #31
   d613a:	bf5c      	itt	pl
   d613c:	2201      	movpl	r2, #1
   d613e:	601a      	strpl	r2, [r3, #0]
   d6140:	4770      	bx	lr
   d6142:	bf00      	nop
   d6144:	2003e7d0 	.word	0x2003e7d0
   d6148:	2003e7cc 	.word	0x2003e7cc
   d614c:	2003e7c8 	.word	0x2003e7c8
   d6150:	2003e7c4 	.word	0x2003e7c4
   d6154:	2003e7c0 	.word	0x2003e7c0
   d6158:	2003e7bc 	.word	0x2003e7bc
   d615c:	2003e7b8 	.word	0x2003e7b8
   d6160:	2003e7b4 	.word	0x2003e7b4
   d6164:	2003e7b0 	.word	0x2003e7b0
   d6168:	2003e7ac 	.word	0x2003e7ac
   d616c:	2003e7a8 	.word	0x2003e7a8
   d6170:	2003e7a4 	.word	0x2003e7a4

000d6174 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6174:	4b18      	ldr	r3, [pc, #96]	; (d61d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6176:	681a      	ldr	r2, [r3, #0]
   d6178:	07d1      	lsls	r1, r2, #31
   d617a:	bf5c      	itt	pl
   d617c:	2201      	movpl	r2, #1
   d617e:	601a      	strpl	r2, [r3, #0]
   d6180:	4b16      	ldr	r3, [pc, #88]	; (d61dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6182:	681a      	ldr	r2, [r3, #0]
   d6184:	07d2      	lsls	r2, r2, #31
   d6186:	bf5c      	itt	pl
   d6188:	2201      	movpl	r2, #1
   d618a:	601a      	strpl	r2, [r3, #0]
   d618c:	4b14      	ldr	r3, [pc, #80]	; (d61e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d618e:	681a      	ldr	r2, [r3, #0]
   d6190:	07d0      	lsls	r0, r2, #31
   d6192:	bf5c      	itt	pl
   d6194:	2201      	movpl	r2, #1
   d6196:	601a      	strpl	r2, [r3, #0]
   d6198:	4b12      	ldr	r3, [pc, #72]	; (d61e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d619a:	681a      	ldr	r2, [r3, #0]
   d619c:	07d1      	lsls	r1, r2, #31
   d619e:	bf5c      	itt	pl
   d61a0:	2201      	movpl	r2, #1
   d61a2:	601a      	strpl	r2, [r3, #0]
   d61a4:	4b10      	ldr	r3, [pc, #64]	; (d61e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d61a6:	681a      	ldr	r2, [r3, #0]
   d61a8:	07d2      	lsls	r2, r2, #31
   d61aa:	bf5c      	itt	pl
   d61ac:	2201      	movpl	r2, #1
   d61ae:	601a      	strpl	r2, [r3, #0]
   d61b0:	4b0e      	ldr	r3, [pc, #56]	; (d61ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d61b2:	681a      	ldr	r2, [r3, #0]
   d61b4:	07d0      	lsls	r0, r2, #31
   d61b6:	bf5c      	itt	pl
   d61b8:	2201      	movpl	r2, #1
   d61ba:	601a      	strpl	r2, [r3, #0]
   d61bc:	4b0c      	ldr	r3, [pc, #48]	; (d61f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d61be:	681a      	ldr	r2, [r3, #0]
   d61c0:	07d1      	lsls	r1, r2, #31
   d61c2:	bf5c      	itt	pl
   d61c4:	2201      	movpl	r2, #1
   d61c6:	601a      	strpl	r2, [r3, #0]
   d61c8:	4b0a      	ldr	r3, [pc, #40]	; (d61f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d61ca:	681a      	ldr	r2, [r3, #0]
   d61cc:	07d2      	lsls	r2, r2, #31
   d61ce:	bf5c      	itt	pl
   d61d0:	2201      	movpl	r2, #1
   d61d2:	601a      	strpl	r2, [r3, #0]
   d61d4:	4770      	bx	lr
   d61d6:	bf00      	nop
   d61d8:	2003e7f0 	.word	0x2003e7f0
   d61dc:	2003e7ec 	.word	0x2003e7ec
   d61e0:	2003e7e8 	.word	0x2003e7e8
   d61e4:	2003e7e4 	.word	0x2003e7e4
   d61e8:	2003e7e0 	.word	0x2003e7e0
   d61ec:	2003e7dc 	.word	0x2003e7dc
   d61f0:	2003e7d8 	.word	0x2003e7d8
   d61f4:	2003e7d4 	.word	0x2003e7d4

000d61f8 <__aeabi_drsub>:
   d61f8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d61fc:	e002      	b.n	d6204 <__adddf3>
   d61fe:	bf00      	nop

000d6200 <__aeabi_dsub>:
   d6200:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d6204 <__adddf3>:
   d6204:	b530      	push	{r4, r5, lr}
   d6206:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d620a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d620e:	ea94 0f05 	teq	r4, r5
   d6212:	bf08      	it	eq
   d6214:	ea90 0f02 	teqeq	r0, r2
   d6218:	bf1f      	itttt	ne
   d621a:	ea54 0c00 	orrsne.w	ip, r4, r0
   d621e:	ea55 0c02 	orrsne.w	ip, r5, r2
   d6222:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d6226:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d622a:	f000 80e2 	beq.w	d63f2 <__adddf3+0x1ee>
   d622e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d6232:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d6236:	bfb8      	it	lt
   d6238:	426d      	neglt	r5, r5
   d623a:	dd0c      	ble.n	d6256 <__adddf3+0x52>
   d623c:	442c      	add	r4, r5
   d623e:	ea80 0202 	eor.w	r2, r0, r2
   d6242:	ea81 0303 	eor.w	r3, r1, r3
   d6246:	ea82 0000 	eor.w	r0, r2, r0
   d624a:	ea83 0101 	eor.w	r1, r3, r1
   d624e:	ea80 0202 	eor.w	r2, r0, r2
   d6252:	ea81 0303 	eor.w	r3, r1, r3
   d6256:	2d36      	cmp	r5, #54	; 0x36
   d6258:	bf88      	it	hi
   d625a:	bd30      	pophi	{r4, r5, pc}
   d625c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6260:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6264:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d6268:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d626c:	d002      	beq.n	d6274 <__adddf3+0x70>
   d626e:	4240      	negs	r0, r0
   d6270:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6274:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d6278:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d627c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d6280:	d002      	beq.n	d6288 <__adddf3+0x84>
   d6282:	4252      	negs	r2, r2
   d6284:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d6288:	ea94 0f05 	teq	r4, r5
   d628c:	f000 80a7 	beq.w	d63de <__adddf3+0x1da>
   d6290:	f1a4 0401 	sub.w	r4, r4, #1
   d6294:	f1d5 0e20 	rsbs	lr, r5, #32
   d6298:	db0d      	blt.n	d62b6 <__adddf3+0xb2>
   d629a:	fa02 fc0e 	lsl.w	ip, r2, lr
   d629e:	fa22 f205 	lsr.w	r2, r2, r5
   d62a2:	1880      	adds	r0, r0, r2
   d62a4:	f141 0100 	adc.w	r1, r1, #0
   d62a8:	fa03 f20e 	lsl.w	r2, r3, lr
   d62ac:	1880      	adds	r0, r0, r2
   d62ae:	fa43 f305 	asr.w	r3, r3, r5
   d62b2:	4159      	adcs	r1, r3
   d62b4:	e00e      	b.n	d62d4 <__adddf3+0xd0>
   d62b6:	f1a5 0520 	sub.w	r5, r5, #32
   d62ba:	f10e 0e20 	add.w	lr, lr, #32
   d62be:	2a01      	cmp	r2, #1
   d62c0:	fa03 fc0e 	lsl.w	ip, r3, lr
   d62c4:	bf28      	it	cs
   d62c6:	f04c 0c02 	orrcs.w	ip, ip, #2
   d62ca:	fa43 f305 	asr.w	r3, r3, r5
   d62ce:	18c0      	adds	r0, r0, r3
   d62d0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d62d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d62d8:	d507      	bpl.n	d62ea <__adddf3+0xe6>
   d62da:	f04f 0e00 	mov.w	lr, #0
   d62de:	f1dc 0c00 	rsbs	ip, ip, #0
   d62e2:	eb7e 0000 	sbcs.w	r0, lr, r0
   d62e6:	eb6e 0101 	sbc.w	r1, lr, r1
   d62ea:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d62ee:	d31b      	bcc.n	d6328 <__adddf3+0x124>
   d62f0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d62f4:	d30c      	bcc.n	d6310 <__adddf3+0x10c>
   d62f6:	0849      	lsrs	r1, r1, #1
   d62f8:	ea5f 0030 	movs.w	r0, r0, rrx
   d62fc:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d6300:	f104 0401 	add.w	r4, r4, #1
   d6304:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d6308:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d630c:	f080 809a 	bcs.w	d6444 <__adddf3+0x240>
   d6310:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d6314:	bf08      	it	eq
   d6316:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d631a:	f150 0000 	adcs.w	r0, r0, #0
   d631e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6322:	ea41 0105 	orr.w	r1, r1, r5
   d6326:	bd30      	pop	{r4, r5, pc}
   d6328:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d632c:	4140      	adcs	r0, r0
   d632e:	eb41 0101 	adc.w	r1, r1, r1
   d6332:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6336:	f1a4 0401 	sub.w	r4, r4, #1
   d633a:	d1e9      	bne.n	d6310 <__adddf3+0x10c>
   d633c:	f091 0f00 	teq	r1, #0
   d6340:	bf04      	itt	eq
   d6342:	4601      	moveq	r1, r0
   d6344:	2000      	moveq	r0, #0
   d6346:	fab1 f381 	clz	r3, r1
   d634a:	bf08      	it	eq
   d634c:	3320      	addeq	r3, #32
   d634e:	f1a3 030b 	sub.w	r3, r3, #11
   d6352:	f1b3 0220 	subs.w	r2, r3, #32
   d6356:	da0c      	bge.n	d6372 <__adddf3+0x16e>
   d6358:	320c      	adds	r2, #12
   d635a:	dd08      	ble.n	d636e <__adddf3+0x16a>
   d635c:	f102 0c14 	add.w	ip, r2, #20
   d6360:	f1c2 020c 	rsb	r2, r2, #12
   d6364:	fa01 f00c 	lsl.w	r0, r1, ip
   d6368:	fa21 f102 	lsr.w	r1, r1, r2
   d636c:	e00c      	b.n	d6388 <__adddf3+0x184>
   d636e:	f102 0214 	add.w	r2, r2, #20
   d6372:	bfd8      	it	le
   d6374:	f1c2 0c20 	rsble	ip, r2, #32
   d6378:	fa01 f102 	lsl.w	r1, r1, r2
   d637c:	fa20 fc0c 	lsr.w	ip, r0, ip
   d6380:	bfdc      	itt	le
   d6382:	ea41 010c 	orrle.w	r1, r1, ip
   d6386:	4090      	lslle	r0, r2
   d6388:	1ae4      	subs	r4, r4, r3
   d638a:	bfa2      	ittt	ge
   d638c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d6390:	4329      	orrge	r1, r5
   d6392:	bd30      	popge	{r4, r5, pc}
   d6394:	ea6f 0404 	mvn.w	r4, r4
   d6398:	3c1f      	subs	r4, #31
   d639a:	da1c      	bge.n	d63d6 <__adddf3+0x1d2>
   d639c:	340c      	adds	r4, #12
   d639e:	dc0e      	bgt.n	d63be <__adddf3+0x1ba>
   d63a0:	f104 0414 	add.w	r4, r4, #20
   d63a4:	f1c4 0220 	rsb	r2, r4, #32
   d63a8:	fa20 f004 	lsr.w	r0, r0, r4
   d63ac:	fa01 f302 	lsl.w	r3, r1, r2
   d63b0:	ea40 0003 	orr.w	r0, r0, r3
   d63b4:	fa21 f304 	lsr.w	r3, r1, r4
   d63b8:	ea45 0103 	orr.w	r1, r5, r3
   d63bc:	bd30      	pop	{r4, r5, pc}
   d63be:	f1c4 040c 	rsb	r4, r4, #12
   d63c2:	f1c4 0220 	rsb	r2, r4, #32
   d63c6:	fa20 f002 	lsr.w	r0, r0, r2
   d63ca:	fa01 f304 	lsl.w	r3, r1, r4
   d63ce:	ea40 0003 	orr.w	r0, r0, r3
   d63d2:	4629      	mov	r1, r5
   d63d4:	bd30      	pop	{r4, r5, pc}
   d63d6:	fa21 f004 	lsr.w	r0, r1, r4
   d63da:	4629      	mov	r1, r5
   d63dc:	bd30      	pop	{r4, r5, pc}
   d63de:	f094 0f00 	teq	r4, #0
   d63e2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d63e6:	bf06      	itte	eq
   d63e8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d63ec:	3401      	addeq	r4, #1
   d63ee:	3d01      	subne	r5, #1
   d63f0:	e74e      	b.n	d6290 <__adddf3+0x8c>
   d63f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d63f6:	bf18      	it	ne
   d63f8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d63fc:	d029      	beq.n	d6452 <__adddf3+0x24e>
   d63fe:	ea94 0f05 	teq	r4, r5
   d6402:	bf08      	it	eq
   d6404:	ea90 0f02 	teqeq	r0, r2
   d6408:	d005      	beq.n	d6416 <__adddf3+0x212>
   d640a:	ea54 0c00 	orrs.w	ip, r4, r0
   d640e:	bf04      	itt	eq
   d6410:	4619      	moveq	r1, r3
   d6412:	4610      	moveq	r0, r2
   d6414:	bd30      	pop	{r4, r5, pc}
   d6416:	ea91 0f03 	teq	r1, r3
   d641a:	bf1e      	ittt	ne
   d641c:	2100      	movne	r1, #0
   d641e:	2000      	movne	r0, #0
   d6420:	bd30      	popne	{r4, r5, pc}
   d6422:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d6426:	d105      	bne.n	d6434 <__adddf3+0x230>
   d6428:	0040      	lsls	r0, r0, #1
   d642a:	4149      	adcs	r1, r1
   d642c:	bf28      	it	cs
   d642e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d6432:	bd30      	pop	{r4, r5, pc}
   d6434:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d6438:	bf3c      	itt	cc
   d643a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d643e:	bd30      	popcc	{r4, r5, pc}
   d6440:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6444:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d6448:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d644c:	f04f 0000 	mov.w	r0, #0
   d6450:	bd30      	pop	{r4, r5, pc}
   d6452:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6456:	bf1a      	itte	ne
   d6458:	4619      	movne	r1, r3
   d645a:	4610      	movne	r0, r2
   d645c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d6460:	bf1c      	itt	ne
   d6462:	460b      	movne	r3, r1
   d6464:	4602      	movne	r2, r0
   d6466:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d646a:	bf06      	itte	eq
   d646c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d6470:	ea91 0f03 	teqeq	r1, r3
   d6474:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d6478:	bd30      	pop	{r4, r5, pc}
   d647a:	bf00      	nop

000d647c <__aeabi_ui2d>:
   d647c:	f090 0f00 	teq	r0, #0
   d6480:	bf04      	itt	eq
   d6482:	2100      	moveq	r1, #0
   d6484:	4770      	bxeq	lr
   d6486:	b530      	push	{r4, r5, lr}
   d6488:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d648c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6490:	f04f 0500 	mov.w	r5, #0
   d6494:	f04f 0100 	mov.w	r1, #0
   d6498:	e750      	b.n	d633c <__adddf3+0x138>
   d649a:	bf00      	nop

000d649c <__aeabi_i2d>:
   d649c:	f090 0f00 	teq	r0, #0
   d64a0:	bf04      	itt	eq
   d64a2:	2100      	moveq	r1, #0
   d64a4:	4770      	bxeq	lr
   d64a6:	b530      	push	{r4, r5, lr}
   d64a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d64ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d64b0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d64b4:	bf48      	it	mi
   d64b6:	4240      	negmi	r0, r0
   d64b8:	f04f 0100 	mov.w	r1, #0
   d64bc:	e73e      	b.n	d633c <__adddf3+0x138>
   d64be:	bf00      	nop

000d64c0 <__aeabi_f2d>:
   d64c0:	0042      	lsls	r2, r0, #1
   d64c2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d64c6:	ea4f 0131 	mov.w	r1, r1, rrx
   d64ca:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d64ce:	bf1f      	itttt	ne
   d64d0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d64d4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d64d8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d64dc:	4770      	bxne	lr
   d64de:	f092 0f00 	teq	r2, #0
   d64e2:	bf14      	ite	ne
   d64e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d64e8:	4770      	bxeq	lr
   d64ea:	b530      	push	{r4, r5, lr}
   d64ec:	f44f 7460 	mov.w	r4, #896	; 0x380
   d64f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d64f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d64f8:	e720      	b.n	d633c <__adddf3+0x138>
   d64fa:	bf00      	nop

000d64fc <__aeabi_ul2d>:
   d64fc:	ea50 0201 	orrs.w	r2, r0, r1
   d6500:	bf08      	it	eq
   d6502:	4770      	bxeq	lr
   d6504:	b530      	push	{r4, r5, lr}
   d6506:	f04f 0500 	mov.w	r5, #0
   d650a:	e00a      	b.n	d6522 <__aeabi_l2d+0x16>

000d650c <__aeabi_l2d>:
   d650c:	ea50 0201 	orrs.w	r2, r0, r1
   d6510:	bf08      	it	eq
   d6512:	4770      	bxeq	lr
   d6514:	b530      	push	{r4, r5, lr}
   d6516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d651a:	d502      	bpl.n	d6522 <__aeabi_l2d+0x16>
   d651c:	4240      	negs	r0, r0
   d651e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6522:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6526:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d652a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d652e:	f43f aedc 	beq.w	d62ea <__adddf3+0xe6>
   d6532:	f04f 0203 	mov.w	r2, #3
   d6536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d653a:	bf18      	it	ne
   d653c:	3203      	addne	r2, #3
   d653e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6542:	bf18      	it	ne
   d6544:	3203      	addne	r2, #3
   d6546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d654a:	f1c2 0320 	rsb	r3, r2, #32
   d654e:	fa00 fc03 	lsl.w	ip, r0, r3
   d6552:	fa20 f002 	lsr.w	r0, r0, r2
   d6556:	fa01 fe03 	lsl.w	lr, r1, r3
   d655a:	ea40 000e 	orr.w	r0, r0, lr
   d655e:	fa21 f102 	lsr.w	r1, r1, r2
   d6562:	4414      	add	r4, r2
   d6564:	e6c1      	b.n	d62ea <__adddf3+0xe6>
   d6566:	bf00      	nop

000d6568 <__aeabi_dmul>:
   d6568:	b570      	push	{r4, r5, r6, lr}
   d656a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d656e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6576:	bf1d      	ittte	ne
   d6578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d657c:	ea94 0f0c 	teqne	r4, ip
   d6580:	ea95 0f0c 	teqne	r5, ip
   d6584:	f000 f8de 	bleq	d6744 <__aeabi_dmul+0x1dc>
   d6588:	442c      	add	r4, r5
   d658a:	ea81 0603 	eor.w	r6, r1, r3
   d658e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d6592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d6596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d659a:	bf18      	it	ne
   d659c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d65a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d65a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d65a8:	d038      	beq.n	d661c <__aeabi_dmul+0xb4>
   d65aa:	fba0 ce02 	umull	ip, lr, r0, r2
   d65ae:	f04f 0500 	mov.w	r5, #0
   d65b2:	fbe1 e502 	umlal	lr, r5, r1, r2
   d65b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d65ba:	fbe0 e503 	umlal	lr, r5, r0, r3
   d65be:	f04f 0600 	mov.w	r6, #0
   d65c2:	fbe1 5603 	umlal	r5, r6, r1, r3
   d65c6:	f09c 0f00 	teq	ip, #0
   d65ca:	bf18      	it	ne
   d65cc:	f04e 0e01 	orrne.w	lr, lr, #1
   d65d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d65d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d65d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d65dc:	d204      	bcs.n	d65e8 <__aeabi_dmul+0x80>
   d65de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d65e2:	416d      	adcs	r5, r5
   d65e4:	eb46 0606 	adc.w	r6, r6, r6
   d65e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d65ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d65f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d65f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d65f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d65fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6600:	bf88      	it	hi
   d6602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6606:	d81e      	bhi.n	d6646 <__aeabi_dmul+0xde>
   d6608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d660c:	bf08      	it	eq
   d660e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d6612:	f150 0000 	adcs.w	r0, r0, #0
   d6616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d661a:	bd70      	pop	{r4, r5, r6, pc}
   d661c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d6620:	ea46 0101 	orr.w	r1, r6, r1
   d6624:	ea40 0002 	orr.w	r0, r0, r2
   d6628:	ea81 0103 	eor.w	r1, r1, r3
   d662c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d6630:	bfc2      	ittt	gt
   d6632:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d663a:	bd70      	popgt	{r4, r5, r6, pc}
   d663c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6640:	f04f 0e00 	mov.w	lr, #0
   d6644:	3c01      	subs	r4, #1
   d6646:	f300 80ab 	bgt.w	d67a0 <__aeabi_dmul+0x238>
   d664a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d664e:	bfde      	ittt	le
   d6650:	2000      	movle	r0, #0
   d6652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d6656:	bd70      	pople	{r4, r5, r6, pc}
   d6658:	f1c4 0400 	rsb	r4, r4, #0
   d665c:	3c20      	subs	r4, #32
   d665e:	da35      	bge.n	d66cc <__aeabi_dmul+0x164>
   d6660:	340c      	adds	r4, #12
   d6662:	dc1b      	bgt.n	d669c <__aeabi_dmul+0x134>
   d6664:	f104 0414 	add.w	r4, r4, #20
   d6668:	f1c4 0520 	rsb	r5, r4, #32
   d666c:	fa00 f305 	lsl.w	r3, r0, r5
   d6670:	fa20 f004 	lsr.w	r0, r0, r4
   d6674:	fa01 f205 	lsl.w	r2, r1, r5
   d6678:	ea40 0002 	orr.w	r0, r0, r2
   d667c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d6680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6688:	fa21 f604 	lsr.w	r6, r1, r4
   d668c:	eb42 0106 	adc.w	r1, r2, r6
   d6690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6694:	bf08      	it	eq
   d6696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d669a:	bd70      	pop	{r4, r5, r6, pc}
   d669c:	f1c4 040c 	rsb	r4, r4, #12
   d66a0:	f1c4 0520 	rsb	r5, r4, #32
   d66a4:	fa00 f304 	lsl.w	r3, r0, r4
   d66a8:	fa20 f005 	lsr.w	r0, r0, r5
   d66ac:	fa01 f204 	lsl.w	r2, r1, r4
   d66b0:	ea40 0002 	orr.w	r0, r0, r2
   d66b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d66b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d66bc:	f141 0100 	adc.w	r1, r1, #0
   d66c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d66c4:	bf08      	it	eq
   d66c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d66ca:	bd70      	pop	{r4, r5, r6, pc}
   d66cc:	f1c4 0520 	rsb	r5, r4, #32
   d66d0:	fa00 f205 	lsl.w	r2, r0, r5
   d66d4:	ea4e 0e02 	orr.w	lr, lr, r2
   d66d8:	fa20 f304 	lsr.w	r3, r0, r4
   d66dc:	fa01 f205 	lsl.w	r2, r1, r5
   d66e0:	ea43 0302 	orr.w	r3, r3, r2
   d66e4:	fa21 f004 	lsr.w	r0, r1, r4
   d66e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d66ec:	fa21 f204 	lsr.w	r2, r1, r4
   d66f0:	ea20 0002 	bic.w	r0, r0, r2
   d66f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d66f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d66fc:	bf08      	it	eq
   d66fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6702:	bd70      	pop	{r4, r5, r6, pc}
   d6704:	f094 0f00 	teq	r4, #0
   d6708:	d10f      	bne.n	d672a <__aeabi_dmul+0x1c2>
   d670a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d670e:	0040      	lsls	r0, r0, #1
   d6710:	eb41 0101 	adc.w	r1, r1, r1
   d6714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6718:	bf08      	it	eq
   d671a:	3c01      	subeq	r4, #1
   d671c:	d0f7      	beq.n	d670e <__aeabi_dmul+0x1a6>
   d671e:	ea41 0106 	orr.w	r1, r1, r6
   d6722:	f095 0f00 	teq	r5, #0
   d6726:	bf18      	it	ne
   d6728:	4770      	bxne	lr
   d672a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d672e:	0052      	lsls	r2, r2, #1
   d6730:	eb43 0303 	adc.w	r3, r3, r3
   d6734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d6738:	bf08      	it	eq
   d673a:	3d01      	subeq	r5, #1
   d673c:	d0f7      	beq.n	d672e <__aeabi_dmul+0x1c6>
   d673e:	ea43 0306 	orr.w	r3, r3, r6
   d6742:	4770      	bx	lr
   d6744:	ea94 0f0c 	teq	r4, ip
   d6748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d674c:	bf18      	it	ne
   d674e:	ea95 0f0c 	teqne	r5, ip
   d6752:	d00c      	beq.n	d676e <__aeabi_dmul+0x206>
   d6754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6758:	bf18      	it	ne
   d675a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d675e:	d1d1      	bne.n	d6704 <__aeabi_dmul+0x19c>
   d6760:	ea81 0103 	eor.w	r1, r1, r3
   d6764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6768:	f04f 0000 	mov.w	r0, #0
   d676c:	bd70      	pop	{r4, r5, r6, pc}
   d676e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6772:	bf06      	itte	eq
   d6774:	4610      	moveq	r0, r2
   d6776:	4619      	moveq	r1, r3
   d6778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d677c:	d019      	beq.n	d67b2 <__aeabi_dmul+0x24a>
   d677e:	ea94 0f0c 	teq	r4, ip
   d6782:	d102      	bne.n	d678a <__aeabi_dmul+0x222>
   d6784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d6788:	d113      	bne.n	d67b2 <__aeabi_dmul+0x24a>
   d678a:	ea95 0f0c 	teq	r5, ip
   d678e:	d105      	bne.n	d679c <__aeabi_dmul+0x234>
   d6790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d6794:	bf1c      	itt	ne
   d6796:	4610      	movne	r0, r2
   d6798:	4619      	movne	r1, r3
   d679a:	d10a      	bne.n	d67b2 <__aeabi_dmul+0x24a>
   d679c:	ea81 0103 	eor.w	r1, r1, r3
   d67a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d67a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d67a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d67ac:	f04f 0000 	mov.w	r0, #0
   d67b0:	bd70      	pop	{r4, r5, r6, pc}
   d67b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d67b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d67ba:	bd70      	pop	{r4, r5, r6, pc}

000d67bc <__aeabi_ddiv>:
   d67bc:	b570      	push	{r4, r5, r6, lr}
   d67be:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d67c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d67c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d67ca:	bf1d      	ittte	ne
   d67cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d67d0:	ea94 0f0c 	teqne	r4, ip
   d67d4:	ea95 0f0c 	teqne	r5, ip
   d67d8:	f000 f8a7 	bleq	d692a <__aeabi_ddiv+0x16e>
   d67dc:	eba4 0405 	sub.w	r4, r4, r5
   d67e0:	ea81 0e03 	eor.w	lr, r1, r3
   d67e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d67e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d67ec:	f000 8088 	beq.w	d6900 <__aeabi_ddiv+0x144>
   d67f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d67f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d67f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d67fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d6800:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d6804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d6808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d680c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d6810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d6814:	429d      	cmp	r5, r3
   d6816:	bf08      	it	eq
   d6818:	4296      	cmpeq	r6, r2
   d681a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d681e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d6822:	d202      	bcs.n	d682a <__aeabi_ddiv+0x6e>
   d6824:	085b      	lsrs	r3, r3, #1
   d6826:	ea4f 0232 	mov.w	r2, r2, rrx
   d682a:	1ab6      	subs	r6, r6, r2
   d682c:	eb65 0503 	sbc.w	r5, r5, r3
   d6830:	085b      	lsrs	r3, r3, #1
   d6832:	ea4f 0232 	mov.w	r2, r2, rrx
   d6836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d683a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d683e:	ebb6 0e02 	subs.w	lr, r6, r2
   d6842:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6846:	bf22      	ittt	cs
   d6848:	1ab6      	subcs	r6, r6, r2
   d684a:	4675      	movcs	r5, lr
   d684c:	ea40 000c 	orrcs.w	r0, r0, ip
   d6850:	085b      	lsrs	r3, r3, #1
   d6852:	ea4f 0232 	mov.w	r2, r2, rrx
   d6856:	ebb6 0e02 	subs.w	lr, r6, r2
   d685a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d685e:	bf22      	ittt	cs
   d6860:	1ab6      	subcs	r6, r6, r2
   d6862:	4675      	movcs	r5, lr
   d6864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d6868:	085b      	lsrs	r3, r3, #1
   d686a:	ea4f 0232 	mov.w	r2, r2, rrx
   d686e:	ebb6 0e02 	subs.w	lr, r6, r2
   d6872:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6876:	bf22      	ittt	cs
   d6878:	1ab6      	subcs	r6, r6, r2
   d687a:	4675      	movcs	r5, lr
   d687c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d6880:	085b      	lsrs	r3, r3, #1
   d6882:	ea4f 0232 	mov.w	r2, r2, rrx
   d6886:	ebb6 0e02 	subs.w	lr, r6, r2
   d688a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d688e:	bf22      	ittt	cs
   d6890:	1ab6      	subcs	r6, r6, r2
   d6892:	4675      	movcs	r5, lr
   d6894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d6898:	ea55 0e06 	orrs.w	lr, r5, r6
   d689c:	d018      	beq.n	d68d0 <__aeabi_ddiv+0x114>
   d689e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d68a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d68a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d68aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d68ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d68b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d68b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d68ba:	d1c0      	bne.n	d683e <__aeabi_ddiv+0x82>
   d68bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d68c0:	d10b      	bne.n	d68da <__aeabi_ddiv+0x11e>
   d68c2:	ea41 0100 	orr.w	r1, r1, r0
   d68c6:	f04f 0000 	mov.w	r0, #0
   d68ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d68ce:	e7b6      	b.n	d683e <__aeabi_ddiv+0x82>
   d68d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d68d4:	bf04      	itt	eq
   d68d6:	4301      	orreq	r1, r0
   d68d8:	2000      	moveq	r0, #0
   d68da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d68de:	bf88      	it	hi
   d68e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d68e4:	f63f aeaf 	bhi.w	d6646 <__aeabi_dmul+0xde>
   d68e8:	ebb5 0c03 	subs.w	ip, r5, r3
   d68ec:	bf04      	itt	eq
   d68ee:	ebb6 0c02 	subseq.w	ip, r6, r2
   d68f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d68f6:	f150 0000 	adcs.w	r0, r0, #0
   d68fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d68fe:	bd70      	pop	{r4, r5, r6, pc}
   d6900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d6904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d6908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d690c:	bfc2      	ittt	gt
   d690e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6916:	bd70      	popgt	{r4, r5, r6, pc}
   d6918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d691c:	f04f 0e00 	mov.w	lr, #0
   d6920:	3c01      	subs	r4, #1
   d6922:	e690      	b.n	d6646 <__aeabi_dmul+0xde>
   d6924:	ea45 0e06 	orr.w	lr, r5, r6
   d6928:	e68d      	b.n	d6646 <__aeabi_dmul+0xde>
   d692a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d692e:	ea94 0f0c 	teq	r4, ip
   d6932:	bf08      	it	eq
   d6934:	ea95 0f0c 	teqeq	r5, ip
   d6938:	f43f af3b 	beq.w	d67b2 <__aeabi_dmul+0x24a>
   d693c:	ea94 0f0c 	teq	r4, ip
   d6940:	d10a      	bne.n	d6958 <__aeabi_ddiv+0x19c>
   d6942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6946:	f47f af34 	bne.w	d67b2 <__aeabi_dmul+0x24a>
   d694a:	ea95 0f0c 	teq	r5, ip
   d694e:	f47f af25 	bne.w	d679c <__aeabi_dmul+0x234>
   d6952:	4610      	mov	r0, r2
   d6954:	4619      	mov	r1, r3
   d6956:	e72c      	b.n	d67b2 <__aeabi_dmul+0x24a>
   d6958:	ea95 0f0c 	teq	r5, ip
   d695c:	d106      	bne.n	d696c <__aeabi_ddiv+0x1b0>
   d695e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6962:	f43f aefd 	beq.w	d6760 <__aeabi_dmul+0x1f8>
   d6966:	4610      	mov	r0, r2
   d6968:	4619      	mov	r1, r3
   d696a:	e722      	b.n	d67b2 <__aeabi_dmul+0x24a>
   d696c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6970:	bf18      	it	ne
   d6972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6976:	f47f aec5 	bne.w	d6704 <__aeabi_dmul+0x19c>
   d697a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d697e:	f47f af0d 	bne.w	d679c <__aeabi_dmul+0x234>
   d6982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d6986:	f47f aeeb 	bne.w	d6760 <__aeabi_dmul+0x1f8>
   d698a:	e712      	b.n	d67b2 <__aeabi_dmul+0x24a>

000d698c <__gedf2>:
   d698c:	f04f 3cff 	mov.w	ip, #4294967295
   d6990:	e006      	b.n	d69a0 <__cmpdf2+0x4>
   d6992:	bf00      	nop

000d6994 <__ledf2>:
   d6994:	f04f 0c01 	mov.w	ip, #1
   d6998:	e002      	b.n	d69a0 <__cmpdf2+0x4>
   d699a:	bf00      	nop

000d699c <__cmpdf2>:
   d699c:	f04f 0c01 	mov.w	ip, #1
   d69a0:	f84d cd04 	str.w	ip, [sp, #-4]!
   d69a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d69a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d69ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d69b0:	bf18      	it	ne
   d69b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d69b6:	d01b      	beq.n	d69f0 <__cmpdf2+0x54>
   d69b8:	b001      	add	sp, #4
   d69ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d69be:	bf0c      	ite	eq
   d69c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d69c4:	ea91 0f03 	teqne	r1, r3
   d69c8:	bf02      	ittt	eq
   d69ca:	ea90 0f02 	teqeq	r0, r2
   d69ce:	2000      	moveq	r0, #0
   d69d0:	4770      	bxeq	lr
   d69d2:	f110 0f00 	cmn.w	r0, #0
   d69d6:	ea91 0f03 	teq	r1, r3
   d69da:	bf58      	it	pl
   d69dc:	4299      	cmppl	r1, r3
   d69de:	bf08      	it	eq
   d69e0:	4290      	cmpeq	r0, r2
   d69e2:	bf2c      	ite	cs
   d69e4:	17d8      	asrcs	r0, r3, #31
   d69e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d69ea:	f040 0001 	orr.w	r0, r0, #1
   d69ee:	4770      	bx	lr
   d69f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d69f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d69f8:	d102      	bne.n	d6a00 <__cmpdf2+0x64>
   d69fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d69fe:	d107      	bne.n	d6a10 <__cmpdf2+0x74>
   d6a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6a08:	d1d6      	bne.n	d69b8 <__cmpdf2+0x1c>
   d6a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d6a0e:	d0d3      	beq.n	d69b8 <__cmpdf2+0x1c>
   d6a10:	f85d 0b04 	ldr.w	r0, [sp], #4
   d6a14:	4770      	bx	lr
   d6a16:	bf00      	nop

000d6a18 <__aeabi_cdrcmple>:
   d6a18:	4684      	mov	ip, r0
   d6a1a:	4610      	mov	r0, r2
   d6a1c:	4662      	mov	r2, ip
   d6a1e:	468c      	mov	ip, r1
   d6a20:	4619      	mov	r1, r3
   d6a22:	4663      	mov	r3, ip
   d6a24:	e000      	b.n	d6a28 <__aeabi_cdcmpeq>
   d6a26:	bf00      	nop

000d6a28 <__aeabi_cdcmpeq>:
   d6a28:	b501      	push	{r0, lr}
   d6a2a:	f7ff ffb7 	bl	d699c <__cmpdf2>
   d6a2e:	2800      	cmp	r0, #0
   d6a30:	bf48      	it	mi
   d6a32:	f110 0f00 	cmnmi.w	r0, #0
   d6a36:	bd01      	pop	{r0, pc}

000d6a38 <__aeabi_dcmpeq>:
   d6a38:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6a3c:	f7ff fff4 	bl	d6a28 <__aeabi_cdcmpeq>
   d6a40:	bf0c      	ite	eq
   d6a42:	2001      	moveq	r0, #1
   d6a44:	2000      	movne	r0, #0
   d6a46:	f85d fb08 	ldr.w	pc, [sp], #8
   d6a4a:	bf00      	nop

000d6a4c <__aeabi_dcmplt>:
   d6a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6a50:	f7ff ffea 	bl	d6a28 <__aeabi_cdcmpeq>
   d6a54:	bf34      	ite	cc
   d6a56:	2001      	movcc	r0, #1
   d6a58:	2000      	movcs	r0, #0
   d6a5a:	f85d fb08 	ldr.w	pc, [sp], #8
   d6a5e:	bf00      	nop

000d6a60 <__aeabi_dcmple>:
   d6a60:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6a64:	f7ff ffe0 	bl	d6a28 <__aeabi_cdcmpeq>
   d6a68:	bf94      	ite	ls
   d6a6a:	2001      	movls	r0, #1
   d6a6c:	2000      	movhi	r0, #0
   d6a6e:	f85d fb08 	ldr.w	pc, [sp], #8
   d6a72:	bf00      	nop

000d6a74 <__aeabi_dcmpge>:
   d6a74:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6a78:	f7ff ffce 	bl	d6a18 <__aeabi_cdrcmple>
   d6a7c:	bf94      	ite	ls
   d6a7e:	2001      	movls	r0, #1
   d6a80:	2000      	movhi	r0, #0
   d6a82:	f85d fb08 	ldr.w	pc, [sp], #8
   d6a86:	bf00      	nop

000d6a88 <__aeabi_dcmpgt>:
   d6a88:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6a8c:	f7ff ffc4 	bl	d6a18 <__aeabi_cdrcmple>
   d6a90:	bf34      	ite	cc
   d6a92:	2001      	movcc	r0, #1
   d6a94:	2000      	movcs	r0, #0
   d6a96:	f85d fb08 	ldr.w	pc, [sp], #8
   d6a9a:	bf00      	nop

000d6a9c <__aeabi_dcmpun>:
   d6a9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6aa4:	d102      	bne.n	d6aac <__aeabi_dcmpun+0x10>
   d6aa6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d6aaa:	d10a      	bne.n	d6ac2 <__aeabi_dcmpun+0x26>
   d6aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6ab4:	d102      	bne.n	d6abc <__aeabi_dcmpun+0x20>
   d6ab6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d6aba:	d102      	bne.n	d6ac2 <__aeabi_dcmpun+0x26>
   d6abc:	f04f 0000 	mov.w	r0, #0
   d6ac0:	4770      	bx	lr
   d6ac2:	f04f 0001 	mov.w	r0, #1
   d6ac6:	4770      	bx	lr

000d6ac8 <__aeabi_d2iz>:
   d6ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d6acc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6ad0:	d215      	bcs.n	d6afe <__aeabi_d2iz+0x36>
   d6ad2:	d511      	bpl.n	d6af8 <__aeabi_d2iz+0x30>
   d6ad4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6ad8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d6adc:	d912      	bls.n	d6b04 <__aeabi_d2iz+0x3c>
   d6ade:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6ae2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d6ae6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d6aea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6aee:	fa23 f002 	lsr.w	r0, r3, r2
   d6af2:	bf18      	it	ne
   d6af4:	4240      	negne	r0, r0
   d6af6:	4770      	bx	lr
   d6af8:	f04f 0000 	mov.w	r0, #0
   d6afc:	4770      	bx	lr
   d6afe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d6b02:	d105      	bne.n	d6b10 <__aeabi_d2iz+0x48>
   d6b04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d6b08:	bf08      	it	eq
   d6b0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d6b0e:	4770      	bx	lr
   d6b10:	f04f 0000 	mov.w	r0, #0
   d6b14:	4770      	bx	lr
   d6b16:	bf00      	nop

000d6b18 <__aeabi_d2uiz>:
   d6b18:	004a      	lsls	r2, r1, #1
   d6b1a:	d211      	bcs.n	d6b40 <__aeabi_d2uiz+0x28>
   d6b1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6b20:	d211      	bcs.n	d6b46 <__aeabi_d2uiz+0x2e>
   d6b22:	d50d      	bpl.n	d6b40 <__aeabi_d2uiz+0x28>
   d6b24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d6b2c:	d40e      	bmi.n	d6b4c <__aeabi_d2uiz+0x34>
   d6b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6b32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d6b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d6b3a:	fa23 f002 	lsr.w	r0, r3, r2
   d6b3e:	4770      	bx	lr
   d6b40:	f04f 0000 	mov.w	r0, #0
   d6b44:	4770      	bx	lr
   d6b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d6b4a:	d102      	bne.n	d6b52 <__aeabi_d2uiz+0x3a>
   d6b4c:	f04f 30ff 	mov.w	r0, #4294967295
   d6b50:	4770      	bx	lr
   d6b52:	f04f 0000 	mov.w	r0, #0
   d6b56:	4770      	bx	lr

000d6b58 <__aeabi_d2f>:
   d6b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d6b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d6b60:	bf24      	itt	cs
   d6b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d6b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d6b6a:	d90d      	bls.n	d6b88 <__aeabi_d2f+0x30>
   d6b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d6b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d6b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d6b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d6b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d6b80:	bf08      	it	eq
   d6b82:	f020 0001 	biceq.w	r0, r0, #1
   d6b86:	4770      	bx	lr
   d6b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d6b8c:	d121      	bne.n	d6bd2 <__aeabi_d2f+0x7a>
   d6b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d6b92:	bfbc      	itt	lt
   d6b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d6b98:	4770      	bxlt	lr
   d6b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d6ba2:	f1c2 0218 	rsb	r2, r2, #24
   d6ba6:	f1c2 0c20 	rsb	ip, r2, #32
   d6baa:	fa10 f30c 	lsls.w	r3, r0, ip
   d6bae:	fa20 f002 	lsr.w	r0, r0, r2
   d6bb2:	bf18      	it	ne
   d6bb4:	f040 0001 	orrne.w	r0, r0, #1
   d6bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d6bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
   d6bc4:	ea40 000c 	orr.w	r0, r0, ip
   d6bc8:	fa23 f302 	lsr.w	r3, r3, r2
   d6bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d6bd0:	e7cc      	b.n	d6b6c <__aeabi_d2f+0x14>
   d6bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d6bd6:	d107      	bne.n	d6be8 <__aeabi_d2f+0x90>
   d6bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d6bdc:	bf1e      	ittt	ne
   d6bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d6be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d6be6:	4770      	bxne	lr
   d6be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d6bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d6bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d6bf4:	4770      	bx	lr
   d6bf6:	bf00      	nop

000d6bf8 <__cxa_atexit>:
   d6bf8:	b510      	push	{r4, lr}
   d6bfa:	4c05      	ldr	r4, [pc, #20]	; (d6c10 <__cxa_atexit+0x18>)
   d6bfc:	4613      	mov	r3, r2
   d6bfe:	b12c      	cbz	r4, d6c0c <__cxa_atexit+0x14>
   d6c00:	460a      	mov	r2, r1
   d6c02:	4601      	mov	r1, r0
   d6c04:	2002      	movs	r0, #2
   d6c06:	f3af 8000 	nop.w
   d6c0a:	bd10      	pop	{r4, pc}
   d6c0c:	4620      	mov	r0, r4
   d6c0e:	bd10      	pop	{r4, pc}
   d6c10:	00000000 	.word	0x00000000

000d6c14 <memcpy>:
   d6c14:	b510      	push	{r4, lr}
   d6c16:	1e43      	subs	r3, r0, #1
   d6c18:	440a      	add	r2, r1
   d6c1a:	4291      	cmp	r1, r2
   d6c1c:	d004      	beq.n	d6c28 <memcpy+0x14>
   d6c1e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6c22:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6c26:	e7f8      	b.n	d6c1a <memcpy+0x6>
   d6c28:	bd10      	pop	{r4, pc}

000d6c2a <memmove>:
   d6c2a:	4288      	cmp	r0, r1
   d6c2c:	b510      	push	{r4, lr}
   d6c2e:	eb01 0302 	add.w	r3, r1, r2
   d6c32:	d801      	bhi.n	d6c38 <memmove+0xe>
   d6c34:	1e42      	subs	r2, r0, #1
   d6c36:	e00b      	b.n	d6c50 <memmove+0x26>
   d6c38:	4298      	cmp	r0, r3
   d6c3a:	d2fb      	bcs.n	d6c34 <memmove+0xa>
   d6c3c:	1881      	adds	r1, r0, r2
   d6c3e:	1ad2      	subs	r2, r2, r3
   d6c40:	42d3      	cmn	r3, r2
   d6c42:	d004      	beq.n	d6c4e <memmove+0x24>
   d6c44:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d6c48:	f801 4d01 	strb.w	r4, [r1, #-1]!
   d6c4c:	e7f8      	b.n	d6c40 <memmove+0x16>
   d6c4e:	bd10      	pop	{r4, pc}
   d6c50:	4299      	cmp	r1, r3
   d6c52:	d004      	beq.n	d6c5e <memmove+0x34>
   d6c54:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6c58:	f802 4f01 	strb.w	r4, [r2, #1]!
   d6c5c:	e7f8      	b.n	d6c50 <memmove+0x26>
   d6c5e:	bd10      	pop	{r4, pc}

000d6c60 <memset>:
   d6c60:	4402      	add	r2, r0
   d6c62:	4603      	mov	r3, r0
   d6c64:	4293      	cmp	r3, r2
   d6c66:	d002      	beq.n	d6c6e <memset+0xe>
   d6c68:	f803 1b01 	strb.w	r1, [r3], #1
   d6c6c:	e7fa      	b.n	d6c64 <memset+0x4>
   d6c6e:	4770      	bx	lr

000d6c70 <srand>:
   d6c70:	b538      	push	{r3, r4, r5, lr}
   d6c72:	4b12      	ldr	r3, [pc, #72]	; (d6cbc <srand+0x4c>)
   d6c74:	681c      	ldr	r4, [r3, #0]
   d6c76:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6c78:	4605      	mov	r5, r0
   d6c7a:	b9d3      	cbnz	r3, d6cb2 <srand+0x42>
   d6c7c:	2018      	movs	r0, #24
   d6c7e:	f7fe f873 	bl	d4d68 <malloc>
   d6c82:	f243 330e 	movw	r3, #13070	; 0x330e
   d6c86:	63a0      	str	r0, [r4, #56]	; 0x38
   d6c88:	8003      	strh	r3, [r0, #0]
   d6c8a:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d6c8e:	8043      	strh	r3, [r0, #2]
   d6c90:	f241 2334 	movw	r3, #4660	; 0x1234
   d6c94:	8083      	strh	r3, [r0, #4]
   d6c96:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d6c9a:	80c3      	strh	r3, [r0, #6]
   d6c9c:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d6ca0:	8103      	strh	r3, [r0, #8]
   d6ca2:	2305      	movs	r3, #5
   d6ca4:	8143      	strh	r3, [r0, #10]
   d6ca6:	230b      	movs	r3, #11
   d6ca8:	8183      	strh	r3, [r0, #12]
   d6caa:	2201      	movs	r2, #1
   d6cac:	2300      	movs	r3, #0
   d6cae:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6cb2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6cb4:	2200      	movs	r2, #0
   d6cb6:	611d      	str	r5, [r3, #16]
   d6cb8:	615a      	str	r2, [r3, #20]
   d6cba:	bd38      	pop	{r3, r4, r5, pc}
   d6cbc:	2003e2a0 	.word	0x2003e2a0

000d6cc0 <strcpy>:
   d6cc0:	4603      	mov	r3, r0
   d6cc2:	f811 2b01 	ldrb.w	r2, [r1], #1
   d6cc6:	f803 2b01 	strb.w	r2, [r3], #1
   d6cca:	2a00      	cmp	r2, #0
   d6ccc:	d1f9      	bne.n	d6cc2 <strcpy+0x2>
   d6cce:	4770      	bx	lr

000d6cd0 <strlen>:
   d6cd0:	4603      	mov	r3, r0
   d6cd2:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6cd6:	2a00      	cmp	r2, #0
   d6cd8:	d1fb      	bne.n	d6cd2 <strlen+0x2>
   d6cda:	1a18      	subs	r0, r3, r0
   d6cdc:	3801      	subs	r0, #1
   d6cde:	4770      	bx	lr

000d6ce0 <strncpy>:
   d6ce0:	b510      	push	{r4, lr}
   d6ce2:	4603      	mov	r3, r0
   d6ce4:	b142      	cbz	r2, d6cf8 <strncpy+0x18>
   d6ce6:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6cea:	f803 4b01 	strb.w	r4, [r3], #1
   d6cee:	3a01      	subs	r2, #1
   d6cf0:	2c00      	cmp	r4, #0
   d6cf2:	d1f7      	bne.n	d6ce4 <strncpy+0x4>
   d6cf4:	441a      	add	r2, r3
   d6cf6:	e000      	b.n	d6cfa <strncpy+0x1a>
   d6cf8:	bd10      	pop	{r4, pc}
   d6cfa:	4293      	cmp	r3, r2
   d6cfc:	d002      	beq.n	d6d04 <strncpy+0x24>
   d6cfe:	f803 4b01 	strb.w	r4, [r3], #1
   d6d02:	e7fa      	b.n	d6cfa <strncpy+0x1a>
   d6d04:	bd10      	pop	{r4, pc}

000d6d06 <link_code_end>:
	...

000d6d08 <dynalib_user>:
   d6d08:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d6d18:	0000 0000 6553 6972 6c61 4d20 6e6f 7469     ....Serial Monit
   d6d28:	726f 5520 2070 6e61 2064 7552 6e6e 6e69     or Up and Runnin
   d6d38:	0067 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     g.--------------
   d6d48:	2d2d 6144 6174 7420 206f 7550 6c62 7369     --Data to Publis
   d6d58:	2d68 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     h---------------
   d6d68:	2d2d 5800 412d 6978 2073 6341 6563 656c     --.X-Axis Accele
   d6d78:	6172 6974 6e6f 0020 4720 5900 412d 6978     ration . G.Y-Axi
   d6d88:	2073 6341 6563 656c 6172 6974 6e6f 0020     s Acceleration .
   d6d98:	2d5a 7841 7369 4120 6363 6c65 7265 7461     Z-Axis Accelerat
   d6da8:	6f69 206e 2d00 2d2d 2d2d 2d2d 2d2d 2d2d     ion .-----------
   d6db8:	2d2d 2d2d 2d2d 452d 646e 5020 6275 696c     -------End Publi
   d6dc8:	6873 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     sh--------------
   d6dd8:	2d2d 2d2d 002d 6172 6873 7061 6900 2e6f     -----.rashap.io.
   d6de8:	6461 6661 7572 7469 632e 6d6f 3500 3839     adafruit.com.598
   d6df8:	3631 6639 3361 6162 3439 3336 3936 3134     169fa3ba94636941
   d6e08:	3361 3033 3739 6536 3234 3265 0063 6172     a330976e42e2c.ra
   d6e18:	6873 7061 662f 6565 7364 472f 5f59 0058     shap/feeds/GY_X.
   d6e28:	6172 6873 7061 662f 6565 7364 472f 5f59     rashap/feeds/GY_
   d6e38:	0059 6172 6873 7061 662f 6565 7364 472f     Y.rashap/feeds/G
   d6e48:	5f59 005a                                   Y_Z.

000d6e4c <_ZTV13Adafruit_MQTT>:
	...
   d6e5c:	40a5 000d 40a5 000d 40a5 000d 40a5 000d     .@...@...@...@..
   d6e6c:	40a5 000d 5b20 7830 3000 5d00 202c 0a00     .@.. [0x.0.], ..
   d6e7c:	0009 7244 706f 6570 2064 2061 6170 6b63     ..Dropped a pack
   d6e8c:	7465 5500 6b6e 6f6e 6e77 6520 7272 726f     et.Unknown error
   d6e9c:	4d00 5451 0054 2525 6425 252e 6664 4600     .MQTT.%%%d.%df.F
   d6eac:	6961 656c 2064 6f74 7320 6275 6373 6972     ailed to subscri
   d6ebc:	6562 4300 6e6f 656e 7463 6f69 206e 6166     be.Connection fa
   d6ecc:	6c69 6465 5400 6568 5320 7265 6576 2072     iled.The Server 
   d6edc:	6f64 7365 6e20 746f 7320 7075 6f70 7472     does not support
   d6eec:	7420 6568 6c20 7665 6c65 6f20 2066 6874      the level of th
   d6efc:	2065 514d 5454 7020 6f72 6f74 6f63 206c     e MQTT protocol 
   d6f0c:	6572 7571 7365 6574 0064 6854 2065 6c43     requested.The Cl
   d6f1c:	6569 746e 6920 6564 746e 6669 6569 2072     ient identifier 
   d6f2c:	7369 6320 726f 6572 7463 5520 4654 382d     is correct UTF-8
   d6f3c:	6220 7475 6e20 746f 6120 6c6c 776f 6465      but not allowed
   d6f4c:	6220 2079 6874 2065 6553 7672 7265 5400      by the Server.T
   d6f5c:	6568 4d20 5451 2054 6573 7672 6369 2065     he MQTT service 
   d6f6c:	7369 7520 616e 6176 6c69 6261 656c 5400     is unavailable.T
   d6f7c:	6568 6420 7461 2061 6e69 7420 6568 7520     he data in the u
   d6f8c:	6573 2072 616e 656d 6f20 2072 6170 7373     ser name or pass
   d6f9c:	6f77 6472 6920 2073 616d 666c 726f 656d     word is malforme
   d6fac:	0064 6f4e 2074 7561 6874 726f 7a69 6465     d.Not authorized
   d6fbc:	7420 206f 6f63 6e6e 6365 0074 7845 6563      to connect.Exce
   d6fcc:	6465 6465 7220 6365 6e6f 656e 7463 7220     eded reconnect r
   d6fdc:	7461 2065 696c 696d 2e74 5020 656c 7361     ate limit. Pleas
   d6fec:	2065 7274 2079 6761 6961 206e 616c 6574     e try again late
   d6ffc:	2e72 5900 756f 6820 7661 2065 6562 6e65     r..You have been
   d700c:	6220 6e61 656e 2064 7266 6d6f 6320 6e6f      banned from con
   d701c:	656e 7463 6e69 2e67 5020 656c 7361 2065     necting. Please 
   d702c:	6f63 746e 6361 2074 6874 2065 514d 5454     contact the MQTT
   d703c:	7320 7265 6576 2072 6461 696d 696e 7473      server administ
   d704c:	6172 6f74 2072 6f66 2072 6f6d 6572 6420     rator for more d
   d705c:	7465 6961 736c 002e                         etails..

000d7064 <_ZTV19Adafruit_MQTT_SPARK>:
	...
   d706c:	40c9 000d 42f5 000d 47fd 000d 48a9 000d     .@...B...G...H..
   d707c:	48db 000d 4811 000d 4851 000d               .H...H..QH..

000d7088 <_ZTVN5spark12NetworkClassE>:
	...
   d7090:	4da9 000d 4db3 000d 4dbd 000d 4dc7 000d     .M...M...M...M..
   d70a0:	4dd1 000d 4ddd 000d 4de9 000d 4df5 000d     .M...M...M...M..
   d70b0:	4dfd 000d 4e07 000d 4e11 000d               .M...N...N..

000d70bc <_ZTVN5spark9WiFiClassE>:
	...
   d70c4:	4f4f 000d 4f45 000d 4f3b 000d 4ef1 000d     OO..EO..;O...N..
   d70d4:	4f2f 000d 4f23 000d 4f17 000d 4f0f 000d     /O..#O...O...O..
   d70e4:	4f05 000d 4efb 000d 4e11 000d               .O...N...N..

000d70f0 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d70f8:	4ff5 000d 4ffb 000d 54e3 000d 5007 000d     .O...O...T...P..
   d7108:	4ff7 000d                                   .O..

000d710c <_ZTV9TCPClient>:
	...
   d7114:	40cd 000d 4101 000d 4f6d 000d 4f87 000d     .@...A..mO...O..
   d7124:	5389 000d 51cb 000d 519d 000d 4fb1 000d     .S...Q...Q...O..
   d7134:	5261 000d 500d 000d 51ff 000d 535b 000d     aR...P...Q..[S..
   d7144:	4fb3 000d 4feb 000d 4f99 000d 50fd 000d     .O...O...O...P..
   d7154:	517d 000d 6977 6972 676e 7200 6365 2076     }Q..wiring.recv 
   d7164:	7265 6f72 2072 203d 6425 0000               error = %d..

000d7170 <_ZTVN5spark9MeshClassE>:
	...
   d7178:	5559 000d 554f 000d 5545 000d 553b 000d     YU..OU..EU..;U..
   d7188:	552f 000d 5523 000d 5517 000d 550f 000d     /U..#U...U...U..
   d7198:	5505 000d 54fb 000d 4e11 000d               .U...T...N..

000d71a4 <_ZTV8SPIClass>:
	...
   d71ac:	5651 000d 5653 000d                         QV..SV..

000d71b4 <_ZTV7TwoWire>:
	...
   d71bc:	568f 000d 56d9 000d 56b1 000d 5691 000d     .V...V...V...V..
   d71cc:	56b9 000d 56c1 000d 56c9 000d 56d1 000d     .V...V...V...V..

000d71dc <_ZTV9USBSerial>:
	...
   d71e4:	5715 000d 5759 000d 5733 000d 5a45 000d     .W..YW..3W..EZ..
   d71f4:	572d 000d 5717 000d 571f 000d 5753 000d     -W...W...W..SW..
   d7204:	5727 000d 5711 000d                         'W...W..

000d720c <_ZTV9IPAddress>:
	...
   d7214:	580b 000d 57fd 000d 57ff 000d 2b25 3330     .X...W...W..%+03
   d7224:	3a64 3025 7532 2500 2d59 6d25 252d 5464     d:%02u.%Y-%m-%dT
   d7234:	4825 253a 3a4d 5325 7a25 6100 6373 6974     %H:%M:%S%z.ascti
   d7244:	656d 6c00 006e 6e66 6300 646f 0065 6564     me.ln.fn.code.de
   d7254:	6174 6c69 0d00 000a 3025 3031 2075 5d00     tail....%010u .]
   d7264:	0020 2928 203a 2000 005b 6f63 6564 3d20      .(): . [.code =
   d7274:	0020 6925 6400 7465 6961 736c 3d20 0020      .%i.details = .
   d7284:	6162 6475 5300 7265 6169 006c 6553 6972     baud.Serial.Seri
   d7294:	6c61 0031 7974 6570 7000 7261 6d61 6300     al1.type.param.c
   d72a4:	646d 6900 0064 6e68 0064 7473 6d72 6600     md.id.hnd.strm.f
   d72b4:	6c69 0074 766c 006c 6461 4864 6e61 6c64     ilt.lvl.addHandl
   d72c4:	7265 7200 6d65 766f 4865 6e61 6c64 7265     er.removeHandler
   d72d4:	6500 756e 486d 6e61 6c64 7265 0073 534a     .enumHandlers.JS
   d72e4:	4e4f 7453 6572 6d61 6f4c 4867 6e61 6c64     ONStreamLogHandl
   d72f4:	7265 6100 7070 6e00 6e6f 0065 7274 6361     er.app.none.trac
   d7304:	0065 6e69 6f66 7700 7261 006e 6170 696e     e.info.warn.pani
   d7314:	0063 6c61 006c 616e 006e 766f 0066 6e69     c.all.nan.ovf.in
   d7324:	0066 0000                                   f...

000d7328 <_ZTV11USARTSerial>:
	...
   d7330:	5cd7 000d 5cfb 000d 5d07 000d 5a45 000d     .\...\...]..EZ..
   d7340:	5ce3 000d 5cef 000d 5ce9 000d 5cf5 000d     .\...\...\...\..
   d7350:	5cd9 000d 5cdd 000d                         .\...\..

000d7358 <_ZTVN5spark13EthernetClassE>:
	...
   d7360:	5e23 000d 5e19 000d 5e0f 000d 5e05 000d     #^...^...^...^..
   d7370:	5df9 000d 5ded 000d 5de1 000d 5dd9 000d     .]...]...]...]..
   d7380:	5dcf 000d 5dc5 000d 4e11 000d               .]...]...N..

000d738c <__sf_fake_stdin>:
	...

000d73ac <__sf_fake_stdout>:
	...

000d73cc <__sf_fake_stderr>:
	...
   d73ec:	0043                                        C.

000d73ee <link_const_variable_data_end>:
	...

000d73f0 <link_constructors_location>:
   d73f0:	000d4301 	.word	0x000d4301
   d73f4:	000d47f9 	.word	0x000d47f9
   d73f8:	000d493b 	.word	0x000d493b
   d73fc:	000d4edd 	.word	0x000d4edd
   d7400:	000d4f59 	.word	0x000d4f59
   d7404:	000d5605 	.word	0x000d5605
   d7408:	000d5a05 	.word	0x000d5a05
   d740c:	000d5a21 	.word	0x000d5a21
   d7410:	000d5a35 	.word	0x000d5a35
   d7414:	000d5dad 	.word	0x000d5dad
   d7418:	000d5e2d 	.word	0x000d5e2d
   d741c:	000d5e81 	.word	0x000d5e81
   d7420:	000d5f69 	.word	0x000d5f69
   d7424:	000d5fed 	.word	0x000d5fed
   d7428:	000d60b1 	.word	0x000d60b1
   d742c:	000d6175 	.word	0x000d6175
